{
  "id": "guide/lazy-loading-ngmodules",
  "title": "Lazy Loading Feature Modules",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/lazy-loading-ngmodules.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"lazy-loading-feature-modules\">Lazy Loading Feature Modules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#lazy-loading-feature-modules\"><i class=\"material-icons\">link</i></a></h1>\n<h2 id=\"high-level-view\">High level view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#high-level-view\"><i class=\"material-icons\">link</i></a></h2>\n<p>By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading—a design pattern that loads NgModules as needed. Lazy loading helps keep initial\nbundle sizes smaller, which in turn helps decrease load times.</p>\n<p>For the final sample app with two lazy-loaded modules that this page describes, see the\n<live-example></live-example>.</p>\n<p>There are three main steps to setting up a lazy-loaded feature module:</p>\n<ol>\n<li>Create the feature module with the CLI, using the <code>--route</code> flag.</li>\n<li>Create the feature module’s component.</li>\n<li>Configure the routes.</li>\n</ol>\n<h2 id=\"set-up-an-app\">Set up an app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-an-app\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you don’t already have an app, you can follow the steps below to\ncreate one with the CLI. If you do already have an app, skip to\n<a href=\"guide/lazy-loading-ngmodules#config-routes\">Configure the routes</a>. Enter the following command\nwhere <code>customer-app</code> is the name of your app:</p>\n<code-example language=\"bash\">\nng new customer-app --routing\n</code-example>\n<p>This creates an app called <code>customer-app</code> and the <code>--routing</code> flag\ngenerates a file called <code>app-routing.module.ts</code>, which is one of\nthe files you need for setting up lazy loading for your feature module.\nNavigate into the project by issuing the command <code>cd customer-app</code>.</p>\n<h2 id=\"create-a-feature-module-with-routing\">Create a feature module with routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Next, you’ll need a feature module with a component to route to.\nTo make one, enter the following command in the terminal, where <code>customers</code> is the name of the feature module, and <code>customer-list</code> is the route path for loading the <code>customers</code> component:</p>\n<code-example language=\"bash\">\nng generate module customers --route customer-list --module app.module\n</code-example>\n<p>This creates a <code>customers</code> folder with the new lazy-loadable module <code>CustomersModule</code> defined in the file <code>customers.module.ts</code>. The command automatically adds the <code>CustomerComponent</code> to the new feature module.</p>\n<p>Because the new module is meant to be lazy-loaded, the command does NOT add a reference for the new feature module to the root application's module file, <code>app.module.ts</code>.\nInstead, it adds the declared route, <code>customer-list</code> to the <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array declared in the module provided as the <code>--module</code> option.</p>\n<code-example language=\"typescript\" header=\"src/app/app-routing.module.ts\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n    { path: 'customer-list',\n      <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: () => import('./customers/customers.module').then(m => m.CustomersModule) }\n    ];\n</code-example>\n<p>Notice that the lazy-loading syntax uses <code><a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a></code> followed by a function that uses the browser's built-in <code>import('...')</code> syntax for dynamic imports.\nThe import path is the relative path to the module.</p>\n<h3 id=\"add-another-feature-module\">Add another feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#add-another-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the same command to create a second lazy-loaded feature module with routing, along with its stub component.</p>\n<code-example language=\"bash\">\nng generate module orders --route order-list --module app.module\n</code-example>\n<p>This creates a new folder called <code>orders</code> containing an <code>OrdersModule</code> and <code>OrdersRoutingModule</code>, along with the new <code>OrderComponent</code> source files.\nThe <code>order-list</code> route is added to the <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array in <code>app-routing.module.ts</code>, using the lazy-loading syntax.</p>\n<code-example language=\"typescript\" header=\"src/app/app-routing.module.ts\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n    { path: 'customer-list',\n      <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: () => import('./customers/customers.module').then(m => m.CustomersModule) },\n    { path: 'order-list',\n      <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: () => import('./orders/orders.module').then(m => m.OrdersModule) }\n    ];\n</code-example>\n<h2 id=\"set-up-the-ui\">Set up the UI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#set-up-the-ui\"><i class=\"material-icons\">link</i></a></h2>\n<p>Though you can type the URL into the address bar, a navigation UI is easier for the user and more common.\nReplace the default placeholder markup in <code>app.component.html</code> with a custom nav\nso you can easily navigate to your modules in the browser:</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"app-component-template\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/customers\">Customers&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/orders\">Orders&#x3C;/button>\n&#x3C;button <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"\">Home&#x3C;/button>\n\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p>To see your app in the browser so far, enter the following command in the terminal window:</p>\n<code-example language=\"bash\">\nng serve\n</code-example>\n<p>Then go to <code>localhost:4200</code> where you should see “app works!” and three buttons.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/three-buttons.png\" width=\"300\" alt=\"three buttons in the browser\">\n</figure>\n<p>These buttons work, because the CLI automatically added the routes to the feature modules to the <code>routes</code> array in <code>app.module.ts</code>.</p>\n<a id=\"config-routes\"></a>\n<h2 id=\"imports-and-route-configuration\">Imports and route configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#imports-and-route-configuration\"><i class=\"material-icons\">link</i></a></h2>\n<p>The CLI automatically added each feature module to the routes map at the application level.\nFinish this off by adding the default route.\nIn <code>AppRoutingModule</code>, update the <code>routes</code> array with the following:</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/app-routing.module.ts\" id=\"app-routing.module.ts\" region=\"const-routes\" header=\"src/app/app-routing.module.ts\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: 'customers',\n    <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: () => import('./customers/customers.module').then(mod => mod.CustomersModule)\n  },\n  {\n    path: 'orders',\n    <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: () => import('./orders/orders.module').then(mod => mod.OrdersModule)\n  },\n  {\n    path: '',\n    <a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a>: '',\n    <a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: '<a href=\"api/core/Version#full\" class=\"code-anchor\">full</a>'\n  }\n];\n\n</code-example>\n<p>The first two paths are the routes to the <code>CustomersModule</code> and the <code>OrdersModule</code>.\nThe final entry defines a default route. The empty path matches everything that doesn't match an earlier path.</p>\n<h3 id=\"inside-the-feature-module\">Inside the feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#inside-the-feature-module\"><i class=\"material-icons\">link</i></a></h3>\n<p>Next, take a look at <code>customers.module.ts</code>. If you’re using the CLI and following the steps outlined in this page, you don’t have to do anything here.</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers.module.ts\" id=\"customers.module.ts\" region=\"customers-module\" header=\"src/app/customers/customers.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>,\n    CustomersRoutingModule\n  ],\n  declarations: [CustomerListComponent]\n})\nexport class CustomersModule { }\n\n</code-example>\n<p>The <code>customers.module.ts</code> file imports the <code>CustomersRoutingModule</code> and <code>CustomerListComponent</code> so the <code>CustomersModule</code> class can have access to them. <code>CustomersRoutingModule</code> is then listed in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code>imports</code> array giving <code>CustomersModule</code> access to its own routing module, and <code>CustomerListComponent</code> is in the <code>declarations</code> array, which means <code>CustomerListComponent</code> belongs to the <code>CustomersModule</code>.</p>\n<p>The feature module has its own routing module, <code>customers-routing.module.ts</code>. The <code>AppRoutingModule</code> imports the feature module, <code>CustomersModule</code>, and <code>CustomersModule</code> in turn imports the <code>CustomersRoutingModule</code>.</p>\n<p>The feature-specific routing module imports its own feature component, <code>CustomerListComponent</code>, along with the other JavaScript import statements. It also adds the route to its own component.</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/customers/customers-routing.module.ts\" id=\"customers-routing.module.ts\" region=\"customers-routing-module\" header=\"src/app/customers/customers-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>, <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\nimport { CustomerListComponent } from './customer-list/customer-list.component';\n\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: CustomerListComponent\n  }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forChild(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class CustomersRoutingModule { }\n\n</code-example>\n<p>Notice that the <code>path</code> is set to an empty string. This is because the path in <code>AppRoutingModule</code> is already set to <code>customers</code>, so this route in the <code>CustomersRoutingModule</code>, is already within the <code>customers</code> context. Every route in this routing module is a child route.</p>\n<p>The other feature module's routing module is configured similarly.</p>\n<code-example path=\"lazy-loading-ngmodules/src/app/orders/orders-routing.module.ts\" id=\"orders-routing.module.ts\" region=\"orders-routing-module-detail\" header=\"src/app/orders/orders-routing.module.ts (excerpt)\">\nimport { OrderListComponent } from './order-list/order-list.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  {\n    path: '',\n    component: OrderListComponent\n  }\n];\n\n</code-example>\n<h2 id=\"confirm-its-working\">Confirm it’s working<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#confirm-its-working\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can check to see that a module is indeed being lazy loaded with the Chrome developer tools. In Chrome, open the dev tools by pressing <code>Cmd+Option+i</code> on a Mac or <code>Ctrl+Shift+j</code> on a PC and go to the Network Tab.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/network-tab.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>Click on the Orders or Customers button. If you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/chunk-arrow.png\" width=\"600\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>To see it again, or to test after working in the project, clear everything out by clicking the circle with a line through it in the upper left of the Network Tab:</p>\n<figure>\n <img src=\"generated/images/guide/lazy-loading-ngmodules/clear.gif\" width=\"200\" alt=\"lazy loaded modules diagram\">\n</figure>\n<p>Then reload with <code>Cmd+r</code> or <code>Ctrl+r</code>, depending on your platform.</p>\n<h2 id=\"forroot-and-forchild\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">forRoot()</a></code> and <code><a href=\"api/router/RouterModule#forChild\" class=\"code-anchor\">forChild()</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#forroot-and-forchild\"><i class=\"material-icons\">link</i></a></h2>\n<p>You might have noticed that the CLI adds <code>RouterModule.forRoot(routes)</code> to the <code>app-routing.module.ts</code> <code>imports</code> array.\nThis lets Angular know that this module, <code>AppRoutingModule</code>, is a routing module and <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">forRoot()</a></code> specifies that this is the root routing module.\nIt configures all the routes you pass to it, gives you access to the router directives, and registers the <code>RouterService</code>.\nUse <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">forRoot()</a></code> in the <code>AppRoutingModule</code>—that is, one time in the app at the root level.</p>\n<p>The CLI also adds <code>RouterModule.forChild(routes)</code> to feature routing modules.\nThis way, Angular knows that the route list is only responsible for providing additional routes and is intended for feature modules.\nYou can use <code><a href=\"api/router/RouterModule#forChild\" class=\"code-anchor\">forChild()</a></code> in multiple modules.</p>\n<p>The <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">forRoot()</a></code> method takes care of the <em>global</em> injector configuration for the Router.\nThe <code><a href=\"api/router/RouterModule#forChild\" class=\"code-anchor\">forChild()</a></code> method has no injector configuration. It uses directives such as <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> and <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>.\nFor more information, see the <a href=\"guide/singleton-services#forRoot\"><code>forRoot()</code> pattern</a> section of the <a href=\"guide/singleton-services\">Singleton Services</a> guide.</p>\n<hr>\n<h2 id=\"more-on-ngmodules-and-routing\">More on NgModules and routing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\"><i class=\"material-icons\">link</i></a></h2>\n<p>You may also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/router\">Routing and Navigation</a>.</li>\n<li><a href=\"guide/providers\">Providers</a>.</li>\n<li><a href=\"guide/module-types\">Types of Feature Modules</a>.</li>\n<li><a href=\"https://web.dev/route-level-code-splitting-in-angular/\">Route-level code-splitting in Angular</a></li>\n<li><a href=\"https://web.dev/route-preloading-in-angular/\">Route preloading strategies in Angular</a></li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/providers\n - guide/singleton-services\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/core/NgModule\n - api/core/Version#full\n - api/router/Route#loadChildren\n - api/router/Route#pathMatch\n - api/router/Route#redirectTo\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterModule#forChild\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/lazy-loading-ngmodules#add-another-feature-module\n - guide/lazy-loading-ngmodules#config-routes\n - guide/lazy-loading-ngmodules#confirm-its-working\n - guide/lazy-loading-ngmodules#create-a-feature-module-with-routing\n - guide/lazy-loading-ngmodules#forroot-and-forchild\n - guide/lazy-loading-ngmodules#high-level-view\n - guide/lazy-loading-ngmodules#imports-and-route-configuration\n - guide/lazy-loading-ngmodules#inside-the-feature-module\n - guide/lazy-loading-ngmodules#lazy-loading-feature-modules\n - guide/lazy-loading-ngmodules#more-on-ngmodules-and-routing\n - guide/lazy-loading-ngmodules#set-up-an-app\n - guide/lazy-loading-ngmodules#set-up-the-ui\n - guide/module-types\n - guide/providers\n - guide/router\n - guide/singleton-services\n - guide/singleton-services#forRoot\n - https://github.com/angular/angular/edit/master/aio/content/guide/lazy-loading-ngmodules.md?message=docs%3A%20describe%20your%20change...\n - https://web.dev/route-level-code-splitting-in-angular/\n - https://web.dev/route-preloading-in-angular/\n-->"
}