{
  "id": "guide/template-syntax",
  "title": "Template Syntax",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-syntax.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-syntax\">Template Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-syntax\"><i class=\"material-icons\">link</i></a></h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n  h4 .syntax { font-size: 100%; }\n</style>\n<p>The Angular application manages what the user sees and can do, achieving this through the interaction of a component class instance (the <em>component</em>) and its user-facing template.</p>\n<p>You may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM).\nIn Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</p>\n<p>This page is a comprehensive technical reference to the Angular template language.\nIt explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</p>\n<p>Many code snippets illustrate the points and concepts, all of them available\nin the <live-example title=\"Template Syntax Live Code\"></live-example>.</p>\n<a id=\"html\"></a>\n<h2 id=\"html-in-templates\">HTML in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n<p>HTML is the language of the Angular template.\nAlmost all HTML syntax is valid template syntax.\nThe <code>&#x3C;script></code> element is a notable exception;\nit is forbidden, eliminating the risk of script injection attacks.\nIn practice, <code>&#x3C;script></code> is ignored and a warning appears in the browser console.\nSee the <a href=\"guide/security\">Security</a> page for details.</p>\n<p>Some legal HTML doesn't make much sense in a template.\nThe <code>&#x3C;html></code>, <code>&#x3C;body></code>, and <code>&#x3C;base></code> elements have no useful role.\nPretty much everything else is fair game.</p>\n<p>You can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes.\nIn the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.</p>\n<p>Begin with the first form of data binding—interpolation—to see how much richer template HTML can be.</p>\n<hr>\n<a id=\"interpolation\"></a>\n<h2 id=\"interpolation-and-template-expressions\">Interpolation and Template Expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-and-template-expressions\"><i class=\"material-icons\">link</i></a></h2>\n<p>Interpolation allows you to incorporate calculated strings into the text\nbetween HTML element tags and within attribute assignments. Template\nexpressions are what you use to calculate those strings.</p>\n<p>The interpolation <live-example></live-example> demonstrates all of\nthe syntax and code snippets described in this section.</p>\n<h3 id=\"interpolation-\">Interpolation <code>{{...}}</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation-\"><i class=\"material-icons\">link</i></a></h3>\n<p>Interpolation refers to embedding expressions into marked up text.\nBy default, interpolation uses as its delimiter the double curly braces, <code>{{</code> and <code>}}</code>.</p>\n<p>In the following snippet, <code>{{ currentCustomer }}</code> is an example of interpolation.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"interpolation-example1\" header=\"src/app/app.component.html\">\n&#x3C;h3>Current customer: {{ currentCustomer }}&#x3C;/h3>\n\n</code-example>\n<p>The text between the braces is often the name of a component\nproperty. Angular replaces that name with the\nstring value of the corresponding component property.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-property\" header=\"src/app/app.component.html\">\n&#x3C;p>{{title}}&#x3C;/p>\n&#x3C;div>&#x3C;img src=\"{{itemImageUrl}}\">&#x3C;/div>\n\n</code-example>\n<p>In the example above, Angular evaluates the <code>title</code> and <code>itemImageUrl</code> properties\nand fills in the blanks, first displaying some title text and then an image.</p>\n<p>More generally, the text between the braces is a <strong>template expression</strong>\nthat Angular first <strong>evaluates</strong> and then <strong>converts to a string</strong>.\nThe following interpolation illustrates the point by adding two numbers:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"convert-string\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}.&#x3C;/p>\n\n</code-example>\n<p>The expression can invoke methods of the host component such as <code>getVal()</code> in\nthe following example:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"invoke-method\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.&#x3C;/p>\n\n</code-example>\n<p>Angular evaluates all expressions in double curly braces,\nconverts the expression results to strings, and links them with neighboring literal strings. Finally,\nit assigns this composite interpolated result to an <strong>element or directive property</strong>.</p>\n<p>You appear to be inserting the result between element tags and assigning it to attributes.\nHowever, interpolation is a special syntax that Angular converts into a <em>property binding</em>.</p>\n<div class=\"alert is-helpful\">\n<p>If you'd like to use something other than <code>{{</code> and <code>}}</code>, you can\nconfigure the interpolation delimiter via the\n<a href=\"api/core/Component#interpolation\">interpolation</a>\noption in the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n</div>\n<h3 id=\"template-expressions\">Template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expressions\"><i class=\"material-icons\">link</i></a></h3>\n<p>A template <strong>expression</strong> produces a value and appears within the double\ncurly braces, <code>{{ }}</code>.\nAngular executes the expression and assigns it to a property of a binding target;\nthe target could be an HTML element, a component, or a directive.</p>\n<p>The interpolation braces in <code>{{1 + 1}}</code> surround the template expression <code>1 + 1</code>.\nIn the property binding,\na template expression appears in quotes to the right of the <code>=</code> symbol as in <code>[property]=\"expression\"</code>.</p>\n<p>In terms of syntax, template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with a few exceptions.</p>\n<p>You can't use JavaScript expressions that have or promote side effects,\nincluding:</p>\n<ul>\n<li>Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</li>\n<li>Operators such as <code>new</code>, <code>typeof</code>, <code>instanceof</code>, etc.</li>\n<li>Chaining expressions with <code>;</code> or <code>,</code></li>\n<li>The increment and decrement operators <code>++</code> and <code>--</code></li>\n<li>Some of the ES2015+ operators</li>\n</ul>\n<p>Other notable differences from JavaScript syntax include:</p>\n<ul>\n<li>No support for the bitwise operators such as <code>|</code> and <code>&#x26;</code></li>\n<li>New <a href=\"guide/template-syntax#expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></li>\n</ul>\n<h3 id=\"expression-context\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-context\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <em>expression context</em> is typically the <em>component</em> instance.\nIn the following snippets, the <code>recommended</code> within double curly braces and the\n<code>itemImageUrl2</code> in quotes refer to properties of the <code>AppComponent</code>.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;img [src]=\"itemImageUrl2\">\n\n</code-example>\n<p>An expression may also refer to properties of the <em>template's</em> context\nsuch as a template input variable,</p>\n<!-- link to built-in-directives#template-input-variables -->\n<p><code>let customer</code>, or a template reference variable, <code>#customerInput</code>.</p>\n<!-- link to guide/template-ref-variables -->\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&#x3C;label><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<p>The context for terms in an expression is a blend of the <em>template variables</em>,\nthe directive's <em>context</em> object (if it has one), and the component's <em>members</em>.\nIf you reference a name that belongs to more than one of these namespaces,\nthe template variable name takes precedence, followed by a name in the directive's <em>context</em>,\nand, lastly, the component's member names.</p>\n<p>The previous example presents such a name collision. The component has a <code>customer</code>\nproperty and the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> defines a <code>customer</code> template variable.</p>\n<div class=\"alert is-helpful\">\n<p>The <code>customer</code> in <code>{{customer.name}}</code>\nrefers to the template input variable, not the component's property.</p>\n<p>Template expressions cannot refer to anything in\nthe global namespace, except <code>undefined</code>. They can't refer to\n<code>window</code> or <code><a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a></code>. Additionally, they\ncan't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing\nmembers of the expression context.</p>\n</div>\n<h3 id=\"expression-guidelines\">Expression guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<p>When using template expressions follow these guidelines:</p>\n<ul>\n<li><a href=\"guide/template-syntax#simplicity\">Simplicity</a></li>\n<li><a href=\"guide/template-syntax#quick-execution\">Quick execution</a></li>\n<li><a href=\"guide/template-syntax#no-visible-side-effects\">No visible side effects</a></li>\n</ul>\n<h4 id=\"simplicity\">Simplicity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#simplicity\"><i class=\"material-icons\">link</i></a></h4>\n<p>Although it's possible to write complex template expressions, it's a better\npractice to avoid them.</p>\n<p>A property name or method call should be the norm, but an occasional Boolean negation, <code>!</code>, is OK.\nOtherwise, confine application and business logic to the component,\nwhere it is easier to develop and test.</p>\n<h4 id=\"quick-execution\">Quick execution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#quick-execution\"><i class=\"material-icons\">link</i></a></h4>\n<p>Angular executes template expressions after every change detection cycle.\nChange detection cycles are triggered by many asynchronous activities such as\npromise resolutions, HTTP results, timer events, key presses and mouse moves.</p>\n<p>Expressions should finish quickly or the user experience may drag, especially on slower devices.\nConsider caching values when their computation is expensive.</p>\n<h4 id=\"no-visible-side-effects\">No visible side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h4>\n<p>A template expression should not change any application state other than the value of the\ntarget property.</p>\n<p>This rule is essential to Angular's \"unidirectional data flow\" policy.\nYou should never worry that reading a component value might change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n<p>An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is ideal because\nit is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns\n<em>exactly the same thing</em> until one of its dependent values changes.</p>\n<p>Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> when called twice in a row.</p>\n<div class=\"alert is-helpful\">\n<p>There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with referential inequality of objects when iterating over them. See <a href=\"guide/template-syntax#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n</div>\n<!-- end of Interpolation doc -->\n<hr>\n<a id=\"template-statements\"></a>\n<h2 id=\"template-statements\">Template statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements\"><i class=\"material-icons\">link</i></a></h2>\n<p>A template <strong>statement</strong> responds to an <strong>event</strong> raised by a binding target\nsuch as an element, component, or directive.\nYou'll see template statements in the <a href=\"guide/template-syntax#event-binding\">event binding</a> section,\nappearing in quotes to the right of the <code>=</code> symbol as in <code>(event)=\"statement\"</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>A template statement <em>has a side effect</em>.\nThat's the whole point of an event.\nIt's how you update application state from user action.</p>\n<p>Responding to events is the other side of Angular's \"unidirectional data flow\".\nYou're free to change anything, anywhere, during this turn of the event loop.</p>\n<p>Like template expressions, template <em>statements</em> use a language that looks like JavaScript.\nThe template statement parser differs from the template expression parser and\nspecifically supports both basic assignment (<code>=</code>) and chaining expressions\n(with <code>;</code> or <code>,</code>).</p>\n<p>However, certain JavaScript syntax is not allowed:</p>\n<ul>\n<li><code>new</code></li>\n<li>increment and decrement operators, <code>++</code> and <code>--</code></li>\n<li>operator assignment, such as <code>+=</code> and <code>-=</code></li>\n<li>the bitwise operators <code>|</code> and <code>&#x26;</code></li>\n<li>the <a href=\"guide/template-syntax#expression-operators\">template expression operators</a></li>\n</ul>\n<h3 id=\"statement-context\">Statement context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-context\"><i class=\"material-icons\">link</i></a></h3>\n<p>As with expressions, statements can refer only to what's in the statement context\nsuch as an event handling method of the component instance.</p>\n<p>The <em>statement context</em> is typically the component instance.\nThe <em>deleteHero</em> in <code>(click)=\"deleteHero()\"</code> is a method of the data-bound component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>The statement context may also refer to properties of the template's own context.\nIn the following examples, the template <code>$event</code> object,\na <a href=\"guide/template-syntax#template-input-variable\">template input variable</a> (<code>let hero</code>),\nand a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> (<code>#heroForm</code>)\nare passed to an event handling method of the component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n&#x3C;button *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}&#x3C;/button>\n&#x3C;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... &#x3C;/form>\n\n</code-example>\n<p>Template context names take precedence over component context names.\nIn <code>deleteHero(hero)</code> above, the <code>hero</code> is the template input variable,\nnot the component's <code>hero</code> property.</p>\n<h3 id=\"statement-guidelines\">Statement guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-guidelines\"><i class=\"material-icons\">link</i></a></h3>\n<p>Template statements cannot refer to anything in the global namespace. They\ncan't refer to <code>window</code> or <code><a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a></code>.\nThey can't call <code>console.log</code> or <code>Math.max</code>.</p>\n<p>As with expressions, avoid writing complex template statements.\nA method call or simple property assignment should be the norm.</p>\n<hr>\n<a id=\"binding-syntax\"></a>\n<h2 id=\"binding-syntax-an-overview\">Binding syntax: an overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-syntax-an-overview\"><i class=\"material-icons\">link</i></a></h2>\n<p>Data-binding is a mechanism for coordinating what users see, specifically\nwith application data values.\nWhile you could push values to and pull values from HTML,\nthe application is easier to write, read, and maintain if you turn these tasks over to a binding framework.\nYou simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"binding-syntax\">binding syntax example</live-example>.</p>\n<p>Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</p>\n<ul>\n<li>From the <em>source-to-view</em></li>\n<li>From <em>view-to-source</em></li>\n<li>Two-way sequence: <em>view-to-source-to-view</em></li>\n</ul>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"30%\">\n  \n  <col width=\"50%\">\n  \n  <col width=\"20%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Category\n    </th>\n  </tr>\n  <tr>\n     <td>\n      Interpolation<br>\n      Property<br>\n      Attribute<br>\n      Class<br>\n      Style\n    </td>\n    <td>\n      <code-example>\n        {{expression}}\n        [<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>]=\"expression\"\n        bind-target=\"expression\"\n      </code-example>\n    </td>\n    <td>\n      One-way<br>from data source<br>to view target\n    </td>\n    </tr><tr>\n      <td>\n        Event\n      </td>\n      <td>\n        <code-example>\n          (<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>)=\"statement\"\n          on-target=\"statement\"\n        </code-example>\n      </td>\n      <td>\n        One-way<br>from view target<br>to data source\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Two-way\n      </td>\n      <td>\n        <code-example>\n          [(<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>)]=\"expression\"\n          bindon-target=\"expression\"\n        </code-example>\n      </td>\n      <td>\n        Two-way\n      </td>\n    </tr>\n  \n</tbody></table>\n<p>Binding types other than interpolation have a <strong>target name</strong> to the left of the equal sign, either surrounded by punctuation, <code>[]</code> or <code>()</code>,\nor preceded by a prefix: <code>bind-</code>, <code>on-</code>, <code>bindon-</code>.</p>\n<p>The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>.</p>\n<p>Every public member of a <strong>source</strong> directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.</p>\n<h3 id=\"data-binding-and-html\">Data-binding and HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#data-binding-and-html\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the normal course of HTML development, you create a visual structure with HTML elements, and\nyou modify those elements by setting element attributes with string constants.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"special\">Plain old <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a>&#x3C;/div>\n&#x3C;img src=\"images/item.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n</code-example>\n<p>With data-binding, you can control things like the state of a button:</p>\n<code-example path=\"binding-syntax/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p>Notice that the binding is to the <code>disabled</code> property of the button's DOM element,\n<strong>not</strong> the attribute. This applies to data-binding in general. Data-binding works with <em>properties</em> of DOM elements, components, and directives, not HTML <em>attributes</em>.</p>\n<h3 id=\"html-attribute-vs-dom-property\">HTML attribute vs. DOM property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-attribute-vs-dom-property\"><i class=\"material-icons\">link</i></a></h3>\n<p>The distinction between an HTML attribute and a DOM property is key to understanding\nhow Angular binding works. <strong>Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.</strong></p>\n<ul>\n<li>\n<p>A few HTML attributes have 1:1 mapping to properties; for example, <code>id</code>.</p>\n</li>\n<li>\n<p>Some HTML attributes don't have corresponding properties; for example, <code>aria-*</code>.</p>\n</li>\n<li>\n<p>Some DOM properties don't have corresponding attributes; for example, <code>textContent</code>.</p>\n</li>\n</ul>\n<p>It is important to remember that <em>HTML attribute</em> and the <em>DOM property</em> are different things, even when they have the same name.\nIn Angular, the only role of HTML attributes is to initialize element and directive state.</p>\n<p><strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p>\n<p>When you write a data-binding, you're dealing exclusively with the <em>DOM properties</em> and <em>events</em> of the target object.</p>\n<div class=\"alert is-helpful\">\n<p>This general rule can help you build a mental model of attributes and DOM properties:\n<strong>Attributes initialize DOM properties and then they are done.\nProperty values can change; attribute values can't.</strong></p>\n<p>There is one exception to this rule.\nAttributes can be changed by <code>setAttribute()</code>, which re-initializes corresponding DOM properties.</p>\n</div>\n<p>For more information, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\">MDN Interfaces documentation</a> which has API docs for all the standard DOM elements and their properties.\nComparing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&#x3C;td></code> attributes</a> attributes to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\"><code>&#x3C;td></code> properties</a> provides a helpful example for differentiation.\nIn particular, you can navigate from the attributes page to the properties via \"DOM interface\" link, and navigate the inheritance hierarchy up to <code>HTMLTableCellElement</code>.</p>\n<h4 id=\"example-1-an-input\">Example 1: an <code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4>\n<p>When the browser renders <code>&#x3C;input type=\"text\" value=\"Sarah\"></code>, it creates a\ncorresponding DOM node with a <code>value</code> property initialized to \"Sarah\".</p>\n<code-example language=\"html\">\n&#x3C;input type=\"text\" value=\"Sarah\">\n</code-example>\n<p>When the user enters \"Sally\" into the <code>&#x3C;input></code>, the DOM element <code>value</code> <em>property</em> becomes \"Sally\".\nHowever, if you look at the HTML attribute <code>value</code> using <code>input.getAttribute('value')</code>, you can see that the <em>attribute</em> remains unchanged—it returns \"Sarah\".</p>\n<p>The HTML attribute <code>value</code> specifies the <em>initial</em> value; the DOM <code>value</code> property is the <em>current</em> value.</p>\n<p>To see attributes versus DOM properties in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax.</p>\n<h4 id=\"example-2-a-disabled-button\">Example 2: a disabled button<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>disabled</code> attribute is another example. A button's <code>disabled</code>\n<em>property</em> is <code>false</code> by default so the button is enabled.</p>\n<p>When you add the <code>disabled</code> <em>attribute</em>, its presence alone\ninitializes the button's <code>disabled</code> <em>property</em> to <code>true</code>\nso the button is disabled.</p>\n<code-example language=\"html\">\n&#x3C;button disabled>Test Button&#x3C;/button>\n</code-example>\n<p>Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button.\nHowever, the value of the <em>attribute</em> is irrelevant,\nwhich is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n<p>To control the state of the button, set the <code>disabled</code> <em>property</em>,</p>\n<div class=\"alert is-helpful\">\n<p>Though you could technically set the <code>[attr.disabled]</code> attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is <code>null</code> or not. Consider the following:</p>\n<code-example language=\"html\">\n&#x3C;input [disabled]=\"condition ? true : false\">\n&#x3C;input [attr.disabled]=\"condition ? 'disabled' : null\">\n</code-example>\n<p>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</p>\n</div>\n<p>To see the <code>disabled</code> button example in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax. This example shows you how to toggle the disabled property from the component.</p>\n<h2 id=\"binding-types-and-targets\">Binding types and targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <strong>target of a data-binding</strong> is something in the DOM.\nDepending on the binding type, the target can be a property (element, component, or directive),\nan event (element, component, or directive), or sometimes an attribute name.\nThe following table summarizes the targets for the different binding types.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"15%\">\n  \n  <col width=\"75%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Type\n    </th>\n    <th>\n      Target\n    </th>\n    <th>\n      Examples\n    </th>\n  </tr>\n  <tr>\n    <td>\n      Property\n    </td>\n    <td>\n      Element property<br>\n      Component property<br>\n      Directive property\n    </td>\n    <td>\n      <code>src</code>, <code>hero</code>, and <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;img [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example>\n      <!-- For more information, see [Property Binding](guide/property-binding). -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Event\n    </td>\n    <td>\n      Element event<br>\n      Component event<br>\n      Directive event\n    </td>\n    <td>\n      <code>click</code>, <code>deleteRequest</code>, and <code>myClick</code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example>\n      <!-- KW--Why don't these links work in the table? -->\n      <!-- <div>For more information, see [Event Binding](guide/event-binding).</div> -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Two-way\n    </td>\n    <td>\n      Event and property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Attribute\n    </td>\n    <td>\n      Attribute\n      (the exception)\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Class\n    </td>\n    <td>\n      <code>class</code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Style\n    </td>\n    <td>\n      <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example>\n    </td>\n  </tr>\n</tbody></table>\n<!-- end of binding syntax -->\n<hr>\n<a id=\"property-binding\"></a>\n<h2 id=\"property-binding-property\">Property binding <code>[property]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-property\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use property binding to <em>set</em> properties of target elements or\ndirective <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorators. For an example\ndemonstrating all of the points in this section, see the\n<live-example name=\"property-binding\">property binding example</live-example>.</p>\n<h3 id=\"one-way-in\">One-way in<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-way-in\"><i class=\"material-icons\">link</i></a></h3>\n<p>Property binding flows a value in one direction,\nfrom a component's property into a target element property.</p>\n<p>You can't use property\nbinding to read or pull values out of target elements. Similarly, you cannot use\nproperty binding to call a method on the target element.\nIf the element raises events, you can listen to them with an <a href=\"guide/template-syntax#event-binding\">event binding</a>.</p>\n<p>If you must read a target element property or call one of its methods,\nsee the API reference for <a href=\"api/core/ViewChild\">ViewChild</a> and\n<a href=\"api/core/ContentChild\">ContentChild</a>.</p>\n<h3 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#examples\"><i class=\"material-icons\">link</i></a></h3>\n<p>The most common property binding sets an element property to a component\nproperty value. An example is\nbinding the <code>src</code> property of an image element to a component's <code>itemImageUrl</code> property:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p>Here's an example of binding to the <code>colSpan</code> property. Notice that it's not <code>colspan</code>,\nwhich is the attribute, spelled with a lowercase <code>s</code>.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"2\">Span 2 columns&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n<p>For more details, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\">MDN HTMLTableCellElment</a> documentation.</p>\n<!-- Add link when Attribute Binding updates are merged:\nFor more about `colSpan` and `colspan`, see (Attribute Binding)[guide/template-syntax]. -->\n<p>Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Disabled Button&#x3C;/button>\n\n</code-example>\n<p>Another is setting a property of a directive:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"<a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a>\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the <a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a> property making this blue&#x3C;/p>\n\n</code-example>\n<p>Yet another is setting the model property of a custom component—a great way\nfor parent and child components to communicate:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<h3 id=\"binding-targets\">Binding targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-targets\"><i class=\"material-icons\">link</i></a></h3>\n<p>An element property between enclosing square brackets identifies the target property.\nThe target property in the following code is the image element's <code>src</code> property.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p>There's also the <code>bind-</code> prefix alternative:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"bind-prefix\" header=\"src/app/app.component.html\">\n&#x3C;img bind-src=\"itemImageUrl\">\n\n</code-example>\n<p>In most cases, the target name is the name of a property, even\nwhen it appears to be the name of an attribute.\nSo in this case, <code>src</code> is the name of the <code>&#x3C;img></code> element property.</p>\n<p>Element properties may be the more common targets,\nbut Angular looks first to see if the name is a property of a known directive,\nas it is in the following example:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"<a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a>\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the <a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a> property making this blue&#x3C;/p>\n\n</code-example>\n<p>Technically, Angular is matching the name to a directive <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>,\none of the property names listed in the directive's <code>inputs</code> array\nor a property decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.\nSuch inputs map to the directive's own properties.</p>\n<p>If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p>\n<div class=\"alert is-helpful\">\n<p>Though the target name is usually the name of a property,\nthere is an automatic attribute-to-property mapping in Angular for\nseveral common attributes. These include <code>class</code>/<code>className</code>, <code>innerHtml</code>/<code>innerHTML</code>, and\n<code>tabindex</code>/<code>tabIndex</code>.</p>\n</div>\n<h3 id=\"avoid-side-effects\">Avoid side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Evaluation of a template expression should have no visible side effects.\nThe expression language itself, or the way you write template expressions,\nhelps to a certain extent;\nyou can't assign a value to anything in a property binding expression\nnor use the increment and decrement operators.</p>\n<p>For example, you could have an expression that invoked a property or method that had\nside effects. The expression could call something like <code>getFoo()</code> where only you\nknow what <code>getFoo()</code> does. If <code>getFoo()</code> changes something\nand you happen to be binding to that something,\nAngular may or may not display the changed value. Angular may detect the\nchange and throw a warning error.\nAs a best practice, stick to properties and to methods that return\nvalues and avoid side effects.</p>\n<h3 id=\"return-the-proper-type\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h3>\n<p>The template expression should evaluate to the type of value\nthat the target property expects.\nReturn a string if the target property expects a string, a number if it\nexpects a number, an object if it expects an object, and so on.</p>\n<p>In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string, which is exactly what you're sending in the property binding:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>You can confirm this by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> type is set to a string:\n<code-example path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\" header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem: string;\n\n</code-example></p>\n<p>As you can see here, the <code>parentItem</code> in <code>AppComponent</code> is a string, which the <code>ItemDetailComponent</code> expects:\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\" header=\"src/app/app.component.ts\">\nparentItem = 'lamp';\n\n</code-example></p>\n<h4 id=\"passing-in-an-object\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h4>\n<p>The previous simple example showed passing in a string. To pass in an object,\nthe syntax and thinking are the same.</p>\n<p>In this scenario, <code>ListItemComponent</code> is nested within <code>AppComponent</code> and the <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> property expects an object.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"pass-object\" header=\"src/app/app.component.html\">\n&#x3C;app-list-item [items]=\"currentItem\">&#x3C;/app-list-item>\n\n</code-example>\n<p>The <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> property is declared in the <code>ListItemComponent</code> with a type of <code>Item</code> and decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"property-binding/src/app/list-item/list-item.component.ts\" region=\"item-input\" header=\"src/app/list-item.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[];\n\n</code-example>\n<p>In this sample app, an <code>Item</code> is an object that has two properties; an <code>id</code> and a <code>name</code>.</p>\n<code-example path=\"property-binding/src/app/item.ts\" region=\"item-class\" header=\"src/app/item.ts\">\nexport class Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p>While a list of items exists in another file, <code>mock-items.ts</code>, you can\nspecify a different item in <code>app.component.ts</code> so that the new item will render:</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\" header=\"src/app.component.ts\">\ncurrentItem = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p>You just have to make sure, in this case, that you're supplying an object because that's the type of <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> and is what the nested component, <code>ListItemComponent</code>, expects.</p>\n<p>In this example, <code>AppComponent</code> specifies a different <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> object\n(<code>currentItem</code>) and passes it to the nested <code>ListItemComponent</code>. <code>ListItemComponent</code> was able to use <code>currentItem</code> because it matches what an <code>Item</code> object is according to <code>item.ts</code>. The <code>item.ts</code> file is where\n<code>ListItemComponent</code> gets its definition of an <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>.</p>\n<h3 id=\"remember-the-brackets\">Remember the brackets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#remember-the-brackets\"><i class=\"material-icons\">link</i></a></h3>\n<p>The brackets, <code>[]</code>, tell Angular to evaluate the template expression.\nIf you omit the brackets, Angular treats the string as a constant\nand <em>initializes the target property</em> with that string:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"no-evaluation\" header=\"src/app.component.html\">\n&#x3C;app-item-detail childItem=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Omitting the brackets will render the string\n<code>parentItem</code>, not the value of <code>parentItem</code>.</p>\n<h3 id=\"one-time-string-initialization\">One-time string initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-time-string-initialization\"><i class=\"material-icons\">link</i></a></h3>\n<p>You <em>should</em> omit the brackets when all of the following are true:</p>\n<ul>\n<li>The target property accepts a string value.</li>\n<li>The string is a fixed value that you can put directly into the template.</li>\n<li>This initial value never changes.</li>\n</ul>\n<p>You routinely initialize attributes this way in standard HTML, and it works\njust as well for directive and component property initialization.\nThe following example initializes the <code>prefix</code> property of the <code>StringInitComponent</code> to a fixed string,\nnot a template expression. Angular sets it and forgets about it.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"string-init\" header=\"src/app/app.component.html\">\n&#x3C;app-string-init prefix=\"This is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> one-time initialized string.\">&#x3C;/app-string-init>\n\n</code-example>\n<p>The <code>[<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]</code> binding, on the other hand, remains a live binding to the component's <code>currentItem</code> property.</p>\n<h3 id=\"property-binding-vs-interpolation\">Property binding vs. interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-vs-interpolation\"><i class=\"material-icons\">link</i></a></h3>\n<p>You often have a choice between interpolation and property binding.\nThe following binding pairs do the same thing:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding-interpolation\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;img src=\"{{itemImageUrl}}\"> is the &#x3C;i>interpolated&#x3C;/i> image.&#x3C;/p>\n&#x3C;p>&#x3C;img [src]=\"itemImageUrl\"> is the &#x3C;i>property bound&#x3C;/i> image.&#x3C;/p>\n\n&#x3C;p>&#x3C;span>\"{{interpolationTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"propertyTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation is a convenient alternative to property binding in\nmany cases. When rendering data values as strings, there is no\ntechnical reason to prefer one form to the other, though readability\ntends to favor interpolation. However, <em>when setting an element\nproperty to a non-string data value, you must use property binding</em>.</p>\n<h3 id=\"content-security\">Content security<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#content-security\"><i class=\"material-icons\">link</i></a></h3>\n<p>Imagine the following malicious content.</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"malicious-content\" header=\"src/app/app.component.ts\">\nevilTitle = '<a href=\"\" class=\"code-anchor\">Template</a> &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script> Syntax';\n\n</code-example>\n<p>In the component template, the content might be used with interpolation:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-interpolated\" header=\"src/app/app.component.ts\">\n&#x3C;p>&#x3C;span>\"{{evilTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> evil title.&#x3C;/span>&#x3C;/p>\n\n</code-example>\n<p>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case,\nthe HTML displays as is, and the Javascript does not execute. Angular <strong>does not</strong>\nallow HTML with script tags to leak into the browser, neither with interpolation\nnor property binding.</p>\n<p>In the following example, however, Angular <a href=\"guide/security#sanitization-and-security-contexts\">sanitizes</a>\nthe values before displaying them.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-content\" header=\"src/app/app.component.html\">\n &#x3C;!--\n Angular generates <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> warning for the following line as it sanitizes them\n WARNING: sanitizing <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a> stripped some content (see http://g.co/ng/security#xss).\n-->\n &#x3C;p>\"&#x3C;span [innerHTML]=\"evilTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> evil title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation handles the <code>&#x3C;script></code> tags differently than\nproperty binding but both approaches render the\ncontent harmlessly. The following is the browser output\nof the <code>evilTitle</code> examples.</p>\n<code-example language=\"bash\">\n\"<a href=\"\" class=\"code-anchor\">Template</a> <script>alert(\"evil never sleeps\")</script> Syntax\" is the interpolated evil title.\n\"Template alert(\"evil never sleeps\")Syntax\" is the property bound evil title.\n</code-example>\n<hr>\n<a id=\"other-bindings\"></a>\n<h2 id=\"attribute-class-and-style-bindings\">Attribute, class, and style bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-class-and-style-bindings\"><i class=\"material-icons\">link</i></a></h2>\n<p>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</p>\n<p>To see attribute, class, and style bindings in a functioning app, see the <live-example name=\"attribute-binding\"></live-example> especially for this section.</p>\n<h3 id=\"attribute-binding\">Attribute binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Set the value of an attribute directly with an <strong>attribute binding</strong>. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</p>\n<p>Usually, setting an element property with a <a href=\"guide/template-syntax#property-binding\">property binding</a>\nis preferable to setting the attribute with a string. However, sometimes\nthere is no element property to bind, so attribute binding is the solution.</p>\n<p>Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</p>\n<p>Attribute binding syntax resembles property binding, but\ninstead of an element property between brackets, start with the prefix <code>attr</code>,\nfollowed by a dot (<code>.</code>), and the name of the attribute.\nYou then set the attribute value, using an expression that resolves to a string,\nor remove the attribute when the expression resolves to <code>null</code>.</p>\n<p>One of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&#x3C;!-- create and set an aria attribute for assistive technology -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<h4 id=\"colspan-and-colspan\"><code>colspan</code> and <code>colSpan</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#colspan-and-colspan\"><i class=\"material-icons\">link</i></a></h4>\n<p>Notice the difference between the <code>colspan</code> attribute and the <code>colSpan</code> property.</p>\n<p>If you wrote something like this:</p>\n<code-example language=\"html\">\n  &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n</code-example>\n<p>You'd get this error:</p>\n<code-example language=\"bash\">\n  <a href=\"\" class=\"code-anchor\">Template</a> parse errors:\n  Can't bind to 'colspan' since it isn't <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> known <a href=\"\" class=\"code-anchor\">native</a> property\n</code-example>\n<p>As the message says, the <code>&#x3C;td></code> element does not have a <code>colspan</code> property. This is true\nbecause <code>colspan</code> is an attribute—<code>colSpan</code>, with a capital <code>S</code>, is the\ncorresponding property. Interpolation and property binding can set only <em>properties</em>, not attributes.</p>\n<p>Instead, you'd use property binding and write it like this:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"1 + 1\">Three-Four&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n</div>\n<hr>\n<h3 id=\"class-binding\">Class binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#class-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add and remove CSS class names from an element's <code>class</code> attribute with\na <strong>class binding</strong>.</p>\n<p>Here's how to set the attribute without binding in plain HTML:</p>\n<code-example language=\"html\">\n&#x3C;!-- standard class attribute setting -->\n&#x3C;div class=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> clearance special\">Item clearance special&#x3C;/div>\n</code-example>\n<p>Class binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix <code>class</code>,\noptionally followed by a dot (<code>.</code>) and the name of a CSS class: <code>[class.class-name]</code>.</p>\n<p>You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.</p>\n<p> <code-example path=\"attribute-binding/src/app/app.component.html\" region=\"class-override\" header=\"src/app/app.component.html\">\n&#x3C;h3>Overwrite all existing <a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a> with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new class:&#x3C;/h3>\n&#x3C;div class=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> clearance special\" [attr.class]=\"resetClasses\">Reset all <a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a> at once&#x3C;/div>\n\n</code-example></p>\n<p>You can also add append a class to an element without overwriting the classes already on the element:</p>\n<p> <code-example path=\"attribute-binding/src/app/app.component.html\" region=\"add-class\" header=\"src/app/app.component.html\">\n&#x3C;h3>Add <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> class:&#x3C;/h3>\n&#x3C;div class=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> clearance special\" [class.item-clearance]=\"itemClearance\">Add another class&#x3C;/div>\n\n</code-example></p>\n<p>Finally, you can bind to a specific class name.\nAngular adds the class when the template expression evaluates to truthy.\nIt removes the class when the expression is falsy.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"is-special\" header=\"src/app/app.component.html\">\n&#x3C;h3>toggle the \"special\" class on/off with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> property:&#x3C;/h3>\n&#x3C;div [class.special]=\"isSpecial\">The class binding is special.&#x3C;/div>\n\n&#x3C;h3>binding to class.special <a href=\"api/platform-browser/HammerGestureConfig#overrides\" class=\"code-anchor\">overrides</a> the class attribute:&#x3C;/h3>\n&#x3C;div class=\"special\" [class.special]=\"!isSpecial\">This one is not so special.&#x3C;/div>\n\n&#x3C;h3>Using the bind- syntax:&#x3C;/h3>\n&#x3C;div bind-class.special=\"isSpecial\">This class binding is special too.&#x3C;/div>\n\n</code-example>\n<p>While this technique is suitable for toggling a single class name,\nconsider the <a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a> directive when\nmanaging multiple class names at the same time.</p>\n<hr>\n<h3 id=\"style-binding\">Style binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#style-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can set inline styles with a <strong>style binding</strong>.</p>\n<p>Style binding syntax resembles property binding.\nInstead of an element property between brackets, start with the prefix <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code>,\nfollowed by a dot (<code>.</code>) and the name of a CSS style property: <code>[style.style-property]</code>.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-binding\" header=\"src/app/app.component.html\">\n&#x3C;button [style.color]=\"isSpecial ? 'red': 'green'\">Red&#x3C;/button>\n&#x3C;button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save&#x3C;/button>\n\n</code-example>\n<p>Some style binding styles have a unit extension.\nThe following example conditionally sets the font size in  “em” and “%” units .</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-binding-condition\" header=\"src/app/app.component.html\">\n&#x3C;button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big&#x3C;/button>\n&#x3C;button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small&#x3C;/button>\n\n</code-example>\n<p>This technique is suitable for setting a single style, but consider\nthe <a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a> directive when setting several inline styles at the same time.</p>\n<div class=\"alert is-helpful\">\n<p>Note that a <em>style property</em> name can be written in either\n<a href=\"guide/glossary#dash-case\">dash-case</a>, as shown above, or\n<a href=\"guide/glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p>\n</div>\n<hr>\n<a id=\"event-binding\"></a>\n<h2 id=\"event-binding-event\">Event binding <code>(event)</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-binding-event\"><i class=\"material-icons\">link</i></a></h2>\n<p>Event binding allows you to listen for certain events such as\nkeystrokes, mouse movements, clicks, and touches. For an example\ndemonstrating all of the points in this section, see the <live-example name=\"event-binding\">event binding example</live-example>.</p>\n<p>Angular event binding syntax consists of a <strong>target event</strong> name\nwithin parentheses on the left of an equal sign, and a quoted\ntemplate statement on the right.\nThe following event binding listens for the button's click events, calling\nthe component's <code>onSave()</code> method whenever a click occurs:</p>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/syntax-diagram.svg\" alt=\"Syntax diagram\" width=\"600\" height=\"125\">\n</figure>\n<h3 id=\"target-event\">Target event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#target-event\"><i class=\"material-icons\">link</i></a></h3>\n<p>As above, the target is the button's click event.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-1\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n\n</code-example>\n<p>Alternatively, use the <code>on-</code> prefix, known as the canonical form:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-2\" header=\"src/app/app.component.html\">\n&#x3C;button on-click=\"onSave($event)\">on-click Save&#x3C;/button>\n\n</code-example>\n<p>Element events may be the more common targets, but Angular looks first to see if the name matches an event property\nof a known directive, as it does in the following example:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"custom-directive\" header=\"src/app/app.component.html\">\n&#x3C;h4>myClick is an event on the custom ClickDirective:&#x3C;/h4>\n&#x3C;button (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/button>\n{{clickMessage}}\n\n</code-example>\n<p>If the name fails to match an element event or an output property of a known directive,\nAngular reports an “unknown directive” error.</p>\n<h3 id=\"event-and-event-handling-statements\"><em>$event</em> and event handling statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-and-event-handling-statements\"><i class=\"material-icons\">link</i></a></h3>\n<p>In an event binding, Angular sets up an event handler for the target event.</p>\n<p>When the event is raised, the handler executes the template statement.\nThe template statement typically involves a receiver, which performs an action\nin response to the event, such as storing a value from the HTML control\ninto a model.</p>\n<p>The binding conveys information about the event. This information can include data values such as an event object, string, or number named <code>$event</code>.</p>\n<p>The target event determines the shape of the <code>$event</code> object.\nIf the target event is a native DOM element event, then <code>$event</code> is a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event object</a>,\nwith properties such as <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> and <code>target.value</code>.</p>\n<p>Consider this example:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\" header=\"src/app/app.component.html\">\n&#x3C;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=$event.target.value\" >\nwithout <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>\n\n</code-example>\n<p>This code sets the <code>&#x3C;input></code> <code>value</code> property by binding to the <code>name</code> property.\nTo listen for changes to the value, the code binds to the <code>input</code>\nevent of the <code>&#x3C;input></code> element.\nWhen the user makes changes, the <code>input</code> event is raised, and the binding executes\nthe statement within a context that includes the DOM event object, <code>$event</code>.</p>\n<p>To update the <code>name</code> property, the changed text is retrieved by following the path <code>$event.target.value</code>.</p>\n<p>If the event belongs to a directive—recall that components\nare directives—<code>$event</code> has whatever shape the directive produces.</p>\n<h3 id=\"custom-events-with-eventemitter\">Custom events with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a></h3>\n<p>Directives typically raise custom events with an Angular <a href=\"api/core/EventEmitter\">EventEmitter</a>.\nThe directive creates an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> and exposes it as a property.\nThe directive calls <code>EventEmitter.emit(payload)</code> to fire an event, passing in a message payload, which can be anything.\nParent directives listen for the event by binding to this property and accessing the payload through the <code>$event</code> object.</p>\n<p>Consider an <code>ItemDetailComponent</code> that presents item information and responds to user actions.\nAlthough the <code>ItemDetailComponent</code> has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</p>\n<p>Here are the pertinent excerpts from that <code>ItemDetailComponent</code>:</p>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.html\" header=\"src/app/item-detail/item-detail.component.html (template)\" region=\"line-through\">\n&#x3C;img src=\"{{itemImageUrl}}\" [style.display]=\"displayNone\">\n&#x3C;span [style.text-decoration]=\"lineThrough\">{{ item.name }}\n&#x3C;/span>\n&#x3C;button (click)=\"delete()\">Delete&#x3C;/button>\n\n</code-example>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.ts\" header=\"src/app/item-detail/item-detail.component.ts (deleteRequest)\" region=\"deleteRequest\">\n// This component makes <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/common/http/testing/TestRequest#request\" class=\"code-anchor\">request</a> but it can't actually delete <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero.\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Item>();\n\ndelete() {\n  this.deleteRequest.emit(this.item);\n  this.displayNone = this.displayNone ? '' : 'none';\n  this.lineThrough = this.lineThrough ? '' : 'line-through';\n}\n\n</code-example>\n<p>The component defines a <code>deleteRequest</code> property that returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.\nWhen the user clicks <em>delete</em>, the component invokes the <code>delete()</code> method,\ntelling the <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> to emit an <code>Item</code> object.</p>\n<p>Now imagine a hosting parent component that binds to the <code>deleteRequest</code> event\nof the <code>ItemDetailComponent</code>.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" header=\"src/app/app.component.html (event-binding-to-component)\" region=\"event-binding-to-component\">\n&#x3C;app-item-detail (deleteRequest)=\"deleteItem($event)\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>When the <code>deleteRequest</code> event fires, Angular calls the parent component's\n<code>deleteItem()</code> method, passing the <em>item-to-delete</em> (emitted by <code>ItemDetail</code>)\nin the <code>$event</code> variable.</p>\n<h3 id=\"template-statements-have-side-effects\">Template statements have side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements-have-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>Though <a href=\"guide/template-syntax#template-expressions\">template expressions</a> shouldn't have <a href=\"guide/template-syntax#avoid-side-effects\">side effects</a>, template\nstatements usually do. The <code>deleteItem()</code> method does have\na side effect: it deletes an item.</p>\n<p>Deleting an item updates the model, and depending on your code, triggers\nother changes including queries and saving to a remote server.\nThese changes propagate through the system and ultimately display in this and other views.</p>\n<hr>\n<a id=\"two-way\"></a>\n<h2 id=\"two-way-binding-\">Two-way binding <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-\"><i class=\"material-icons\">link</i></a></h2>\n<p>Two-way binding gives your app a way to share data between a component class and\nits template.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"two-way-binding\">two-way binding example</live-example>.</p>\n<h3 id=\"basics-of-two-way-binding\">Basics of two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#basics-of-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Two-way binding does two things:</p>\n<ol>\n<li>Sets a specific element property.</li>\n<li>Listens for an element change event.</li>\n</ol>\n<p>Angular offers a special <em>two-way data binding</em> syntax for this purpose, <code>[()]</code>.\nThe <code>[()]</code> syntax combines the brackets\nof property binding, <code>[]</code>, with the parentheses of event binding, <code>()</code>.</p>\n<div class=\"callout is-important\">\n<header>\n  [( )] = banana in a box\n</header>\n<p>Visualize a <em>banana in a box</em> to remember that the parentheses go <em>inside</em> the brackets.</p>\n</div>\n<p>The <code>[()]</code> syntax is easy to demonstrate when the element has a settable\nproperty called <code>x</code> and a corresponding event named <code>xChange</code>.\nHere's a <code>SizerComponent</code> that fits this pattern.\nIt has a <code>size</code> value property and a companion <code>sizeChange</code> event:</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sizer',\n  templateUrl: './sizer.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./sizer.component.css']\n})\nexport class SizerComponent {\n\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n<p>The initial <code>size</code> is an input value from a property binding.\nClicking the buttons increases or decreases the <code>size</code>, within\nmin/max value constraints,\nand then raises, or emits, the <code>sizeChange</code> event with the adjusted size.</p>\n<p>Here's an example in which the <code>AppComponent.fontSizePx</code> is two-way bound to the <code>SizerComponent</code>:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p>The <code>AppComponent.fontSizePx</code> establishes the initial <code>SizerComponent.size</code> value.</p>\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p>Clicking the buttons updates the <code>AppComponent.fontSizePx</code> via the two-way binding.\nThe revised <code>AppComponent.fontSizePx</code> value flows through to the <em>style</em> binding,\nmaking the displayed text bigger or smaller.</p>\n<p>The two-way binding syntax is really just syntactic sugar for a <em>property</em> binding and an <em>event</em> binding.\nAngular desugars the <code>SizerComponent</code> binding into this:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p>The <code>$event</code> variable contains the payload of the <code>SizerComponent.sizeChange</code> event.\nAngular assigns the <code>$event</code> value to the <code>AppComponent.fontSizePx</code> when the user clicks the buttons.</p>\n<h3 id=\"two-way-binding-in-forms\">Two-way binding in forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-in-forms\"><i class=\"material-icons\">link</i></a></h3>\n<p>The two-way binding syntax is a great convenience compared to\nseparate property and event bindings. It would be convenient to\nuse two-way binding with HTML form elements like <code>&#x3C;input></code> and\n<code>&#x3C;select></code>. However, no native HTML element follows the <code>x</code>\nvalue and <code>xChange</code> event pattern.</p>\n<p>For more on how to use two-way binding in forms, see\nAngular <a href=\"guide/template-syntax#ngModel\">NgModel</a>.</p>\n<hr>\n<a id=\"directives\"></a>\n<h2 id=\"built-in-directives\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular offers two kinds of built-in directives: attribute\ndirectives and structural directives. This segment reviews some of the most common built-in directives,\nclassified as either <a href=\"guide/template-syntax#attribute-directives\"><em>attribute</em> directives</a> or <a href=\"guide/template-syntax#structural-directives\"><em>structural</em> directives</a> and has its own <live-example name=\"built-in-directives\">built-in directives example</live-example>.</p>\n<p>For more detail, including how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<hr>\n<a id=\"attribute-directives\"></a>\n<h3 id=\"built-in-attribute-directives\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h3>\n<p>Attribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</p>\n<p>Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a>—adds and removes a set of CSS classes.</li>\n<li><a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a>—adds and removes a set of HTML styles.</li>\n<li><a href=\"guide/template-syntax#ngModel\"><code>NgModel</code></a>—adds two-way data binding to an HTML form element.</li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h3 id=\"ngclass\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add or remove several CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\" header=\"src/app/app.component.html\">\n&#x3C;!-- toggle the \"special\" class on/off with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> property -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>To add or remove a <em>single</em> class, use <a href=\"guide/template-syntax#class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n</div>\n<p>Consider a <code>setCurrentClasses()</code> component method that sets a component property,\n<code>currentClasses</code>, with an object that adds or removes three classes based on the\n<code>true</code>/<code>false</code> state of three other component properties. Each key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\" header=\"src/app/app.component.ts\">\ncurrentClasses: {};\nsetCurrentClasses() {\n  // CSS <a href=\"api/core/DebugElement#classes\" class=\"code-anchor\">classes</a>: added/removed per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a>\n  this.currentClasses =  {\n    'saveable': this.canSave,\n    'modified': !this.isUnchanged,\n    'special':  this.isSpecial\n  };\n}\n\n</code-example>\n<p>Adding an <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> sets the element's classes accordingly:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember that in this situation you'd call <code>setCurrentClasses()</code>,\nboth initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngStyle\"></a>\n<h3 id=\"ngstyle\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set many inline styles simultaneously and dynamically, based on the state of the component.</p>\n<h4 id=\"without-ngstyle\">Without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#without-ngstyle\"><i class=\"material-icons\">link</i></a></h4>\n<p>For context, consider setting a <em>single</em> style value with <a href=\"guide/template-syntax#style-binding\">style binding</a>, without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-ng-style\" header=\"src/app/app.component.html\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p>However, to set <em>many</em> inline styles at the same time, use the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> directive.</p>\n<p>The following is a <code>setCurrentStyles()</code> method that sets a component\nproperty, <code>currentStyles</code>, with an object that defines three styles,\nbased on the state of three other component properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\" header=\"src/app/app.component.ts\">\ncurrentStyles: {};\nsetCurrentStyles() {\n  // CSS styles: set per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a>\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n<p>Adding an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code> sets the element's styles accordingly:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngModel\"></a>\n<h3 id=\"ngmodel-two-way-binding\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>: Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive allows you to display a data property and\nupdate that property when the user makes changes. Here's an example:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" header=\"src/app/app.component.html (NgModel example)\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<h4 id=\"import-formsmodule-to-use-ngmodel\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h4>\n<p>Before using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive in a two-way data binding,\nyou must import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and add it to the NgModule's <code>imports</code> list.\nLearn more about the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> in <a href=\"guide/forms#ngModel\">Forms</a>.</p>\n<p>Remember to import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to make <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> available as follows:</p>\n<code-example path=\"built-in-directives/src/app/app.module.ts\" header=\"src/app/app.module.ts (FormsModule import)\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p>You could achieve the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-NgModel\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"without\">without <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>:&#x3C;/label>\n&#x3C;input [value]=\"currentItem.name\" (input)=\"currentItem.name=$event.target.value\" id=\"without\">\n\n</code-example>\n<p>To streamline the syntax, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive hides the details behind its own <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input and <code>ngModelChange</code> output properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModelChange\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-change\">(ngModelChange)=\"...name=$event\":&#x3C;/label>\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"currentItem.name=$event\" id=\"example-change\">\n\n</code-example>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> data property sets the element's value property and the <code>ngModelChange</code> event property\nlistens for changes to the element's value.</p>\n<h4 id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h4>\n<p>The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\">Forms</a> guide shows how to bind to them.</p>\n<p>You can't apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form native element or a\nthird-party custom component until you write a suitable value accessor. For more information, see\nthe API documentation on <a href=\"https://angular.io/api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n<p>You don't need a value accessor for an Angular component that\nyou write because you can name the value and event properties\nto suit Angular's basic <a href=\"guide/template-syntax#two-way\">two-way binding syntax</a>\nand skip <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> altogether.\nThe <code>sizer</code> in the\n<a href=\"guide/template-syntax#two-way\">Two-way Binding</a> section is an example of this technique.</p>\n<p>Separate <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> bindings are an improvement over binding to the\nelement's native properties, but you can streamline the binding with a\nsingle declaration using the <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p>This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more, you can write the expanded form;\nfor example, the following changes the <code>&#x3C;input></code> value to uppercase:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\" header=\"src/app/app.component.html\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<p>Here are all variations in action, including the uppercase version:</p>\n<figure>\n  <img src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"540\" height=\"264\">\n</figure>\n<hr>\n<a id=\"structural-directives\"></a>\n<h2 id=\"built-in-structural-directives\">Built-in <em>structural</em> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating\nthe host elements to which they are attached.</p>\n<p>This section is an introduction to the common built-in structural directives:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngIf\"><code>NgIf</code></a>—conditionally creates or destroys subviews from the template.</li>\n<li><a href=\"guide/template-syntax#ngFor\"><code>NgFor</code></a>—repeat a node for each item in a list.</li>\n<li><a href=\"guide/template-syntax#ngSwitch\"><code>NgSwitch</code></a>—a set of directives that switch among alternative views.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\">Structural Directives</a> guide,\nwhich explains the following:</p>\n<ul>\n<li>Why you\n<a href=\"guide/structural-directives#the-asterisk--prefix\">prefix the directive name with an asterisk (*)</a>.</li>\n<li>Using <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</li>\n<li>How to write your own structural directive.</li>\n<li>That you can only apply <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">one structural directive</a> to an element.</li>\n</ul>\n</div>\n<hr>\n<a id=\"ngIf\"></a>\n<h3 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngif\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can add or remove an element from the DOM by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to\na host element.\nBind the directive to a condition expression like <code><a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a></code> in this example.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"<a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a>\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n</div>\n<p>When the <code><a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a></code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the\n<code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code>\nfrom the DOM, destroying that component and all of its sub-components.</p>\n<h4 id=\"showhide-vs-ngif\">Show/hide vs. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h4>\n<p>Hiding an element is different from removing it with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\nFor comparison, the following example shows how to control\nthe visibility of an element with a\n<a href=\"guide/template-syntax#class-binding\">class</a> or <a href=\"guide/template-syntax#style-binding\">style</a> binding.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-3\" header=\"src/app/app.component.html\">\n&#x3C;!-- isSpecial is true -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;p>ItemDetail is in the DOM but hidden&#x3C;/p>\n&#x3C;app-item-detail [class.hidden]=\"isSpecial\">&#x3C;/app-item-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n\n</code-example>\n<p>When you hide an element, that element and all of its descendants remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance\nunnecessarily.</p>\n<p><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> works differently. When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendants from the DOM.\nIt destroys their components, freeing up resources, which\nresults in a better user experience.</p>\n<p>If you are hiding large component trees, consider <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> as a more\nefficient alternative to showing/hiding.</p>\n<div class=\"alert is-helpful\">\n<p>For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgIf#ngIfElse\" class=\"code-anchor\">ngIfElse</a></code>, see the <a href=\"api/common/NgIf\">API documentation about NgIf</a>.</p>\n</div>\n<h4 id=\"guard-against-null\">Guard against null<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#guard-against-null\"><i class=\"material-icons\">link</i></a></h4>\n<p>Another advantage of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is that you can use it to guard against null. Show/hide\nis best suited for very simple use cases, so when you need a guard, opt instead for <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. Angular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n<p>The following shows <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentCustomer</code> name appears only when there is a <code>currentCustomer</code>.\nThe <code>nullCustomer</code> will not be displayed as long as it is <code>null</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>See also the\n<a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?.)\">safe navigation operator</a> below.</p>\n</div>\n<hr>\n<a id=\"ngFor\"></a>\n<h3 id=\"ngfor\"><code>NgFor</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<p><code>NgFor</code> is a repeater directive—a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed\nand then you tell Angular to use that block as a template for rendering each item in the list.\nThe text assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is the instruction that guides the repeater process.</p>\n<p>The following example shows <code>NgFor</code> applied to a simple <code>&#x3C;div></code>. (Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.)</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<p>You can also apply an <code>NgFor</code> to a component element, as in the following example.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<a id=\"microsyntax\"></a>\n<div class=\"callout is-critical\">\n<header>*ngFor microsyntax</header>\n<p>The string assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is not a <a href=\"guide/template-syntax#template-expressions\">template expression</a>. Rather,\nit's a <em>microsyntax</em>—a little language of its own that Angular interprets.\nThe string <code>\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\"</code> means:</p>\n<blockquote>\n<p><em>Take each item in the <code>items</code> array, store it in the local <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n</blockquote>\n<p>Angular translates this instruction into an <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>\nin the list.\nFor more information about microsyntax, see the <a href=\"guide/structural-directives#microsyntax\">Structural Directives</a> guide.</p>\n</div>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h4 id=\"template-input-variables\">Template input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-input-variables\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>let</code> keyword before <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> creates a template input variable called <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>.\nThe <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive iterates over the <code>items</code> array returned by the parent component's <code>items</code> property\nand sets <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> to the current item from the array during each iteration.</p>\n<p>Reference <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> host element\nas well as within its descendants to access the item's properties.\nThe following example references <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> first in an interpolation\nand then passes in a binding to the <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\" header=\"src/app/app.component.html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n  &#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>For more information about template input variables, see\n<a href=\"guide/structural-directives#template-input-variable\">Structural Directives</a>.</p>\n<h4 id=\"ngfor-with-index\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> with <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>index</code> property of the <code>NgFor</code> directive context\nreturns the zero-based index of the item in each iteration.\nYou can capture the <code>index</code> in a template input variable and use it in the template.</p>\n<p>The next example captures the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code>NgFor</code> is implemented by the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive. Read more about the other <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> context values such as <code>last</code>, <code><a href=\"api/common/NgForOfContext#even\" class=\"code-anchor\">even</a></code>,\nand <code><a href=\"api/common/NgForOfContext#odd\" class=\"code-anchor\">odd</a></code> in the <a href=\"api/common/NgForOf\">NgForOf API reference</a>.</p>\n</div>\n<a id=\"trackBy\"></a>\n<h4 id=\"ngfor-with-trackby\">*ngFor with <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h4>\n<p>If you use <code>NgFor</code> with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</p>\n<p>You can make this more efficient with <code>trackBy</code>.\nAdd a method to the component that returns the value <code>NgFor</code> should track.\nIn this case, that value is the hero's <code>id</code>. If the <code>id</code> has already been rendered,\nAngular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\" header=\"src/app/app.component.ts\">\ntrackByItems(index: number, <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: Item): number { return item.id; }\n\n</code-example>\n<p>In the microsyntax expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n<p>Here is an illustration of the <code>trackBy</code> effect.\n\"Reset items\" creates new items with the same <code>item.id</code>s.\n\"Change ids\" creates new items with new <code>item.id</code>s.</p>\n<ul>\n<li>With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</li>\n<li>With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" alt=\"Animation of trackBy\" width=\"492\" height=\"442\">\n</figure>\n<div class=\"alert is-helpful\">\n<p>Built-in directives use only public APIs; that is,\nthey do not have special access to any private APIs that other directives can't access.</p>\n</div>\n<hr>\n<a id=\"ngSwitch\"></a>\n<h2 id=\"the-ngswitch-directives\">The <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgSwitch is like the JavaScript <code>switch</code> statement.\nIt displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n<!-- API Flagged -->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> as in the following example.</p>\n<p> <code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example></p>\n<figure>\n  <img src=\"generated/images/guide/built-in-directives/ngswitch.gif\" alt=\"Animation of NgSwitch\" width=\"370\" height=\"256\">\n</figure>\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is the controller directive. Bind it to an expression that returns\nthe <em>switch value</em>, such as <code>feature</code>. Though the <code>feature</code> value in this\nexample is a string, the switch value can be of any type.</p>\n<p><strong>Bind to <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>. You'll get an error if you try to set <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> because\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is an <em>attribute</em> directive, not a <em>structural</em> directive.\nRather than touching the DOM directly, it changes the behavior of its companion directives.</p>\n<p><strong>Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>.\nThe <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> directives are <em>structural</em> directives\nbecause they add or remove elements from the DOM.</p>\n<ul>\n<li>\n<p><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> adds its element to the DOM when its bound value equals the switch value and removes\nits bound value when it doesn't equal the switch value.</p>\n</li>\n<li>\n<p><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</p>\n</li>\n</ul>\n<p>The switch directives are particularly useful for adding and removing <em>component elements</em>.\nThis example switches among four <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> components defined in the <code>item-switch.components.ts</code> file.\nEach component has an <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> <a href=\"guide/template-syntax#inputs-outputs\" title=\"Input property\">input property</a>\nwhich is bound to the <code>currentItem</code> of the parent component.</p>\n<p>Switch directives work as well with native elements and web components too.\nFor example, you could replace the <code>&#x3C;app-best-item></code> switch case with the following.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n<hr>\n<a id=\"template-reference-variable\"></a>\n<a id=\"template-reference-variables--var-\"></a>\n<a id=\"ref-vars\"></a>\n<a id=\"ref-var\"></a>\n<h2 id=\"template-reference-variables-var\">Template reference variables (<code>#var</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variables-var\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <strong>template reference variable</strong> is often a reference to a DOM element within a template.\nIt can also refer to a directive (which contains a component), an element, <a href=\"api/core/TemplateRef\">TemplateRef</a>, or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"template-reference-variables\">template reference variables example</live-example>.</p>\n<p>Use the hash symbol (#) to declare a reference variable.\nThe following reference variable, <code>#phone</code>, declares a <code>phone</code> variable on an <code>&#x3C;input></code> element.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>You can refer to a template reference variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h3 class=\"no-toc\" id=\"how-a-reference-variable-gets-its-value\">How a reference variable gets its value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-a-reference-variable-gets-its-value\"><i class=\"material-icons\">link</i></a></h3>\n<p>In most cases, Angular sets the reference variable's value to the element on which it is declared.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n<p>The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive can change that behavior and set the value to something else. In the following example, the template reference variable, <code>itemForm</code>, appears three times separated\nby HTML.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\"\n    >Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p>The reference value of itemForm, without the ngForm attribute value, would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>.\nThere is, however, a difference between a Component and a Directive in that a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>will be referenced without specifying the attribute value, and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> will not\nchange the implicit reference (that is, the element).</p>\n<p>However, with <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>, <code>itemForm</code> is a reference to the <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a>\ndirective with the ability to track the value and validity of every control in the form.</p>\n<p>The native <code>&#x3C;form></code> element doesn't have a <code>form</code> property, but the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive does, which allows disabling the submit button\nif the <code>itemForm.form.valid</code> is invalid and passing the entire form control tree\nto the parent component's <code>onSubmit()</code> method.</p>\n<h3 class=\"no-toc\" id=\"template-reference-variable-considerations\">Template reference variable considerations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variable-considerations\"><i class=\"material-icons\">link</i></a></h3>\n<p>A template <em>reference</em> variable (<code>#phone</code>) is not the same as a template <em>input</em> variable (<code>let phone</code>) such as in an <a href=\"guide/template-syntax#template-input-variable\"><code>*ngFor</code></a>.\nSee <a href=\"guide/structural-directives#template-input-variable\"><em>Structural Directives</em></a> for more information.</p>\n<p>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</p>\n<h4 id=\"alternative-syntax\">Alternative syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#alternative-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can use the <code>ref-</code> prefix alternative to <code>#</code>.\nThis example declares the <code>fax</code> variable as <code>ref-fax</code> instead of <code>#fax</code>.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-fax\" header=\"src/app/app.component.html\">\n&#x3C;input ref-fax placeholder=\"fax number\" />\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n<hr>\n<a id=\"inputs-outputs\"></a>\n<h2 id=\"input-and-output-properties\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allow Angular to share data between the parent context\nand child directives or components. An <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property is writable\nwhile an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property is observable.</p>\n<p>Consider this example of a child/parent relationship:</p>\n<code-example language=\"html\">\n&#x3C;parent-component>\n  &#x3C;child-component>&#x3C;/child-component>\n&#x3C;/parent-component>\n</code-example>\n<p>Here, the <code>&#x3C;child-component></code> selector, or child directive, is embedded\nwithin a <code>&#x3C;parent-component></code>, which serves as the child's context.</p>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> act as\nthe API, or application programming interface, of the child\ncomponent in that they allow the child to\ncommunicate with the parent. Think of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> like ports\nor doorways—<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> is the doorway into the component allowing data\nto flow in while <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is the doorway out of the component, allowing the\nchild component to send data out.</p>\n<p>This section about <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> has its own <live-example name=\"inputs-outputs\"></live-example>. The following subsections highlight\nkey points in the sample app.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"input-and-output-are-independent\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> are independent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-are-independent\"><i class=\"material-icons\">link</i></a></h4>\n<p>Though <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> often appear together in apps, you can use\nthem separately. If the nested\ncomponent is such that it only needs to send data to its parent, you wouldn't\nneed an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, only an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. The reverse is also true in that if the\nchild only needs to receive data from the parent, you'd only need <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.</p>\n</div>\n<a id=\"input\"></a>\n<h2 id=\"how-to-use-input\">How to use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-input\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive to let Angular know\nthat a property in that component can receive its value from its parent component.\nIt helps to remember that the data flow is from the perspective of the\nchild component. So an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> allows data to be input <em>into</em> the\nchild component from the parent component.</p>\n<figure>\n  <img src=\"generated/images/guide/inputs-outputs/input.svg\" alt=\"Input data flow diagram\" width=\"671\" height=\"346\">\n</figure>\n<p>To illustrate the use of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<h3 id=\"in-the-child\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\" header=\"src/app/item-detail/item-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // <a href=\"\" class=\"code-anchor\">First</a>, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: string; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p>In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has\na type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as\n<code>number</code>, <code>string</code>, <code>boolean</code>, or <code>object</code>. The value for <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> will come from the parent component, which the next section covers.</p>\n<p>Next, in the child component template, add the following:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\" header=\"src/app/item-detail/item-detail.component.html\">\n&#x3C;p>\n  Today's <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>}}\n&#x3C;/p>\n\n</code-example>\n<h3 id=\"in-the-parent\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent\"><i class=\"material-icons\">link</i></a></h3>\n<p>The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n<p>First, use the child's selector, here <code>&#x3C;app-item-detail></code>, as a directive within the\nparent component template. Then, use <a href=\"guide/template-syntax#property-binding\">property binding</a>\nto bind the property in the child to the property of the parent.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Next, in the parent component class, <code>app.component.ts</code>, designate a value for <code>currentItem</code>:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n<p>With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> renders as <code>Television</code>.</p>\n<p>The following diagram shows this structure:</p>\n<figure>\n  <img src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" alt=\"Property binding diagram\" width=\"502\" height=\"304\">\n</figure>\n<p>The target in the square brackets, <code>[]</code>, is the property you decorate\nwith <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component. The binding source, the part\nto the right of the equal sign, is the data that the parent\ncomponent passes to the nested component.</p>\n<p>The key takeaway is that when binding to a child component's property in a parent component—that is, what's\nin square brackets—you must\ndecorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"onchanges-and-input\"><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> and <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#onchanges-and-input\"><i class=\"material-icons\">link</i></a></h4>\n<p>To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks#onchanges\">lifecycle hooks</a>.\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> is specifically designed to work with properties that have the\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. See the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n</div>\n<a id=\"output\"></a>\n<h2 id=\"how-to-use-output\">How to use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-output\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in the child component or directive to allow data to flow from\nthe child <em>out</em> to the parent.</p>\n<p>An <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property should normally be initialized to an Angular <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a> with values flowing out of the component as <a href=\"guide/template-syntax#event-binding\">events</a>.</p>\n<figure>\n  <img src=\"generated/images/guide/inputs-outputs/output.svg\" alt=\"Output diagram\" width=\"666\" height=\"340\">\n</figure>\n<p>Just like with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you can use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\non a property of the child component but its type should be\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.</p>\n<p><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway\nthrough which data can travel from the child to the parent.\nThe child component then has to raise an event so the\nparent knows something has changed. To raise an event,\n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> works hand in hand with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich is a class in <code>@angular/core</code> that you\nuse to emit custom events.</p>\n<p>When you use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<p>The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child\ncomponent that pushes data you enter in an HTML <code>&#x3C;input></code> to an array in the\nparent component.</p>\n<div class=\"alert is-helpful\">\n<p>The HTML element <code>&#x3C;input></code> and the Angular decorator <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>\nare different. This documentation is about component communication in Angular as it pertains to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. For more information on the HTML element <code>&#x3C;input></code>, see the <a href=\"https://www.w3.org/TR/html5/sec-forms.html#the-input-element\">W3C Recommendation</a>.</p>\n</div>\n<h3 id=\"in-the-child-1\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>This example features an <code>&#x3C;input></code> where a user can enter a value and click a <code>&#x3C;button></code> that raises an event. The <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n<p>First, be sure to import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>\nin the child component class:</p>\n<code-example language=\"js\">\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n</code-example>\n<p>Next, still in the child, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in the component class.\nThe following example <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is called <code>newItemEvent</code> and its type is\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\" header=\"src/app/item-output/item-output.component.ts\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n\n</code-example>\n<p>The different parts of the above declaration are as follows:</p>\n<ul>\n<li><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>—a decorator function marking the property as a way for data to go from the child to the parent</li>\n<li><code>newItemEvent</code>—the name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></li>\n<li><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code>—the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type</li>\n<li><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code>—tells Angular to create a new event emitter and that the data it emits is of type string. The type could be any type, such as <code>number</code>, <code>boolean</code>, and so on. For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</li>\n</ul>\n<p>Next, create an <code>addNewItem()</code> method in the same component class:</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\" header=\"src/app/item-output/item-output.component.ts\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p>The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>,\nto raise an event in which it emits the value the user\ntypes into the <code>&#x3C;input></code>. In other words, when\nthe user clicks the add button in the UI, the child lets the parent know\nabout the event and gives that data to the parent.</p>\n<h4 id=\"in-the-childs-template\">In the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-childs-template\"><i class=\"material-icons\">link</i></a></h4>\n<p>The child's template has two controls. The first is an HTML <code>&#x3C;input></code> with a\n<a href=\"guide/template-syntax#ref-var\">template reference variable</a> , <code>#newItem</code>,\nwhere the user types in an item name. Whatever the user types\ninto the <code>&#x3C;input></code> gets stored in the <code>#newItem</code> variable.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\" header=\"src/app/item-output/item-output.component.html\">\n&#x3C;label>Add an <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: &#x3C;input #newItem>&#x3C;/label>\n&#x3C;button (click)=\"addNewItem(newItem.value)\">Add to parent's list&#x3C;/button>\n\n</code-example>\n<p>The second element is a <code>&#x3C;button></code>\nwith an <a href=\"guide/template-syntax#event-binding\">event binding</a>. You know it's\nan event binding because the part to the left of the equal\nsign is in parentheses, <code>(click)</code>.</p>\n<p>The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class which\ntakes as its argument whatever the value of <code>#newItem</code> is.</p>\n<p>Now the child component has an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nfor sending data to the parent and a method for raising an event.\nThe next step is in the parent.</p>\n<h3 id=\"in-the-parent-1\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>In this example, the parent component is <code>AppComponent</code>, but you could use\nany component in which you could nest the child.</p>\n<p>The <code>AppComponent</code> in this example features a list of <code>items</code>\nin an array and a method for adding more items to the array.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p>The <code>addItem()</code> method takes an argument in the form of a string\nand then pushes, or adds, that string to the <code>items</code> array.</p>\n<h4 id=\"in-the-parents-template\">In the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parents-template\"><i class=\"material-icons\">link</i></a></h4>\n<p>Next, in the parent's template, bind the parent's\nmethod to the child's event. Put the child selector, here <code>&#x3C;app-item-output></code>,\nwithin the parent component's\ntemplate, <code>app.component.html</code>.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-output (newItemEvent)=\"addItem($event)\">&#x3C;/app-item-output>\n\n</code-example>\n<p>The event binding, <code>(newItemEvent)='addItem($event)'</code>, tells\nAngular to connect the event in the child, <code>newItemEvent</code>, to\nthe method in the parent, <code>addItem()</code>, and that the event that the child\nis notifying the parent about is to be the argument of <code>addItem()</code>.\nIn other words, this is where the actual hand off of data takes place.\nThe <code>$event</code> contains the data that the user types into the <code>&#x3C;input></code>\nin the child template UI.</p>\n<p>Now, in order to see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n<code-example language=\"html\">\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>}}&#x3C;/li>\n  &#x3C;/ul>\n</code-example>\n<p>The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array. When you enter a value in the child's <code>&#x3C;input></code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and it renders in the list.</p>\n<h2 id=\"input-and-output-together\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as in the following:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"together\" header=\"src/app/app.component.html\">\n&#x3C;app-input-output [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\" (deleteRequest)=\"crossOffItem($event)\">&#x3C;/app-input-output>\n\n</code-example>\n<p>The target, <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>. When you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n<p>The following diagram is of an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same\nchild component and shows the different parts of each:</p>\n<figure>\n  <img src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" alt=\"Input/Output diagram\" width=\"800\" height=\"333\">\n</figure>\n<p>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is <code>&#x3C;app-input-output></code> with <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nproperties in the child component class. The property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n<p>To combine property and event bindings using the banana-in-a-box\nsyntax, <code>[()]</code>, see <a href=\"guide/template-syntax#two-way\">Two-way Binding</a>.</p>\n<p>For more detail on how these work, see the previous sections on <a href=\"guide/template-syntax#input\">Input</a> and <a href=\"guide/template-syntax#output\">Output</a>. To see it in action, see the <live-example name=\"inputs-outputs\">Inputs and Outputs Example</live-example>.</p>\n<h2 id=\"input-and-output-declarations\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> declarations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-declarations\"><i class=\"material-icons\">link</i></a></h2>\n<p>Instead of using the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators\nto declare inputs and outputs, you can identify\nmembers in the <code>inputs</code> and <code>outputs</code> arrays\nof the directive metadata, as in this example:</p>\n<code-example path=\"inputs-outputs/src/app/in-the-metadata/in-the-metadata.component.ts\" region=\"metadata\" header=\"src/app/in-the-metadata/in-the-metadata.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['clearanceItem'],\noutputs: ['buyEvent']\n// tslint:enable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<p>While declaring <code>inputs</code> and <code>outputs</code> in the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nmetadata is possible, it is a better practice to use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nclass decorators instead, as follows:</p>\n<code-example path=\"inputs-outputs/src/app/input-output/input-output.component.ts\" region=\"input-output\" header=\"src/app/input-output/input-output.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: string;\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n</code-example>\n<p>See the <a href=\"guide/styleguide#decorate-input-and-output-properties\">Decorate input and output properties</a> section of the\n<a href=\"guide/styleguide\">Style Guide</a> for details.</p>\n<div class=\"alert is-helpful\">\n<p>If you get a template parse error when trying to use inputs or outputs, but you know that the\nproperties do indeed exist, double check\nthat your properties are annotated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> or that you've declared\nthem in an <code>inputs</code>/<code>outputs</code> array:</p>\n<code-example language=\"bash\">\nUncaught <a href=\"api/core/MissingTranslationStrategy#Error\" class=\"code-anchor\">Error</a>: <a href=\"\" class=\"code-anchor\">Template</a> parse errors:\nCan't bind to '<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>' since it isn't <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> known property of 'app-item-detail'\n</code-example>\n</div>\n<a id=\"aliasing-io\"></a>\n<h2 id=\"aliasing-inputs-and-outputs\">Aliasing inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does\noffer a solution.</p>\n<h3 id=\"aliasing-in-the-metadata\">Aliasing in the metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-in-the-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p>Alias inputs and outputs in the metadata using a colon-delimited (<code>:</code>) string with\nthe directive property name on the left and the public alias on the right:</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias\" header=\"src/app/aliasing/aliasing.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['input1: saveForLaterItem'], // propertyName:alias\noutputs: ['outputEvent1: saveForLaterEvent']\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<h3 id=\"aliasing-with-the-inputoutput-decorator\">Aliasing with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-with-the-inputoutput-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can specify the alias for the property name by passing the alias name to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator. The internal name remains as usual.</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias-input-output\" header=\"src/app/aliasing/aliasing.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('wishListItem') input2: string; //  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>(alias)\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('wishEvent') outputEvent2 = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>(); //  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>(alias) propertyName = ...\n\n</code-example>\n<hr>\n<a id=\"expression-operators\"></a>\n<h2 id=\"template-expression-operators\">Template expression operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expression-operators\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover three of these operators:</p>\n<ul>\n<li><a href=\"guide/template-syntax#pipe\">pipe</a></li>\n<li><a href=\"guide/template-syntax#safe-navigation-operator\">safe navigation operator</a></li>\n<li><a href=\"guide/template-syntax#non-null-assertion-operator\">non-null assertion operator</a></li>\n</ul>\n<a id=\"pipe\"></a>\n<h3 id=\"the-pipe-operator-\">The pipe operator (<code>|</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-pipe-operator-\"><i class=\"material-icons\">link</i></a></h3>\n<p>The result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</p>\n<p>Pipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the pipe operator (<code>|</code>):</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through uppercase pipe: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>The pipe operator passes the result of an expression on the left to a pipe function on the right.</p>\n<p>You can chain expressions through multiple pipes:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&#x3C;!-- convert title to uppercase, then to lowercase -->\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> pipe chain: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>And you can also <a href=\"guide/pipes#parameterizing-a-pipe\">apply parameters</a> to a pipe:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&#x3C;!-- pipe with configuration argument => \"February 25, 1980\" -->\n&#x3C;p>Manufacture date with date format pipe: {{item.manufactureDate | date:'longDate'}}&#x3C;/p>\n\n</code-example>\n<p>The <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> pipe is particularly helpful for debugging bindings:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p>Item json pipe: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n</code-example>\n<p>The generated output would look something like this:</p>\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The pipe operator has a higher precedence than the ternary operator (<code>?:</code>),\nwhich means <code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ? b : c | x</code> is parsed as <code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ? b : (c | x)</code>.\nNevertheless, for a number of reasons,\nthe pipe operator cannot be used without parentheses in the first and second operands of <code>?:</code>.\nA good practice is to use parentheses in the third operand too.</p>\n</div>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<h3 id=\"the-safe-navigation-operator----and-null-property-paths\">The safe navigation operator ( <code>?</code> ) and null property paths<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a></h3>\n<p>The Angular safe navigation operator, <code>?</code>, guards against <code>null</code> and <code>undefined</code>\nvalues in property paths. Here, it protects against a view render failure if <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is <code>null</code>.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> name is: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>?.name}}&#x3C;/p>\n\n</code-example>\n<p>If <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is <code>null</code>, the view still renders but the displayed value is blank; you see only \"The item name is:\" with nothing after it.</p>\n<p>Consider the next example, with a <code>nullItem</code>.</p>\n<code-example language=\"html\">\n  The null <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> name is {{nullItem.name}}\n</code-example>\n<p>Since there is no safe navigation operator and <code>nullItem</code> is <code>null</code>, JavaScript and Angular would throw a <code>null</code> reference error and break the rendering process of Angular:</p>\n<code-example language=\"bash\">\n  TypeError: Cannot <a href=\"api/core/Query#read\" class=\"code-anchor\">read</a> property 'name' of null.\n</code-example>\n<p>Sometimes however, <code>null</code> values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.</p>\n<p>With the safe navigation operator, <code>?</code>, Angular stops evaluating the expression when it hits the first <code>null</code> value and renders the view without errors.</p>\n<p>It works perfectly with long property paths such as <code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>?.b?.c?.d</code>.</p>\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<h3 id=\"the-non-null-assertion-operator---\">The non-null assertion operator ( <code>!</code> )<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h3>\n<p>As of Typescript 2.0, you can enforce <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a> with the <code>--strictNullChecks</code> flag. TypeScript then ensures that no variable is unintentionally null or undefined.</p>\n<p>In this mode, typed variables disallow <code>null</code> and <code>undefined</code> by default. The type checker throws an error if you leave a variable unassigned or try to assign <code>null</code> or <code>undefined</code> to a variable whose type disallows <code>null</code> and <code>undefined</code>.</p>\n<p>The type checker also throws an error if it can't determine whether a variable will be <code>null</code> or undefined at runtime. You tell the type checker not to throw an error by applying the postfix\n<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\">non-null assertion operator, !</a>.</p>\n<p>The Angular non-null assertion operator, <code>!</code>, serves the same purpose in\nan Angular template. For example, after you use <a href=\"guide/template-syntax#ngIf\">*ngIf</a>\nto check that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is defined, you can assert that\n<code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> properties are also defined.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!--No color, no error -->\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s color is: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>!.color}}&#x3C;/p>\n\n</code-example>\n<p>When the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> might be <code>null</code> or <code>undefined</code>.</p>\n<p>Unlike the <a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?)\"><em>safe navigation operator</em></a>,\nthe non-null assertion operator does not guard against <code>null</code> or <code>undefined</code>.\nRather, it tells the TypeScript type checker to suspend strict <code>null</code> checks for a specific property expression.</p>\n<p>The non-null assertion operator, <code>!</code>, is optional with the exception that you must use it when you turn on strict null checks.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"built-in-template-functions\"></a>\n<h2 id=\"built-in-template-functions\">Built-in template functions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-template-functions\"><i class=\"material-icons\">link</i></a></h2>\n<a id=\"any-type-cast-function\"></a>\n<h3 id=\"the-any-type-cast-function\">The <code>$any()</code> type cast function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h3>\n<p>Sometimes a binding expression triggers a type error during <a href=\"guide/aot-compiler\">AOT compilation</a> and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the <code>$any()</code> cast function to cast\nthe expression to the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> type</a> as in the following example:</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s undeclared best by date is: {{$any(<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p>When the Angular compiler turns this template into TypeScript code,\nit prevents TypeScript from reporting that <code>bestByDate</code> is not a member of the <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>\nobject when it runs type checking on the template.</p>\n<p>The <code>$any()</code> cast function also works with <code>this</code> to allow access to undeclared members of\nthe component.</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p>The <code>$any()</code> cast function works anywhere in a binding expression where a method call is valid.</p>\n<h2 id=\"svg-in-templates\">SVG in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#svg-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is possible to use SVG as valid templates in Angular. All of the template syntax below is\napplicable to both SVG and HTML. Learn more in the SVG <a href=\"https://www.w3.org/TR/SVG11/\">1.1</a> and\n<a href=\"https://www.w3.org/TR/SVG2/\">2.0</a> specifications.</p>\n<p>Why would you use SVG as template, instead of simply adding it as image to your application?</p>\n<p>When you use an SVG as the template, you are able to use directives and bindings just like with HTML\ntemplates. This means that you will be able to dynamically generate interactive graphics.</p>\n<p>Refer to the sample code snippet below for a syntax example:</p>\n<code-example path=\"template-syntax/src/app/svg.component.ts\" header=\"src/app/svg.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-svg',\n  templateUrl: './svg.component.svg',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./svg.component.css']\n})\nexport class SvgComponent {\n  fillColor = 'rgb(255, 0, 0)';\n\n  changeColor() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    this.fillColor = `rgb(${r}, ${g}, ${b})`;\n  }\n}\n\n\n</code-example>\n<p>Add the following code to your <code>svg.component.svg</code> file:</p>\n<code-example path=\"template-syntax/src/app/svg.component.svg\" header=\"src/app/svg.component.svg\">\n&#x3C;svg>\n  &#x3C;g>\n    &#x3C;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" [attr.fill]=\"fillColor\" (click)=\"changeColor()\" />\n    &#x3C;text x=\"120\" y=\"50\">click the rectangle to change the fill color&#x3C;/text>\n  &#x3C;/g>\n&#x3C;/svg>\n\n\n</code-example>\n<p>Here you can see the use of a <code>click()</code> event binding and the property binding syntax\n(<code>[attr.fill]=\"fillColor\"</code>).</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Input\n - api/core/Output\n - guide/accessibility\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/attribute-directives\n - guide/component-interaction\n - guide/displaying-data\n - guide/forms\n - guide/glossary\n - guide/observables-in-angular\n - guide/pipes\n - guide/router\n - guide/structural-directives\n - guide/styleguide\n - guide/upgrade\n - guide/user-input\n - start\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgForOfContext#even\n - api/common/NgForOfContext#odd\n - api/common/NgIf\n - api/common/NgIf#ngIfElse\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/UpperCasePipe\n - api/common/http/testing/TestRequest#request\n - api/core/Component\n - api/core/Component#interpolation\n - api/core/Component#styleUrls\n - api/core/ContentChild\n - api/core/DebugElement#classes\n - api/core/DebugElement#properties\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/Input\n - api/core/IterableChangeRecord#item\n - api/core/MissingTranslationStrategy#Error\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/Output\n - api/core/Query#read\n - api/core/SecurityContext#HTML\n - api/core/TemplateRef\n - api/core/Type\n - api/core/ViewChild\n - api/forms/ControlValueAccessor\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/HammerGestureConfig#overrides\n - api/platform-browser/Title\n - api/platform-server/PlatformConfig#document\n - api/router/RouterLinkActive#isActive\n - api/router/RouterLinkWithHref\n - api/router/RouterLinkWithHref#target\n - guide/aot-compiler\n - guide/attribute-directives\n - guide/forms\n - guide/forms#ngModel\n - guide/glossary#camelcase\n - guide/glossary#dash-case\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/pipes#parameterizing-a-pipe\n - guide/router\n - guide/security\n - guide/security#sanitization-and-security-contexts\n - guide/structural-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#one-per-element\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#the-asterisk--prefix\n - guide/styleguide\n - guide/styleguide#decorate-input-and-output-properties\n - guide/template-syntax#aliasing-in-the-metadata\n - guide/template-syntax#aliasing-inputs-and-outputs\n - guide/template-syntax#aliasing-with-the-inputoutput-decorator\n - guide/template-syntax#alternative-syntax\n - guide/template-syntax#attribute-binding\n - guide/template-syntax#attribute-class-and-style-bindings\n - guide/template-syntax#attribute-directives\n - guide/template-syntax#avoid-side-effects\n - guide/template-syntax#basics-of-two-way-binding\n - guide/template-syntax#binding-syntax-an-overview\n - guide/template-syntax#binding-targets\n - guide/template-syntax#binding-types-and-targets\n - guide/template-syntax#built-in-attribute-directives\n - guide/template-syntax#built-in-directives\n - guide/template-syntax#built-in-structural-directives\n - guide/template-syntax#built-in-template-functions\n - guide/template-syntax#class-binding\n - guide/template-syntax#colspan-and-colspan\n - guide/template-syntax#content-security\n - guide/template-syntax#custom-events-with-eventemitter\n - guide/template-syntax#data-binding-and-html\n - guide/template-syntax#event-and-event-handling-statements\n - guide/template-syntax#event-binding\n - guide/template-syntax#event-binding-event\n - guide/template-syntax#example-1-an-input\n - guide/template-syntax#example-2-a-disabled-button\n - guide/template-syntax#examples\n - guide/template-syntax#expression-context\n - guide/template-syntax#expression-guidelines\n - guide/template-syntax#expression-operators\n - guide/template-syntax#guard-against-null\n - guide/template-syntax#how-a-reference-variable-gets-its-value\n - guide/template-syntax#how-to-use-input\n - guide/template-syntax#how-to-use-output\n - guide/template-syntax#html-attribute-vs-dom-property\n - guide/template-syntax#html-in-templates\n - guide/template-syntax#import-formsmodule-to-use-ngmodel\n - guide/template-syntax#in-the-child\n - guide/template-syntax#in-the-child-1\n - guide/template-syntax#in-the-childs-template\n - guide/template-syntax#in-the-parent\n - guide/template-syntax#in-the-parent-1\n - guide/template-syntax#in-the-parents-template\n - guide/template-syntax#input\n - guide/template-syntax#input-and-output-are-independent\n - guide/template-syntax#input-and-output-declarations\n - guide/template-syntax#input-and-output-properties\n - guide/template-syntax#input-and-output-together\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#interpolation-\n - guide/template-syntax#interpolation-and-template-expressions\n - guide/template-syntax#ngClass\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngModel\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#ngclass\n - guide/template-syntax#ngfor\n - guide/template-syntax#ngfor-with-index\n - guide/template-syntax#ngfor-with-trackby\n - guide/template-syntax#ngif\n - guide/template-syntax#ngmodel-and-value-accessors\n - guide/template-syntax#ngmodel-two-way-binding\n - guide/template-syntax#ngstyle\n - guide/template-syntax#no-visible-side-effects\n - guide/template-syntax#non-null-assertion-operator\n - guide/template-syntax#onchanges-and-input\n - guide/template-syntax#one-time-string-initialization\n - guide/template-syntax#one-way-in\n - guide/template-syntax#output\n - guide/template-syntax#passing-in-an-object\n - guide/template-syntax#pipe\n - guide/template-syntax#property-binding\n - guide/template-syntax#property-binding-property\n - guide/template-syntax#property-binding-vs-interpolation\n - guide/template-syntax#quick-execution\n - guide/template-syntax#ref-var\n - guide/template-syntax#ref-vars\n - guide/template-syntax#remember-the-brackets\n - guide/template-syntax#return-the-proper-type\n - guide/template-syntax#safe-navigation-operator\n - guide/template-syntax#showhide-vs-ngif\n - guide/template-syntax#simplicity\n - guide/template-syntax#statement-context\n - guide/template-syntax#statement-guidelines\n - guide/template-syntax#structural-directives\n - guide/template-syntax#style-binding\n - guide/template-syntax#svg-in-templates\n - guide/template-syntax#target-event\n - guide/template-syntax#template-expression-operators\n - guide/template-syntax#template-expressions\n - guide/template-syntax#template-input-variable\n - guide/template-syntax#template-input-variables\n - guide/template-syntax#template-reference-variable-considerations\n - guide/template-syntax#template-reference-variables-var\n - guide/template-syntax#template-statements\n - guide/template-syntax#template-statements-have-side-effects\n - guide/template-syntax#template-syntax\n - guide/template-syntax#the-any-type-cast-function\n - guide/template-syntax#the-ngswitch-directives\n - guide/template-syntax#the-non-null-assertion-operator---\n - guide/template-syntax#the-pipe-operator-\n - guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\n - guide/template-syntax#top-of-page\n - guide/template-syntax#two-way\n - guide/template-syntax#two-way-binding-\n - guide/template-syntax#two-way-binding-in-forms\n - guide/template-syntax#without-ngstyle\n - http://www.typescriptlang.org/docs/handbook/basic-types.html#any\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\n - https://angular.io/api/forms/DefaultValueAccessor\n - https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n - https://developer.mozilla.org/en-US/docs/Web/SVG\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-syntax.md?message=docs%3A%20describe%20your%20change...\n - https://www.w3.org/TR/SVG11/\n - https://www.w3.org/TR/SVG2/\n - https://www.w3.org/TR/html5/sec-forms.html#the-input-element\n-->"
}