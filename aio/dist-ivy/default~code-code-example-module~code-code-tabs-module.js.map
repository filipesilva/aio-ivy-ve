{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js.pre-build-optimizer.js","./src/app/shared/copier.service.ts","./src/app/custom-elements/code/code.component.ts","./src/app/custom-elements/code/code.component.ts.pre-build-optimizer.js","./src/app/custom-elements/code/code.module.ts","./src/app/custom-elements/code/code.module.ts.pre-build-optimizer.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js.pre-build-optimizer.js","./node_modules/rxjs/_esm2015/internal/operators/skip.js.pre-build-optimizer.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js.pre-build-optimizer.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js.pre-build-optimizer.js","./src/app/custom-elements/code/pretty-printer.service.ts","./src/app/custom-elements/code/pretty-printer.service.ts.pre-build-optimizer.js"],"names":["throwPortalAlreadyAttachedError","Error","Portal","host","throwNullPortalOutletError","hasAttached","this","_attachedHost","attach","throwNoPortalAttachedError","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","super","TemplatePortal","template","context","templateRef","elementRef","undefined","BasePortalOutlet","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","setAttachedHost","_invokeDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentFactory","resolveComponentFactory","componentRef","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","dispose","parentNode","removeChild","CdkPortal","ɵfac","t","ɵdir","type","selectors","exportAs","features","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_attachedRef","ref","emit","clear","inputs","outputs","PortalHostDirective","ɵPortalHostDirective_BaseFactory","provide","useExisting","PortalModule","ɵmod","ɵinj","factory","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","get","CopierService","text","docElem","document","documentElement","isRTL","getAttribute","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","body","select","setSelectionRange","createFake","execCommand","err","removeFake","_c0","CodeComponent_button_2_Template","rf","ctx","_r106","ctx_r103","CodeComponent","snackbar","pretty","copier","logger","ariaLabel","codeFormatted","code","_code","trim","formatDisplayedCode","showMissingCodeMessage","header","_header","leftAlignedCode","indent","Number","MAX_VALUE","lines","split","line","lineIndent","search","Math","min","map","substr","join","leftAlign","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","subscribe","c","src","path","region","formattedCode","codeContainer","nativeElement","innerHTML","textContent","copyText","log","open","duration","error","linenums","parseInt","isNaN","ɵcmp","_t","first","hideCopy","decls","vars","consts","directives","encapsulation","CodeModule","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","add","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","ScrollStrategyOptions","noop","close","config","block","reposition","ɵprov","providedIn","ngInjectableDef","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","Object","keys","key","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","push","splice","removeEventListener","OverlayContainer","_containerElement","_createContainer","previousContainers","getElementsByClassName","container","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_keydownEventsObservable","Observable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","asObservable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","timeoutId","backdropToDetach","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","takeUntil","merge","children","boundingBoxClass","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","y","startX","_isRtl","endX","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getConfig","horizontalFit","start","overflowRight","max","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","observers","_getScrollVisibility","changeEvent","elements","querySelectorAll","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","transform","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","dest","source","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","slice","wrapperClass","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","OverlayPositionBuilder","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","OverlayModule","providers","imports","SkipOperator","total","subscriber","Subscriber","destination","count","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","sheet","insertRule","e","console","createEmptyStyleRule","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","lift","debounceTime","breakpointStates","response","breakpoints","state","output","handler","startWith","nextMql","set","queries","a1","a2","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","SimpleSnackBar_div_2_Template","_r13","$event","action","ctx_r11","data","_c1","MatSnackBarContainer_ng_template_0_Template","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","hostBindings","elIndex","message","hasAction","changeDetection","matSnackBarAnimations","snackBarState","opacity","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","_assertNotAttached","_applySnackBarClasses","fromState","toState","_completeExit","onEnter","onMicrotaskEmpty","panelClasses","Array","isArray","viewQuery","onAnimationEnd","animation","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","_attach","openFromComponent","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","global","isLeft","isRight","centerHorizontally","PrettyPrinter","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","msg"],"mappings":"6FAAA,kUA2BA,SAASA,IACL,MAAMC,MAAM,sCAoDhB,MAAMC,EAMF,OAAOC,GAQH,OAPY,MAARA,GAnCZ,WACI,MAAMF,MAAM,wDAmCJG,GAEAD,EAAKE,eACLL,IAEJM,KAAKC,cAAgBJ,EACKA,EAAKK,OAAOF,MAM1C,SAEI,IAAIH,EAAOG,KAAKC,cACJ,MAARJ,EA3CZ,WACI,MAAMF,MAAM,gEA2CJQ,IAGAH,KAAKC,cAAgB,KACrBJ,EAAKO,UAOb,iBACI,OAA6B,MAAtBJ,KAAKC,cAQhB,gBAAgBJ,GACZG,KAAKC,cAAgBJ,GAc7B,MAAMQ,UAAwBT,EAO1B,YAAYU,EAAWC,EAAkBC,EAAUC,GAC/CC,QACAV,KAAKM,UAAYA,EACjBN,KAAKO,iBAAmBA,EACxBP,KAAKQ,SAAWA,EAChBR,KAAKS,yBAA2BA,GAgCxC,MAAME,UAAuBf,EAMzB,YAAYgB,EAAUL,EAAkBM,GACpCH,QACAV,KAAKc,YAAcF,EACnBZ,KAAKO,iBAAmBA,EACxBP,KAAKa,QAAUA,EAKnB,aACI,OAAOb,KAAKc,YAAYC,WAU5B,OAAOlB,EAAMgB,EAAUb,KAAKa,SAExB,OADAb,KAAKa,QAAUA,EACRH,MAAMR,OAAOL,GAKxB,SAEI,OADAG,KAAKa,aAAUG,EACRN,MAAMN,UAqDrB,MAAMa,EACF,cAIIjB,KAAKkB,aAAc,EAMvB,cACI,QAASlB,KAAKmB,gBAOlB,OAAOC,GAUH,OATKA,GAhRb,WACI,MAAMzB,MAAM,mCAgRJ0B,GAEArB,KAAKD,eACLL,IAEAM,KAAKkB,aAtQjB,WACI,MAAMvB,MAAM,+CAsQJ2B,GAEAF,aAAkBf,GAClBL,KAAKmB,gBAAkBC,EAChBpB,KAAKuB,sBAAsBH,IAE7BA,aAAkBT,GACvBX,KAAKmB,gBAAkBC,EAChBpB,KAAKwB,qBAAqBJ,SAvQ7C,WACI,MAAMzB,MAAM,uHAwQR8B,GAMJ,SACQzB,KAAKmB,kBACLnB,KAAKmB,gBAAgBO,gBAAgB,MACrC1B,KAAKmB,gBAAkB,MAE3BnB,KAAK2B,mBAMT,UACQ3B,KAAKD,eACLC,KAAKI,SAETJ,KAAK2B,mBACL3B,KAAKkB,aAAc,EAOvB,aAAaU,GACT5B,KAAK6B,WAAaD,EAMtB,mBACQ5B,KAAK6B,aACL7B,KAAK6B,aACL7B,KAAK6B,WAAa,OAsD9B,MAAMC,UAAwBb,EAO1B,YAAYc,EAAeC,EAA2BC,EAASC,GAC3DxB,QACAV,KAAK+B,cAAgBA,EACrB/B,KAAKgC,0BAA4BA,EACjChC,KAAKiC,QAAUA,EACfjC,KAAKkC,iBAAmBA,EAQ5B,sBAAsBd,GAElB,MAEMe,GAFWf,EAAOX,0BAA4BT,KAAKgC,2BAEvBI,wBAAwBhB,EAAOd,WAEjE,IAAI+B,EA0BJ,OArBIjB,EAAOb,kBACP8B,EAAejB,EAAOb,iBAAiB+B,gBAAgBH,EAAkBf,EAAOb,iBAAiBgC,OAAQnB,EAAOZ,UAAYY,EAAOb,iBAAiBC,UACpJR,KAAKwC,aAAa,IAGZH,EAAaI,aAGnBJ,EAAeF,EAAiBO,OAAOtB,EAAOZ,UAAYR,KAAKkC,kBAC/DlC,KAAKiC,QAAQU,WAAWN,EAAaO,UACrC5C,KAAKwC,aAAa,KAIdxC,KAAKiC,QAAQY,WAAWR,EAAaO,UACrCP,EAAaI,aAKrBzC,KAAK+B,cAAce,YAAY9C,KAAK+C,sBAAsBV,IACnDA,EAQX,qBAAqBjB,GAEjB,IAAI4B,EAAgB5B,EAAOb,iBAEvB0C,EAAUD,EAAcE,mBAAmB9B,EAAON,YAAaM,EAAOP,SAsB1E,OArBAoC,EAAQE,gBAKRF,EAAQG,UAAUC,QAIlBC,GAAYtD,KAAK+B,cAAce,YAAYQ,IAC3CtD,KAAKwC,aAAa,KAKd,IAAIe,EAAQP,EAAcQ,QAAQP,IACnB,IAAXM,GACAP,EAAcS,OAAOF,KAItBN,EAMX,UACIvC,MAAMgD,UAC+B,MAAjC1D,KAAK+B,cAAc4B,YACnB3D,KAAK+B,cAAc4B,WAAWC,YAAY5D,KAAK+B,eASvD,sBAAsBM,GAClB,OAA8CA,EAAuB,SAAEe,UAAU,I,kBAwCnFS,UAAkBlD,EAKpB,YAAYG,EAAaP,GACrBG,MAAMI,EAAaP,I,OAG3BsD,EAAUC,KAAO,SAA2BC,GAAK,OAAO,IAAKA,GAAKF,GAAW,KAAyB,KAAc,KAAyB,OAC7IA,EAAUG,KAAO,KAAyB,CAAEC,KAAMJ,EAAWK,UAAW,CAAC,CAAC,GAAI,YAAa,KAAMC,SAAU,CAAC,aAAcC,SAAU,CAAC,Q,oBA2C/HC,UAAwBpD,EAK1B,YAAYe,EAA2BsC,GACnC5D,QACAV,KAAKgC,0BAA4BA,EACjChC,KAAKsE,kBAAoBA,EAIzBtE,KAAKuE,gBAAiB,EAItBvE,KAAKwE,SAAW,IAAI,IAMxB,aACI,OAAOxE,KAAKmB,gBAMhB,WAAWC,KAKHpB,KAAKD,eAAkBqB,GAAWpB,KAAKuE,kBAGvCvE,KAAKD,eACLW,MAAMN,SAENgB,GACAV,MAAMR,OAAOkB,GAEjBpB,KAAKmB,gBAAkBC,GAM3B,kBACI,OAAOpB,KAAKyE,aAKhB,WACIzE,KAAKuE,gBAAiB,EAK1B,cACI7D,MAAMgD,UACN1D,KAAKmB,gBAAkB,KACvBnB,KAAKyE,aAAe,KASxB,sBAAsBrD,GAClBA,EAAOM,gBAAgB1B,MAIvB,MAAMO,EAA8C,MAA3Ba,EAAOb,iBAC5Ba,EAAOb,iBACPP,KAAKsE,kBAIHnC,GAFWf,EAAOX,0BAA4BT,KAAKgC,2BAEvBI,wBAAwBhB,EAAOd,WAE3DoE,EAAMnE,EAAiB+B,gBAAgBH,EAAkB5B,EAAiBgC,OAAQnB,EAAOZ,UAAYD,EAAiBC,UAQ5H,OAPAE,MAAM8B,aAAa,IAGbkC,EAAIjC,WACVzC,KAAKmB,gBAAkBC,EACvBpB,KAAKyE,aAAeC,EACpB1E,KAAKwE,SAASG,KAAKD,GACZA,EAQX,qBAAqBtD,GACjBA,EAAOM,gBAAgB1B,MAEvB,MAAMiD,EAAUjD,KAAKsE,kBAAkBpB,mBAAmB9B,EAAON,YAAaM,EAAOP,SAQrF,OAPAH,MAAM8B,aAAa,IAGbxC,KAAKsE,kBAAkBM,SAC7B5E,KAAKmB,gBAAkBC,EACvBpB,KAAKyE,aAAexB,EACpBjD,KAAKwE,SAASG,KAAK1B,GACZA,G,OAGfoB,EAAgBP,KAAO,SAAiCC,GAAK,OAAO,IAAKA,GAAKM,GAAiB,KAAyB,KAA2B,KAAyB,OAC5KA,EAAgBL,KAAO,KAAyB,CAAEC,KAAMI,EAAiBH,UAAW,CAAC,CAAC,GAAI,kBAAmB,KAAMW,OAAQ,CAAEzD,OAAQ,CAAC,kBAAmB,WAAa0D,QAAS,CAAEN,SAAU,YAAcL,SAAU,CAAC,mBAAoBC,SAAU,CAAC,Q,oBAoD7OW,UAA4BV,G,OAElCU,EAAoBjB,KAAO,SAAqCC,GAAK,OAAOiB,EAAiCjB,GAAKgB,IAClHA,EAAoBf,KAAO,KAAyB,CAAEC,KAAMc,EAAqBb,UAAW,CAAC,CAAC,GAAI,gBAAiB,IAAK,CAAC,GAAI,aAAc,KAAMW,OAAQ,CAAEzD,OAAQ,CAAC,gBAAiB,WAAa+C,SAAU,CAAC,iBAAkBC,SAAU,CAAC,KAA0B,CAAC,CACrPa,QAASZ,EACTa,YAAaH,KACZ,Q,MACjB,MAAMC,EAAmC,KAA6BD,G,kBAahEI,G,OAENA,EAAaC,KAAO,KAAwB,CAAEnB,KAAMkB,IACpDA,EAAaE,KAAO,KAAwB,CAAEC,QAAS,SAA8BvB,GAAK,OAAO,IAAKA,GAAKoB,M,MAgC3G,MAAMI,EAKF,YAAYC,EAAiBC,GACzBzF,KAAKwF,gBAAkBA,EACvBxF,KAAKyF,cAAgBA,EAOzB,IAAIC,EAAOC,GAEP,MAAMC,EAAQ5F,KAAKyF,cAAcI,IAAIH,GACrC,YAAqB,IAAVE,EACAA,EAEJ5F,KAAKwF,gBAAgBK,IAAIH,EAAOC,M,oCC30B/C,kCAUO,MAAMG,EAOT,WAAWC,GACT,MAAMC,EAAUC,SAASC,gBACnBC,EAAwC,QAAhCH,EAAQI,aAAa,OAGnCpG,KAAKqG,SAAWJ,SAASK,cAAc,YAGvCtG,KAAKqG,SAASE,MAAMC,SAAW,OAG/BxG,KAAKqG,SAASE,MAAME,OAAS,IAC7BzG,KAAKqG,SAASE,MAAMG,QAAU,IAC9B1G,KAAKqG,SAASE,MAAMI,OAAS,IAG7B3G,KAAKqG,SAASE,MAAMK,SAAW,WAC/B5G,KAAKqG,SAASE,MAAOJ,EAAQ,QAAU,QAAW,UAGlD,MAAMU,EAAYC,OAAOC,aAAef,EAAQgB,UAChDhH,KAAKqG,SAASE,MAAMU,IAAMJ,EAAY,KAEtC7G,KAAKqG,SAASa,aAAa,WAAY,IACvClH,KAAKqG,SAAST,MAAQG,EAEtBE,SAASkB,KAAKrE,YAAY9C,KAAKqG,UAE/BrG,KAAKqG,SAASe,SACdpH,KAAKqG,SAASgB,kBAAkB,EAAGrH,KAAKqG,SAAST,MAAMrD,QAGzD,aACMvC,KAAKqG,WACPJ,SAASkB,KAAKvD,YAAY5D,KAAKqG,UAC/BrG,KAAKqG,SAAW,MAIpB,SAASN,GACP,IAEE,OADA/F,KAAKsH,WAAWvB,GACTE,SAASsB,YAAY,QAC5B,MAAOC,GACP,OAAO,E,QAEPxH,KAAKyH,iB,oCC/Db,0HCQA,MAAMC,EAAM,CAAC,iBACb,SAASC,EAAgCC,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC5D,MAAME,EAAQ,ODsBZ,mBAGE,4DACA,sCAAyB,uBAAY,OACvC,0BClBJ,GAAS,EAALF,EAAQ,CACV,MAAMG,EAAW,ODcb,gCAQD,Y,MAAMC,EAqDX,YACUC,EACAC,EACAC,EACAC,GAHA,KAAAH,WACA,KAAAC,SACA,KAAAC,SACA,KAAAC,SAxDV,KAAAC,UAAY,GA+CF,KAAAC,cAAgB,IAAI,IAzC9B,SAASC,GACPvI,KAAKwI,MAAQD,EAERvI,KAAKwI,OAAUxI,KAAKwI,MAAMC,OAG7BzI,KAAK0I,sBAFL1I,KAAK2I,yBAKT,WAAqB,OAAO3I,KAAKwI,MAwBjC,WACWI,GACT5I,KAAK6I,QAAUD,EACf5I,KAAKqI,UAAYrI,KAAK4I,OAAS,0BAA0B5I,KAAK4I,SAAW,GAE3E,aAAiC,OAAO5I,KAAK6I,QAc7C,cAGM7I,KAAKuI,MACPvI,KAAK0I,sBAID,sBACN,MAAMI,EA4DV,SAAmB/C,GACjB,IAAIgD,EAASC,OAAOC,UAEpB,MAAMC,EAAQnD,EAAKoD,MAAM,MAQzB,OAPAD,EAAM7F,QAAQ+F,IACZ,MAAMC,EAAaD,EAAKE,OAAO,OACX,IAAhBD,IACFN,EAASQ,KAAKC,IAAIH,EAAYN,MAI3BG,EAAMO,IAAIL,GAAQA,EAAKM,OAAOX,IAASY,KAAK,MAAMlB,OAvE/BmB,CAAU5J,KAAKuI,MACvCvI,KAAK6J,YAAYf,GACjB9I,KAAK8J,SAAW9J,KAAK+J,cAErB/J,KAAKkI,OACA8B,WAAWlB,EAAiB9I,KAAKiK,SAAUjK,KAAKkK,eAChDC,KAAK,YAAI,IAAMnK,KAAKsI,cAAc3D,SAClCyF,UAAUC,GAAKrK,KAAK6J,YAAYQ,GAAI,QAKnC,yBACN,MAAMC,EAAMtK,KAAKuK,KAAOvK,KAAKuK,MAAQvK,KAAKwK,OAAS,IAAMxK,KAAKwK,OAAS,IAAM,GAE7ExK,KAAK6J,YAAY,qDADFS,EAAM,SAASA,IAAQ,WAKhC,YAAYG,GAGlBzK,KAAK0K,cAAcC,cAAcC,UAAYH,EAIvC,cAIN,OAAOzK,KAAK0K,cAAcC,cAAcE,YAI1C,SACE,MAAMtC,EAAOvI,KAAK8J,SACS9J,KAAKmI,OAAO2C,SAASvC,IAG9CvI,KAAKoI,OAAO2C,IAAI,4BAA6BxC,GAC7CvI,KAAKiI,SAAS+C,KAAK,cAAe,GAAI,CAAEC,SAAU,QAElDjL,KAAKoI,OAAO8C,MAAM,IAAIvL,MAAM,qCAAqC4I,OACjEvI,KAAKiI,SAAS+C,KAAK,iCAAkC,GAAI,CAAEC,SAAU,OAKzE,cACE,MAAME,EACqB,kBAAlBnL,KAAKmL,SAAyBnL,KAAKmL,SACxB,SAAlBnL,KAAKmL,UACa,UAAlBnL,KAAKmL,WACoB,iBAAlBnL,KAAKmL,SAAwBC,SAASpL,KAAKmL,SAAU,IAC5DnL,KAAKmL,UAEP,OAAoB,MAAZA,IAAsBE,MAAMF,IAAuBA,G,OCtC/DnD,EAAclE,KAAO,SAA+BC,GAAK,OAAO,IAAKA,GDtFxDiE,GAAa,0CCuF1BA,EAAcsD,KAAO,KAAqB,CAAErH,KDvF/B+D,EAAa,iDC0FlB,IAAIuD,ED1Fc,KCwFlB,KAAqB7D,GAAK,GACnB,EAALE,GAEF,KAAmB2D,EAAK,UAAuB1D,EAAI6C,cAAgBa,EAAGC,QACrE3G,OAAQ,CAAE4G,SAAU,WAAYxB,SAAU,WAAYkB,SAAU,WAAYZ,KAAM,OAAQC,OAAQ,SAAU5B,OAAQ,UAAY9D,QAAS,CAAEwD,cAAe,iBAAmBlE,SAAU,CAAC,QAA4BsH,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,QAAS,sCAAuC,QAAS,oBAAqB,EAAG,QAAS,EAAG,QAAS,CAAC,EAAG,WAAY,UAAW,CAAC,gBAAiB,IAAK,CAAC,QAAS,oBAAqB,EAAG,iBAAkB,cAAe,WAAY,EAAG,SAAU,CAAC,cAAe,SAAUhL,SAAU,SAAgCgH,EAAIC,GAAgB,EAALD,IDvG7jB,cACE,0CAMA,sCACF,yBCuGW,EAALA,ID/GD,wCACK,mCCkHLiE,WAAY,CAAC,KAAUC,cAAe,I,GDxGxC,I,kCE1CP,8GAcO,Y,MAAMC,G,OCLbA,EAAW3G,KAAO,KAAoB,CAAEnB,KDK3B8H,ICJbA,EAAW1G,KAAO,KAAoB,CAAEC,QAAS,SAA4BvB,GAAK,OAAO,IAAKA,GDIjFgI,IAAU,UAFV,CAAE,IAAe,KAAe,SAJlC,CAAE,IAAc,Q,GAMpB,I,4MEMP,MAAM,EAKF,YAAYC,EAAgB/F,GACxBjG,KAAKgM,eAAiBA,EACtBhM,KAAKiM,oBAAsB,CAAEhF,IAAK,GAAIiF,KAAM,IAC5ClM,KAAKmM,YAAa,EAClBnM,KAAKoM,UAAYnG,EAMrB,UAKA,SACI,GAAIjG,KAAKqM,gBAAiB,CAEtB,MAAMC,EAA0BtM,KAAKoM,UAA0B,gBAC/DpM,KAAKuM,wBAA0BvM,KAAKgM,eAAeQ,4BAEnDxM,KAAKiM,oBAAoBC,KAAOI,EAAK/F,MAAM2F,MAAQ,GACnDlM,KAAKiM,oBAAoBhF,IAAMqF,EAAK/F,MAAMU,KAAO,GAGjDqF,EAAK/F,MAAM2F,KAAO,aAAqBlM,KAAKuM,wBAAwBL,MACpEI,EAAK/F,MAAMU,IAAM,aAAqBjH,KAAKuM,wBAAwBtF,KACnEqF,EAAKG,UAAUC,IAAI,0BACnB1M,KAAKmM,YAAa,GAO1B,UACI,GAAInM,KAAKmM,WAAY,CAEjB,MAAMQ,EAA0B3M,KAAKoM,UAA0B,gBAIzDQ,EAA+BD,EAAW,MAE1CE,EAJ0B7M,KAAKoM,UAAe,KAIJ,MAE1CU,EAA6BF,EAAUG,gBAAkB,GAEzDC,EAA6BH,EAAUE,gBAAkB,GAC/D/M,KAAKmM,YAAa,EAClBS,EAAUV,KAAOlM,KAAKiM,oBAAoBC,KAC1CU,EAAU3F,IAAMjH,KAAKiM,oBAAoBhF,IACzC0F,EAAKF,UAAUhJ,OAAO,0BAGtBmJ,EAAUG,eAAiBF,EAAUE,eAAiB,OACtDjG,OAAOmG,OAAOjN,KAAKuM,wBAAwBL,KAAMlM,KAAKuM,wBAAwBtF,KAC9E2F,EAAUG,eAAiBD,EAC3BD,EAAUE,eAAiBC,GAOnC,gBAMI,GADgChN,KAAKoM,UAA0B,gBACtDK,UAAUS,SAAS,2BAA6BlN,KAAKmM,WAC1D,OAAO,EAGX,MAAMhF,EAAOnH,KAAKoM,UAAUjF,KAEtBgG,EAAWnN,KAAKgM,eAAeoB,kBACrC,OAAOjG,EAAKkG,aAAeF,EAASG,QAAUnG,EAAKoG,YAAcJ,EAASK,OAyElF,SAASC,IACL,OAAO9N,MAAM,8CAsBjB,MAAM+N,EAOF,YAAYC,EAAmBC,EAAS5B,EAAgB6B,GACpD7N,KAAK2N,kBAAoBA,EACzB3N,KAAK4N,QAAUA,EACf5N,KAAKgM,eAAiBA,EACtBhM,KAAK6N,QAAUA,EACf7N,KAAK8N,oBAAsB,KAI3B9N,KAAK+N,QAAU,KAIX/N,KAAKgO,UACDhO,KAAKiO,YAAYlO,eACjBC,KAAK4N,QAAQM,IAAI,IAGXlO,KAAKiO,YAAY7N,WASnC,OAAO+N,GACH,GAAInO,KAAKiO,YACL,MAAMR,IAEVzN,KAAKiO,YAAcE,EAMvB,SACI,GAAInO,KAAK8N,oBACL,OAGJ,MAAMM,EAASpO,KAAK2N,kBAAkBU,SAAS,GAC3CrO,KAAK6N,SAAW7N,KAAK6N,QAAQS,WAAatO,KAAK6N,QAAQS,UAAY,GACnEtO,KAAKuO,uBAAyBvO,KAAKgM,eAAeQ,4BAA4BvF,IAC9EjH,KAAK8N,oBAAsBM,EAAOhE,UAAU,KAKxC,MAAMoE,EAAiBxO,KAAKgM,eAAeQ,4BAA4BvF,IACnEsC,KAAKkF,IAAID,EAAiBxO,KAAKuO,wBAAgEvO,KAAa,QAAY,UACxHA,KAAK+N,UAGL/N,KAAKiO,YAAYS,oBAKzB1O,KAAK8N,oBAAsBM,EAAOhE,UAAUpK,KAAK+N,SAOzD,UACQ/N,KAAK8N,sBACL9N,KAAK8N,oBAAoBa,cACzB3O,KAAK8N,oBAAsB,MAMnC,SACI9N,KAAKgO,UACLhO,KAAKiO,YAAc,MA6D3B,MAAMW,EAKF,UAKA,WAKA,WAuBJ,SAASC,EAA6BC,EAASC,GAC3C,OAAOA,EAAiBC,KAIxBC,GAEyBH,EAAQI,OAASD,EAAgBhI,KAEjC6H,EAAQ7H,IAAMgI,EAAgBC,QAE/BJ,EAAQK,MAAQF,EAAgB/C,MAE/B4C,EAAQ5C,KAAO+C,EAAgBE,OAW5D,SAASC,EAA4BN,EAASC,GAC1C,OAAOA,EAAiBC,KAIxBK,GAEyBP,EAAQ7H,IAAMoI,EAAoBpI,KAElC6H,EAAQI,OAASG,EAAoBH,QAEtCJ,EAAQ5C,KAAOmD,EAAoBnD,MAElC4C,EAAQK,MAAQE,EAAoBF,OA6BjE,MAAMG,EAOF,YAAY3B,EAAmB3B,EAAgB4B,EAASC,GACpD7N,KAAK2N,kBAAoBA,EACzB3N,KAAKgM,eAAiBA,EACtBhM,KAAK4N,QAAUA,EACf5N,KAAK6N,QAAUA,EACf7N,KAAK8N,oBAAsB,KAO/B,OAAOK,GACH,GAAInO,KAAKiO,YACL,MAAMR,IAEVzN,KAAKiO,YAAcE,EAMvB,SACSnO,KAAK8N,sBAGN9N,KAAK8N,oBAAsB9N,KAAK2N,kBAAkBU,SADjCrO,KAAK6N,QAAU7N,KAAK6N,QAAQ0B,eAAiB,GACOnF,UAAU,KAM3E,GAFApK,KAAKiO,YAAYS,iBAEb1O,KAAK6N,SAAW7N,KAAK6N,QAAQ2B,UAAW,CAExC,MAAMC,EAAczP,KAAKiO,YAAYyB,eAAeC,yBAC9C,MAAEnC,EAAK,OAAEF,GAAWtN,KAAKgM,eAAeoB,kBAK1CyB,EAA6BY,EADb,CAAC,CAAEjC,QAAOF,SAAQ4B,OAAQ5B,EAAQ6B,MAAO3B,EAAOvG,IAAK,EAAGiF,KAAM,OAE9ElM,KAAKgO,UACLhO,KAAK4N,QAAQM,IAAI,IAGXlO,KAAKiO,YAAY7N,eAU3C,UACQJ,KAAK8N,sBACL9N,KAAK8N,oBAAoBa,cACzB3O,KAAK8N,oBAAsB,MAMnC,SACI9N,KAAKgO,UACLhO,KAAKiO,YAAc,M,kBA8CrB2B,EAOF,YAAYjC,EAAmB3B,EAAgB4B,EAAS3H,GACpDjG,KAAK2N,kBAAoBA,EACzB3N,KAAKgM,eAAiBA,EACtBhM,KAAK4N,QAAUA,EAIf5N,KAAK6P,KAAO,IAGN,IAAIjB,EAKV5O,KAAK8P,MAIJC,GAAW,IAAIrC,EAAoB1N,KAAK2N,kBAAmB3N,KAAK4N,QAAS5N,KAAKgM,eAAgB+D,GAI/F/P,KAAKgQ,MAAQ,IAGP,IAAI,EAAoBhQ,KAAKgM,eAAgBhM,KAAKoM,WAMxDpM,KAAKiQ,WAIJF,GAAW,IAAIT,EAAyBtP,KAAK2N,kBAAmB3N,KAAKgM,eAAgBhM,KAAK4N,QAASmC,GACpG/P,KAAKoM,UAAYnG,G,OAGzB2J,EAAsB9L,KAAO,SAAuCC,GAAK,OAAO,IAAKA,GAAK6L,GAAuB,KAAgB,KAAmB,KAAgB,KAAgB,KAAgB,KAAS,KAAgB,OAC7NA,EAAsBM,MAAQ,KAA0B,CAAExK,MAAOkK,EAAuBtK,QAAS,SAAUvB,GAAK,OAAO6L,EAAsB9L,KAAKC,IAAOoM,WAAY,SAQlJP,EAAsBQ,gBAAkB,aAAmB,CAAE9K,QAAS,WAA2C,OAAO,IAAIsK,EAAsB,aAAS,KAAmB,aAAS,KAAgB,aAAS,KAAS,aAAS,OAAelK,MAAOkK,EAAuBO,WAAY,S,MAkE9S,MAAME,EAIF,YAAYN,GAuBR,GAnBA/P,KAAKsQ,eAAiB,IAAI1B,EAI1B5O,KAAKuQ,WAAa,GAIlBvQ,KAAKwQ,aAAc,EAInBxQ,KAAKyQ,cAAgB,4BAMrBzQ,KAAK0Q,qBAAsB,EACvBX,EAAQ,CAER,MAAMY,EAAgCC,OAAOC,KAAKd,GAClD,IAAK,MAAMe,KAAOH,OACM3P,IAAhB+O,EAAOe,KAOP9Q,KAAK8Q,GAA0Bf,EAAOe,MA0G1D,MAAMC,EAQF,YAAYC,EAAQC,EAASC,EAASC,EAASZ,GAC3CvQ,KAAKkR,QAAUA,EACflR,KAAKmR,QAAUA,EACfnR,KAAKuQ,WAAaA,EAClBvQ,KAAKoR,QAAUJ,EAAOI,QACtBpR,KAAKqR,QAAUL,EAAOK,QACtBrR,KAAKsR,SAAWL,EAAQK,SACxBtR,KAAKuR,SAAWN,EAAQM,UAgFhC,MAAMC,EAKF,YAAYC,EAAgBC,GACxB1R,KAAKyR,eAAiBA,EACtBzR,KAAK0R,yBAA2BA,GA2BxC,SAASC,EAAyBC,EAAUhM,GACxC,GAAc,QAAVA,GAA6B,WAAVA,GAAgC,WAAVA,EACzC,MAAMjG,MAAM,8BAA8BiS,MAAahM,OACnD,yCAUZ,SAASiM,EAA2BD,EAAUhM,GAC1C,GAAc,UAAVA,GAA+B,QAAVA,GAA6B,WAAVA,EACxC,MAAMjG,MAAM,8BAA8BiS,MAAahM,OACnD,wC,kBAaNkM,EAIF,YAAY7L,GAIRjG,KAAK+R,kBAAoB,GAIzB/R,KAAKgS,iBAIJC,IAEG,MAAMC,EAAWlS,KAAK+R,kBACtB,IAAK,IAAII,EAAID,EAAS3P,OAAS,EAAG4P,GAAK,EAAGA,IAOtC,GAAID,EAASC,GAAGC,2BAA6B,EAAG,CAC5CF,EAASC,GAAGE,eAAeC,KAAKL,GAChC,QAIZjS,KAAKoM,UAAYnG,EAKrB,cACIjG,KAAK+N,UAOT,IAAII,GAEAnO,KAAKyD,OAAO0K,GAEPnO,KAAKuS,cACNvS,KAAKoM,UAAUjF,KAAKqL,iBAAiB,UAAWxS,KAAKgS,kBACrDhS,KAAKuS,aAAc,GAEvBvS,KAAK+R,kBAAkBU,KAAKtE,GAOhC,OAAOA,GAEH,MAAM5K,EAAQvD,KAAK+R,kBAAkBvO,QAAQ2K,GACzC5K,GAAS,GACTvD,KAAK+R,kBAAkBW,OAAOnP,EAAO,GAGH,IAAlCvD,KAAK+R,kBAAkBxP,QACvBvC,KAAK+N,UAQb,UACQ/N,KAAKuS,cACLvS,KAAKoM,UAAUjF,KAAKwL,oBAAoB,UAAW3S,KAAKgS,kBACxDhS,KAAKuS,aAAc,I,OAI/BT,EAA0BhO,KAAO,SAA2CC,GAAK,OAAO,IAAKA,GAAK+N,GAA2B,KAAgB,OAC7IA,EAA0B5B,MAAQ,KAA0B,CAAExK,MAAOoM,EAA2BxM,QAAS,SAAUvB,GAAK,OAAO+N,EAA0BhO,KAAKC,IAAOoM,WAAY,SAK9J2B,EAA0B1B,gBAAkB,aAAmB,CAAE9K,QAAS,WAA+C,OAAO,IAAIwM,EAA0B,aAAS,OAAepM,MAAOoM,EAA2B3B,WAAY,S,oBAiEjPyC,EAIF,YAAY3M,GACRjG,KAAKoM,UAAYnG,EAKrB,cACQjG,KAAK6S,mBAAqB7S,KAAK6S,kBAAkBlP,YACjD3D,KAAK6S,kBAAkBlP,WAAWC,YAAY5D,KAAK6S,mBAS3D,sBAII,OAHK7S,KAAK6S,mBACN7S,KAAK8S,mBAEF9S,KAAK6S,kBAQhB,mBAEI,MAEME,EAAqB/S,KAAKoM,UAAU4G,uBAFnB,yBAIvB,IAAK,IAAIb,EAAI,EAAGA,EAAIY,EAAmBxQ,OAAQ4P,IACxBY,EAAmBZ,GAAc,WAAEvO,YAAYmP,EAAmBZ,IAGzF,MAAMc,EAAYjT,KAAKoM,UAAU9F,cAAc,OAC/C2M,EAAUxG,UAAUC,IATG,yBAUvB1M,KAAKoM,UAAUjF,KAAKrE,YAAYmQ,GAChCjT,KAAK6S,kBAAoBI,G,OAGjCL,EAAiB9O,KAAO,SAAkCC,GAAK,OAAO,IAAKA,GAAK6O,GAAkB,KAAgB,OAClHA,EAAiB1C,MAAQ,KAA0B,CAAExK,MAAOkN,EAAkBtN,QAAS,SAAUvB,GAAK,OAAO6O,EAAiB9O,KAAKC,IAAOoM,WAAY,SAKnIyC,EAAiBxC,gBAAkB,aAAmB,CAAE9K,QAAS,WAAsC,OAAO,IAAIsN,EAAiB,aAAS,OAAelN,MAAOkN,EAAkBzC,WAAY,S,MAmDnN,MAAM,EAWF,YAAY+C,EAAeC,EAAOC,EAAOvF,EAASD,EAASyF,EAAqBjH,EAAWkH,GACvFtT,KAAKkT,cAAgBA,EACrBlT,KAAKmT,MAAQA,EACbnT,KAAKoT,MAAQA,EACbpT,KAAK6N,QAAUA,EACf7N,KAAK4N,QAAUA,EACf5N,KAAKqT,oBAAsBA,EAC3BrT,KAAKoM,UAAYA,EACjBpM,KAAKsT,UAAYA,EACjBtT,KAAKuT,iBAAmB,KACxBvT,KAAKwT,eAAiB,IAAIC,EAAA,EAC1BzT,KAAK0T,aAAe,IAAID,EAAA,EACxBzT,KAAK2T,aAAe,IAAIF,EAAA,EACxBzT,KAAK4T,iBAAmBC,EAAA,EAAaC,MACrC9T,KAAK+T,sBAIJ9B,GAAUjS,KAAKwT,eAAelB,KAAKL,GACpCjS,KAAKgU,yBAA2B,IAAIC,EAAA,EAInCC,IAEG,MAAMC,EAAenU,KAAKqS,eAAejI,UAAU8J,GAEnD,OADAlU,KAAKoS,6BACE,KAIH+B,EAAaxF,cACb3O,KAAKoS,gCAMbpS,KAAKqS,eAAiB,IAAIoB,EAAA,EAI1BzT,KAAKoS,2BAA6B,EAC9BvE,EAAQyC,iBACRtQ,KAAKoU,gBAAkBvG,EAAQyC,eAC/BtQ,KAAKoU,gBAAgBlU,OAAOF,OAEhCA,KAAKqU,kBAAoBxG,EAAQyG,iBAMrC,qBACI,OAAOtU,KAAKoT,MAMhB,sBACI,OAAOpT,KAAKuT,iBAQhB,kBACI,OAAOvT,KAAKmT,MAShB,OAAO/R,GAEH,IAAImT,EAAevU,KAAKkT,cAAchT,OAAOkB,GAiD7C,OAhDIpB,KAAKqU,mBACLrU,KAAKqU,kBAAkBnU,OAAOF,OAG7BA,KAAKmT,MAAMqB,eAAiBxU,KAAKyU,qBAClCzU,KAAKyU,oBAAoB3R,YAAY9C,KAAKmT,OAE9CnT,KAAK0U,uBACL1U,KAAK2U,qBACL3U,KAAK4U,0BACD5U,KAAKoU,iBACLpU,KAAKoU,gBAAgBS,SAKzB7U,KAAK4N,QAAQkH,SACRC,eACA5K,KAAK,OAAA6K,EAAA,GAAK,IACV5K,UAAU,KAKPpK,KAAKD,eACLC,KAAK0O,mBAIb1O,KAAKiV,sBAAqB,GACtBjV,KAAK6N,QAAQ2C,aACbxQ,KAAKkV,kBAELlV,KAAK6N,QAAQ0C,YACbvQ,KAAKmV,eAAenV,KAAKoT,MAAOpT,KAAK6N,QAAQ0C,YAAY,GAG7DvQ,KAAK0T,aAAapB,OAElBtS,KAAKqT,oBAAoB3G,IAAI1M,MAGzBA,KAAK6N,QAAQ6C,qBAAuB1Q,KAAKsT,YACzCtT,KAAK4T,iBAAmB5T,KAAKsT,UAAUlJ,UAAU,IAG3CpK,KAAK0D,YAER6Q,EAMX,SACI,IAAKvU,KAAKD,cACN,OAEJC,KAAKoV,iBAILpV,KAAKiV,sBAAqB,GACtBjV,KAAKqU,mBAAqBrU,KAAKqU,kBAAkBjU,QACjDJ,KAAKqU,kBAAkBjU,SAEvBJ,KAAKoU,iBACLpU,KAAKoU,gBAAgBpG,UAGzB,MAAMqH,EAAmBrV,KAAKkT,cAAc9S,SAU5C,OARAJ,KAAK2T,aAAarB,OAElBtS,KAAKqT,oBAAoB5P,OAAOzD,MAGhCA,KAAKsV,2BAELtV,KAAK4T,iBAAiBjF,cACf0G,EAMX,UAEI,MAAME,EAAavV,KAAKD,cACpBC,KAAKqU,mBACLrU,KAAKqU,kBAAkB3Q,UAE3B1D,KAAKwV,yBACLxV,KAAKoV,iBACLpV,KAAK4T,iBAAiBjF,cACtB3O,KAAKqT,oBAAoB5P,OAAOzD,MAChCA,KAAKkT,cAAcxP,UACnB1D,KAAK0T,aAAa+B,WAClBzV,KAAKwT,eAAeiC,WACpBzV,KAAKqS,eAAeoD,WAChBzV,KAAKmT,OAASnT,KAAKmT,MAAMxP,aACzB3D,KAAKmT,MAAMxP,WAAWC,YAAY5D,KAAKmT,OACvCnT,KAAKmT,MAAQ,MAEjBnT,KAAKyU,oBAAsBzU,KAAKoT,MAAQ,KACpCmC,GACAvV,KAAK2T,aAAarB,OAEtBtS,KAAK2T,aAAa8B,WAMtB,cACI,OAAOzV,KAAKkT,cAAcnT,cAM9B,gBACI,OAAOC,KAAKwT,eAAeuB,eAM/B,cACI,OAAO/U,KAAK0T,aAAaqB,eAM7B,cACI,OAAO/U,KAAK2T,aAAaoB,eAM7B,gBACI,OAAO/U,KAAKgU,yBAMhB,YACI,OAAOhU,KAAK6N,QAMhB,iBACQ7N,KAAKqU,mBACLrU,KAAKqU,kBAAkBqB,QAQ/B,uBAAuBC,GACfA,IAAa3V,KAAKqU,oBAGlBrU,KAAKqU,mBACLrU,KAAKqU,kBAAkB3Q,UAE3B1D,KAAKqU,kBAAoBsB,EACrB3V,KAAKD,gBACL4V,EAASzV,OAAOF,MAChBA,KAAK0O,mBAQb,WAAWkH,GACP5V,KAAK6N,QAAU+C,OAAOiF,OAAO,GAAI7V,KAAK6N,QAAS+H,GAC/C5V,KAAK2U,qBAOT,aAAamB,GACT9V,KAAK6N,QAAU+C,OAAOiF,OAAO,GAAI7V,KAAK6N,QAAS,CAAEkI,UAAWD,IAC5D9V,KAAK4U,0BAOT,cAAcoB,GACNhW,KAAKoT,OACLpT,KAAKmV,eAAenV,KAAKoT,MAAO4C,GAAS,GAQjD,iBAAiBA,GACThW,KAAKoT,OACLpT,KAAKmV,eAAenV,KAAKoT,MAAO4C,GAAS,GAOjD,eAEI,MAAMD,EAAY/V,KAAK6N,QAAQkI,UAC/B,OAAKA,EAGuB,iBAAdA,EAAyBA,EAAYA,EAAUnQ,MAFlD,MASf,qBAAqB+P,GACbA,IAAa3V,KAAKoU,kBAGtBpU,KAAKwV,yBACLxV,KAAKoU,gBAAkBuB,EACnB3V,KAAKD,gBACL4V,EAASzV,OAAOF,MAChB2V,EAASd,WAQjB,0BACI7U,KAAKmT,MAAMjM,aAAa,MAAOlH,KAAKiW,gBAOxC,qBACI,IAAKjW,KAAKoT,MACN,OAGJ,MAAM7M,EAAQvG,KAAKoT,MAAM7M,MACzBA,EAAMiH,MAAQ,YAAoBxN,KAAK6N,QAAQL,OAC/CjH,EAAM+G,OAAS,YAAoBtN,KAAK6N,QAAQP,QAChD/G,EAAM2P,SAAW,YAAoBlW,KAAK6N,QAAQqI,UAClD3P,EAAM4P,UAAY,YAAoBnW,KAAK6N,QAAQsI,WACnD5P,EAAM6P,SAAW,YAAoBpW,KAAK6N,QAAQuI,UAClD7P,EAAM8P,UAAY,YAAoBrW,KAAK6N,QAAQwI,WAQvD,qBAAqBC,GACjBtW,KAAKoT,MAAM7M,MAAMgQ,cAAgBD,EAAgB,OAAS,OAO9D,kBAGItW,KAAKuT,iBAAmBvT,KAAKoM,UAAU9F,cAAc,OACrDtG,KAAKuT,iBAAiB9G,UAAUC,IAAI,wBAChC1M,KAAK6N,QAAQ4C,eACbzQ,KAAKmV,eAAenV,KAAKuT,iBAAkBvT,KAAK6N,QAAQ4C,eAAe,GAIxDzQ,KAAKmT,MAAoB,cAAEqD,aAAaxW,KAAKuT,iBAAkBvT,KAAKmT,OAGvFnT,KAAKuT,iBAAiBf,iBAAiB,QAASxS,KAAK+T,uBAEhB,oBAA1B0C,sBACPzW,KAAK4N,QAAQ8I,kBAAkB,KAI3BD,sBAAsB,KAIdzW,KAAKuT,kBACLvT,KAAKuT,iBAAiB9G,UAAUC,IAvB3B,oCA6BjB1M,KAAKuT,iBAAiB9G,UAAUC,IA7Bf,gCAyCzB,uBACQ1M,KAAKmT,MAAMwD,aACQ3W,KAAKmT,MAAiB,WAAErQ,YAAY9C,KAAKmT,OAOpE,iBAEI,IAKIyD,EALAC,EAAmB7W,KAAKuT,iBAC5B,IAAKsD,EACD,OAKJ,IAAIC,EAAe,KAKXD,IACAA,EAAiBlE,oBAAoB,QAAS3S,KAAK+T,uBACnD8C,EAAiBlE,oBAAoB,gBAAiBmE,GAClDD,EAAiBlT,YACjBkT,EAAiBlT,WAAWC,YAAYiT,IAM5C7W,KAAKuT,kBAAoBsD,IACzB7W,KAAKuT,iBAAmB,MAExBvT,KAAK6N,QAAQ4C,eACbzQ,KAAKmV,eAAe,EAAuCnV,KAAK6N,QAAQ4C,eAAe,GAE3FsG,aAAaH,IAEjBC,EAAiBpK,UAAUhJ,OAAO,gCAClCzD,KAAK4N,QAAQ8I,kBAAkB,KAI3B,EAAsClE,iBAAiB,gBAAiBsE,KAI5ED,EAAiBtQ,MAAMgQ,cAAgB,OAIvCK,EAAY5W,KAAK4N,QAAQ8I,kBAAkB,IAGrCM,WAAWF,EAAc,MAUnC,eAAehI,EAASmI,EAAYC,GAEhC,MAAMzK,EAAYqC,EAAQrC,UAC1B,YAAYwK,GAAY5T,QAIxB8T,IAGQA,IACAD,EAAQzK,EAAUC,IAAIyK,GAAY1K,EAAUhJ,OAAO0T,MAS/D,2BAIInX,KAAK4N,QAAQ8I,kBAAkB,KAQ3B,MAAMvC,EAAenU,KAAK4N,QAAQkH,SAC7BC,eACA5K,KAAK,OAAAiN,EAAA,GAAU,OAAAC,EAAA,GAAMrX,KAAK0T,aAAc1T,KAAK2T,gBAC7CvJ,UAAU,KAMNpK,KAAKoT,OAAUpT,KAAKmT,OAAwC,IAA/BnT,KAAKoT,MAAMkE,SAAS/U,SAC9CvC,KAAKoT,OAASpT,KAAK6N,QAAQ0C,YAC3BvQ,KAAKmV,eAAenV,KAAKoT,MAAOpT,KAAK6N,QAAQ0C,YAAY,GAEzDvQ,KAAKmT,OAASnT,KAAKmT,MAAMqB,gBACzBxU,KAAKyU,oBAAsBzU,KAAKmT,MAAMqB,cACtCxU,KAAKyU,oBAAoB7Q,YAAY5D,KAAKmT,QAE9CgB,EAAaxF,mBAU7B,yBAEI,MAAM2B,EAAiBtQ,KAAKoU,gBACxB9D,IACAA,EAAetC,UACXsC,EAAelQ,QACfkQ,EAAelQ,WA2I/B,MAAMmX,EAAmB,8CAQzB,MAAM,EAQF,YAAYC,EAAaxL,EAAgBI,EAAWqL,EAAWC,GAC3D1X,KAAKgM,eAAiBA,EACtBhM,KAAKoM,UAAYA,EACjBpM,KAAKyX,UAAYA,EACjBzX,KAAK0X,kBAAoBA,EAIzB1X,KAAK2X,qBAAuB,CAAEnK,MAAO,EAAGF,OAAQ,GAIhDtN,KAAK4X,WAAY,EAIjB5X,KAAK6X,UAAW,EAIhB7X,KAAK8X,gBAAiB,EAItB9X,KAAK+X,wBAAyB,EAI9B/X,KAAKgY,iBAAkB,EAIvBhY,KAAKiY,gBAAkB,EAIvBjY,KAAKkY,aAAe,GAIpBlY,KAAKmY,oBAAsB,GAI3BnY,KAAKoY,iBAAmB,IAAI3E,EAAA,EAI5BzT,KAAKqY,oBAAsBxE,EAAA,EAAaC,MAIxC9T,KAAKsY,SAAW,EAIhBtY,KAAKuY,SAAW,EAIhBvY,KAAKwY,qBAAuB,GAI5BxY,KAAKyY,gBAAkBzY,KAAKoY,iBAAiBrD,eAC7C/U,KAAK0Y,UAAUlB,GAMnB,gBACI,OAAOxX,KAAKmY,oBAOhB,OAAOhK,GACH,GAAInO,KAAKiO,aAAeE,IAAenO,KAAKiO,YACxC,MAAMtO,MAAM,4DAEhBK,KAAK2Y,qBACLxK,EAAWyK,YAAYnM,UAAUC,IAAI6K,GACrCvX,KAAKiO,YAAcE,EACnBnO,KAAK6Y,aAAe1K,EAAWyK,YAC/B5Y,KAAKoT,MAAQjF,EAAWuB,eACxB1P,KAAKkB,aAAc,EACnBlB,KAAK8Y,kBAAmB,EACxB9Y,KAAK+Y,cAAgB,KACrB/Y,KAAKqY,oBAAoB1J,cACzB3O,KAAKqY,oBAAsBrY,KAAKgM,eAAegN,SAAS5O,UAAU,KAO9DpK,KAAK8Y,kBAAmB,EACxB9Y,KAAK0V,UAkBb,QAEI,GAAI1V,KAAKkB,cAAgBlB,KAAKyX,UAAUwB,UACpC,OAKJ,IAAKjZ,KAAK8Y,kBAAoB9Y,KAAKgY,iBAAmBhY,KAAK+Y,cAEvD,YADA/Y,KAAKkZ,sBAGTlZ,KAAKmZ,qBACLnZ,KAAKoZ,6BACLpZ,KAAKqZ,0BAILrZ,KAAKsZ,cAAgBtZ,KAAKuZ,2BAC1BvZ,KAAKwZ,YAAcxZ,KAAKyZ,iBACxBzZ,KAAK0Z,aAAe1Z,KAAKoT,MAAMzD,wBAE/B,MAAMgK,EAAa3Z,KAAKwZ,YAElB/J,EAAczP,KAAK0Z,aAEnBE,EAAe5Z,KAAKsZ,cAGpBO,EAAe,GAGrB,IAAIC,EAGJ,IAAK,IAAIC,KAAO/Z,KAAKmY,oBAAqB,CAGtC,IAAI6B,EAAcha,KAAKia,gBAAgBN,EAAYI,GAK/CG,EAAela,KAAKma,iBAAiBH,EAAavK,EAAasK,GAG/DK,EAAapa,KAAKqa,eAAeH,EAAczK,EAAamK,EAAcG,GAE9E,GAAIK,EAAWE,2BAGX,OAFAta,KAAK4X,WAAY,OACjB5X,KAAKua,eAAeR,EAAKC,GAKzBha,KAAKwa,8BAA8BJ,EAAYF,EAAcN,GAG7DC,EAAapH,KAAK,CACd7L,SAAUmT,EACV/I,OAAQgJ,EACRvK,cACAgL,gBAAiBza,KAAK0a,0BAA0BV,EAAaD,OAOhED,GAAYA,EAASM,WAAWO,YAAcP,EAAWO,eAC1Db,EAAW,CAAEM,aAAYF,eAAcF,cAAapT,SAAUmT,EAAKtK,gBAK3E,GAAIoK,EAAatX,OAAQ,CAErB,IAAIqY,EAAU,KAEVC,GAAa,EACjB,IAAK,MAAMC,KAAOjB,EAAc,CAE5B,MAAMkB,EAAQD,EAAIL,gBAAgBjN,MAAQsN,EAAIL,gBAAgBnN,QAAUwN,EAAIlU,SAASoU,QAAU,GAC3FD,EAAQF,IACRA,EAAYE,EACZH,EAAUE,GAKlB,OAFA9a,KAAK4X,WAAY,OACjB5X,KAAKua,eAAe,EAA6B3T,SAAU,EAA6BoK,QAK5F,GAAIhR,KAAK6X,SAIL,OAFA7X,KAAK4X,WAAY,OACjB5X,KAAKua,eAAe,EAA8B3T,SAAU,EAA8BoT,aAK9Fha,KAAKua,eAAe,EAA8B3T,SAAU,EAA8BoT,aAK9F,SACIha,KAAKmZ,qBACLnZ,KAAK+Y,cAAgB,KACrB/Y,KAAKib,oBAAsB,KAC3Bjb,KAAKqY,oBAAoB1J,cAM7B,UACQ3O,KAAKkB,cAKLlB,KAAK6Y,cACLqC,EAAalb,KAAK6Y,aAAatS,MAAO,CAClCU,IAAK,GACLiF,KAAM,GACNiD,MAAO,GACPD,OAAQ,GACR5B,OAAQ,GACRE,MAAO,GACP2N,WAAY,GACZC,eAAgB,KAGpBpb,KAAKoT,OACLpT,KAAKoZ,6BAELpZ,KAAKiO,aACLjO,KAAKiO,YAAY2K,YAAYnM,UAAUhJ,OAAO8T,GAElDvX,KAAKI,SACLJ,KAAKoY,iBAAiB3C,WACtBzV,KAAKiO,YAAcjO,KAAK6Y,aAAe,KACvC7Y,KAAKkB,aAAc,GAQvB,sBACI,IAAKlB,KAAKkB,eAAiBlB,KAAKyX,WAAazX,KAAKyX,UAAUwB,WAAY,CACpEjZ,KAAKwZ,YAAcxZ,KAAKyZ,iBACxBzZ,KAAK0Z,aAAe1Z,KAAKoT,MAAMzD,wBAC/B3P,KAAKsZ,cAAgBtZ,KAAKuZ,2BAE1B,MAAM8B,EAAerb,KAAK+Y,eAAiB/Y,KAAKmY,oBAAoB,GAE9D6B,EAAcha,KAAKia,gBAAgBja,KAAKwZ,YAAa6B,GAC3Drb,KAAKua,eAAec,EAAcrB,IAY1C,yBAAyBsB,GAErB,OADA,KAA0BpD,aAAeoD,EAClC,KASX,cAAcC,GAQV,OAPA,KAA0BpD,oBAAsBoD,GAGyC,IAArFA,EAAU/X,QAA2B,KAAwC,iBAC7E,KAA0BuV,cAAgB,MAE9C,KAA0BJ,qBACnB,KASX,mBAAmBhS,GAEf,OADA,KAA0BsR,gBAAkBtR,EACrC,KASX,uBAAuB6U,GAAqB,GAExC,OADA,KAA0BzD,uBAAyByD,EAC5C,KASX,kBAAkBC,GAAgB,GAE9B,OADA,KAA0B3D,eAAiB2D,EACpC,KASX,SAASC,GAAU,GAEf,OADA,KAA0B7D,SAAW6D,EAC9B,KAWX,mBAAmBC,GAAW,GAE1B,OADA,KAA0B3D,gBAAkB2D,EACrC,KAYX,UAAU3K,GAEN,OADA,KAA0B4K,QAAU5K,EAC7B,KASX,mBAAmB6K,GAEf,OADA,KAA0BvD,SAAWuD,EAC9B,KASX,mBAAmBA,GAEf,OADA,KAA0BtD,SAAWsD,EAC9B,KAaX,sBAAsBC,GAElB,OADA,KAA0BC,yBAA2BD,EAC9C,KASX,gBAAgBnC,EAAYI,GAExB,IAAIiC,EAcAC,EAbJ,GAAmB,UAAflC,EAAI3I,QAGJ4K,EAAIrC,EAAWzN,KAAQyN,EAAWnM,MAAQ,MAEzC,CAED,MAAM0O,EAASlc,KAAKmc,SAAWxC,EAAWxK,MAAQwK,EAAWzN,KAEvDkQ,EAAOpc,KAAKmc,SAAWxC,EAAWzN,KAAOyN,EAAWxK,MAC1D6M,EAAmB,SAAfjC,EAAI3I,QAAqB8K,EAASE,EAU1C,MAAO,CAAEJ,IAAGC,EALRA,EADe,UAAflC,EAAI1I,QACAsI,EAAW1S,IAAO0S,EAAWrM,OAAS,EAGvB,OAAfyM,EAAI1I,QAAmBsI,EAAW1S,IAAM0S,EAAWzK,QAa/D,iBAAiB8K,EAAavK,EAAasK,GAIvC,IAAIsC,EAWAC,EAQJ,OAjBID,EADgB,UAAhBtC,EAAIzI,UACa7B,EAAYjC,MAAQ,EAEf,UAAjBuM,EAAIzI,SACOtR,KAAKmc,UAAY1M,EAAYjC,MAAQ,EAGrCxN,KAAKmc,SAAW,GAAK1M,EAAYjC,MAW9C,CACHwO,EAAGhC,EAAYgC,EAAIK,EACnBJ,EAAGjC,EAAYiC,GARfK,EADgB,UAAhBvC,EAAIxI,UACa9B,EAAYnC,OAAS,EAGN,OAAhByM,EAAIxI,SAAoB,GAAK9B,EAAYnC,SAiBjE,eAAeiP,EAAOtL,EAAS9D,EAAUvG,GACrC,IAAI,EAAEoV,EAAC,EAAEC,GAAMM,EAEXrL,EAAUlR,KAAKwc,WAAW5V,EAAU,KAEpCuK,EAAUnR,KAAKwc,WAAW5V,EAAU,KAEpCsK,IACA8K,GAAK9K,GAELC,IACA8K,GAAK9K,GAIT,IAIIsL,EAAc,EAAIR,EAElBS,EAAkBT,EAAIhL,EAAQ3D,OAAUH,EAASG,OAGjDqP,EAAe3c,KAAK4c,mBAAmB3L,EAAQzD,MAThC,EAAIwO,EAEFA,EAAI/K,EAAQzD,MAASL,EAASK,OAS/CqP,EAAgB7c,KAAK4c,mBAAmB3L,EAAQ3D,OAAQmP,EAAaC,GAErE/B,EAAcgC,EAAeE,EACjC,MAAO,CACHlC,cACAL,2BAA6BrJ,EAAQzD,MAAQyD,EAAQ3D,SAAYqN,EACjEmC,yBAA0BD,IAAkB5L,EAAQ3D,OACpDyP,2BAA4BJ,GAAgB1L,EAAQzD,OAW5D,8BAA8BsN,EAAKyB,EAAOpP,GACtC,GAAInN,KAAK+X,uBAAwB,CAE7B,MAAMiF,EAAkB7P,EAAS+B,OAASqN,EAAMN,EAE1CgB,EAAiB9P,EAASgC,MAAQoN,EAAMP,EAExC7F,EAAYnW,KAAKiO,YAAYiP,YAAY/G,UAEzCD,EAAWlW,KAAKiO,YAAYiP,YAAYhH,SAKxCiH,EAAgBrC,EAAIiC,4BACT,MAAZ7G,GAAoBA,GAAY+G,EACrC,OALoBnC,EAAIgC,0BACN,MAAb3G,GAAqBA,GAAa6G,IAIjBG,EAE1B,OAAO,EAcX,qBAAqBC,EAAOnM,EAASzC,GAIjC,GAAIxO,KAAKib,qBAAuBjb,KAAKgY,gBACjC,MAAO,CACHgE,EAAGoB,EAAMpB,EAAIhc,KAAKib,oBAAoBe,EACtCC,EAAGmB,EAAMnB,EAAIjc,KAAKib,oBAAoBgB,GAI9C,MAAM9O,EAAWnN,KAAKsZ,cAIhB+D,EAAgB9T,KAAK+T,IAAIF,EAAMpB,EAAI/K,EAAQzD,MAAQL,EAASgC,MAAO,GAEnEoO,EAAiBhU,KAAK+T,IAAIF,EAAMnB,EAAIhL,EAAQ3D,OAASH,EAAS+B,OAAQ,GAEtEsO,EAAcjU,KAAK+T,IAAInQ,EAASlG,IAAMuH,EAAevH,IAAMmW,EAAMnB,EAAG,GAEpEwB,EAAelU,KAAK+T,IAAInQ,EAASjB,KAAOsC,EAAetC,KAAOkR,EAAMpB,EAAG,GAG7E,IAAI0B,EAAQ,EAERC,EAAQ,EAiBZ,OADA3d,KAAKib,oBAAsB,CAAEe,EAXzB0B,EADAzM,EAAQzD,OAASL,EAASK,MAClBiQ,IAAiBJ,EAGjBD,EAAMpB,EAAIhc,KAAKiY,gBAAmB9K,EAASjB,KAAOsC,EAAetC,KAAQkR,EAAMpB,EAAI,EAQxDC,EALnC0B,EADA1M,EAAQ3D,QAAUH,EAASG,OACnBkQ,IAAgBD,EAGhBH,EAAMnB,EAAIjc,KAAKiY,gBAAmB9K,EAASlG,IAAMuH,EAAevH,IAAOmW,EAAMnB,EAAI,GAGtF,CACHD,EAAGoB,EAAMpB,EAAI0B,EACbzB,EAAGmB,EAAMnB,EAAI0B,GAUrB,eAAe/W,EAAUoT,GAYrB,GAXAha,KAAK4d,oBAAoBhX,GACzB5G,KAAK6d,yBAAyB7D,EAAapT,GAC3C5G,KAAK8d,sBAAsB9D,EAAapT,GACpCA,EAAS2J,YACTvQ,KAAK+d,iBAAiBnX,EAAS2J,YAGnCvQ,KAAK+Y,cAAgBnS,EAIjB5G,KAAKoY,iBAAiB4F,UAAUzb,OAAQ,CAExC,MAAMmP,EAA2B1R,KAAKie,uBAEhCC,EAAc,IAAI1M,EAA+B5K,EAAU8K,GACjE1R,KAAKoY,iBAAiB9F,KAAK4L,GAE/Ble,KAAK8Y,kBAAmB,EAQ5B,oBAAoBlS,GAChB,IAAK5G,KAAK+b,yBACN,OAGJ,MAAMoC,EAA8Bne,KAAkB,aAAEoe,iBAAiBpe,KAAK+b,0BAE9E,IAAIsC,EAEAC,EAAU1X,EAAS2K,SAEnB8M,EADsB,WAAtBzX,EAAS0K,SACC,SAELtR,KAAKmc,SACsB,UAAtBvV,EAAS0K,SAAuB,QAAU,OAGpB,UAAtB1K,EAAS0K,SAAuB,OAAS,QAEvD,IAAK,IAAIa,EAAI,EAAGA,EAAIgM,EAAS5b,OAAQ4P,IACjCgM,EAAShM,GAAG5L,MAAMgY,gBAAkB,GAAGF,KAAWC,IAa1D,0BAA0BtN,EAAQpK,GAE9B,MAAMuG,EAAWnN,KAAKsZ,cAEhBkF,EAAQxe,KAAKmc,SAEnB,IAAI7O,EAEArG,EAEAiI,EAqCA1B,EAEAtB,EAEAiD,EAxCJ,GAA0B,QAAtBvI,EAAS2K,SAGTjE,EAASH,EAASG,QADlBrG,EAAM+J,EAAOiL,GACoBjc,KAAKiY,qBAErC,GAA0B,WAAtBrR,EAAS2K,SAKdjE,EAASH,EAASG,QADlB4B,EAAS/B,EAASG,OAAS0D,EAAOiL,EAA2B,EAAvBjc,KAAKiY,iBACPjY,KAAKiY,oBAExC,CAMD,MAAMwG,EAAiClV,KAAKC,IAAI2D,EAAS+B,OAAS8B,EAAOiL,EAAI9O,EAASlG,IAAK+J,EAAOiL,GAE5FyC,EAAiB1e,KAAK2X,qBAAqBrK,OAEjDrG,EAAM+J,EAAOiL,EAAIwC,GADjBnR,EAA0C,EAAjCmR,GAEIC,IAAmB1e,KAAK8Y,mBAAqB9Y,KAAK8X,iBAC3D7Q,EAAM+J,EAAOiL,EAAKyC,EAAiB,GAiB3C,GAR2D,QAAtB9X,EAAS0K,WAAuBkN,GAC1C,UAAtB5X,EAAS0K,UAAwBkN,EAQlCrP,EAAQhC,EAASK,MAAQwD,EAAOgL,EAAIhc,KAAKiY,gBACzCzK,EAAQwD,EAAOgL,EAAIhc,KAAKiY,qBAEvB,GAhBuD,UAAtBrR,EAAS0K,WAAyBkN,GAC7C,QAAtB5X,EAAS0K,UAAsBkN,EAgBhCtS,EAAO8E,EAAOgL,EACdxO,EAAQL,EAASgC,MAAQ6B,EAAOgL,MAE/B,CAMD,MAAMyC,EAAiClV,KAAKC,IAAI2D,EAASgC,MAAQ6B,EAAOgL,EAAI7O,EAASjB,KAAM8E,EAAOgL,GAE5F2C,EAAgB3e,KAAK2X,qBAAqBnK,MAEhDtB,EAAO8E,EAAOgL,EAAIyC,GADlBjR,EAAyC,EAAjCiR,GAEIE,IAAkB3e,KAAK8Y,mBAAqB9Y,KAAK8X,iBACzD5L,EAAO8E,EAAOgL,EAAK2C,EAAgB,GAG3C,MAAO,CAAE1X,IAAK,EAA0BiF,KAAM,EAA2BgD,OAAQ,EAA6BC,MAAO,EAA4B3B,QAAOF,UAW5J,sBAAsB0D,EAAQpK,GAE1B,MAAM6T,EAAkBza,KAAK0a,0BAA0B1J,EAAQpK,GAG1D5G,KAAK8Y,kBAAqB9Y,KAAK8X,iBAChC2C,EAAgBnN,OAAS/D,KAAKC,IAAIiR,EAAgBnN,OAAQtN,KAAK2X,qBAAqBrK,QACpFmN,EAAgBjN,MAAQjE,KAAKC,IAAIiR,EAAgBjN,MAAOxN,KAAK2X,qBAAqBnK,QAGtF,MAAMoR,EAAS,GACf,GAAI5e,KAAK6e,oBACLD,EAAO3X,IAAM2X,EAAO1S,KAAO,IAC3B0S,EAAO1P,OAAS0P,EAAOzP,MAAQ,GAC/ByP,EAAOpR,MAAQoR,EAAOtR,OAAS,WAE9B,CAED,MAAM+I,EAAYrW,KAAKiO,YAAYiP,YAAY7G,UAEzCD,EAAWpW,KAAKiO,YAAYiP,YAAY9G,SAC9CwI,EAAOtR,OAAS,YAAoBmN,EAAgBnN,QACpDsR,EAAO3X,IAAM,YAAoBwT,EAAgBxT,KACjD2X,EAAO1P,OAAS,YAAoBuL,EAAgBvL,QACpD0P,EAAOpR,MAAQ,YAAoBiN,EAAgBjN,OACnDoR,EAAO1S,KAAO,YAAoBuO,EAAgBvO,MAClD0S,EAAOzP,MAAQ,YAAoBsL,EAAgBtL,OAG/CyP,EAAOzD,WADe,WAAtBvU,EAAS0K,SACW,SAGsB,QAAtB1K,EAAS0K,SAAqB,WAAa,aAG/DsN,EAAOxD,eADe,WAAtBxU,EAAS2K,SACe,SAGsB,WAAtB3K,EAAS2K,SAAwB,WAAa,aAEtE8E,IACAuI,EAAOvI,UAAY,YAAoBA,IAEvCD,IACAwI,EAAOxI,SAAW,YAAoBA,IAG9CpW,KAAK2X,qBAAuB8C,EAC5BS,EAAgClb,KAAkB,aAAEuG,MAAOqY,GAO/D,0BACI1D,EAAgClb,KAAkB,aAAEuG,MAAO,CACvDU,IAAK,IACLiF,KAAM,IACNiD,MAAO,IACPD,OAAQ,IACR5B,OAAQ,GACRE,MAAO,GACP2N,WAAY,GACZC,eAAgB,KAQxB,6BACIF,EAAalb,KAAKoT,MAAM7M,MAAO,CAC3BU,IAAK,GACLiF,KAAM,GACNgD,OAAQ,GACRC,MAAO,GACPvI,SAAU,GACVkY,UAAW,KAUnB,yBAAyB9E,EAAapT,GAElC,MAAMgY,EAAS,GACf,GAAI5e,KAAK6e,oBAAqB,CAE1B,MAAMrQ,EAAiBxO,KAAKgM,eAAeQ,4BAC3C0O,EAAa0D,EAAQ5e,KAAK+e,kBAAkBnY,EAAUoT,EAAaxL,IACnE0M,EAAa0D,EAAQ5e,KAAKgf,kBAAkBpY,EAAUoT,EAAaxL,SAGnEoQ,EAAOhY,SAAW,SAQtB,IAAIqY,EAAkB,GAElB/N,EAAUlR,KAAKwc,WAAW5V,EAAU,KAEpCuK,EAAUnR,KAAKwc,WAAW5V,EAAU,KACpCsK,IACA+N,GAAmB,cAAc/N,SAEjCC,IACA8N,GAAmB,cAAc9N,QAErCyN,EAAOE,UAAYG,EAAgBxW,OAI/BzI,KAAK+X,wBAA0B/X,KAAKiO,YAAYiP,YAAY7G,YAC5DuI,EAAOvI,UAAY,IAEnBrW,KAAK+X,wBAA0B/X,KAAKiO,YAAYiP,YAAY9G,WAC5DwI,EAAOxI,SAAW,IAEtB8E,EAAalb,KAAKoT,MAAM7M,MAAOqY,GAUnC,kBAAkBhY,EAAUoT,EAAaxL,GAIrC,IAAIoQ,EAAS,CAAqB3X,IAAK,KAAMiI,OAAQ,MAEjDgL,EAAela,KAAKma,iBAAiBH,EAAaha,KAAK0Z,aAAc9S,GACrE5G,KAAK4X,YACLsC,EAAela,KAAKkf,qBAAqBhF,EAAcla,KAAK0Z,aAAclL,IAG9E,IAAI2Q,EAAwBnf,KAAK0X,kBAAkB0H,sBAAsBzP,wBAAwB1I,IAkBjG,OAbAiT,EAAa+B,GAAKkD,EAGQ,WAAtBvY,EAAS2K,SAKTqN,EAAO1P,OAAS,GAD0BlP,KAAKoM,UAA0B,gBAAEiT,cACtCnF,EAAa+B,EAAIjc,KAAK0Z,aAAapM,YAGxEsR,EAAO3X,IAAM,YAAoBiT,EAAa+B,GAE3C2C,EAUX,kBAAkBhY,EAAUoT,EAAaxL,GAIrC,IAWI8Q,EAXAV,EAAS,CAAqB1S,KAAM,KAAMiD,MAAO,MAEjD+K,EAAela,KAAKma,iBAAiBH,EAAaha,KAAK0Z,aAAc9S,GA0BzE,OAzBI5G,KAAK4X,YACLsC,EAAela,KAAKkf,qBAAqBhF,EAAcla,KAAK0Z,aAAclL,IAgB9C,UAP5B8Q,EADAtf,KAAKmc,SAC2C,QAAtBvV,EAAS0K,SAAqB,OAAS,QAGjB,QAAtB1K,EAAS0K,SAAqB,QAAU,QAOlEsN,EAAOzP,MAAQ,GAD0BnP,KAAKoM,UAA0B,gBAAEmT,aACvCrF,EAAa8B,EAAIhc,KAAK0Z,aAAalM,WAGtEoR,EAAO1S,KAAO,YAAoBgO,EAAa8B,GAE5C4C,EAQX,uBAGI,MAAMY,EAAexf,KAAKyZ,iBAEpBgG,EAAgBzf,KAAKoT,MAAMzD,wBAK3B+P,EAAwB1f,KAAKkY,aAAazO,IAIhDkW,GACWA,EAAWC,gBAAgBjV,cAAcgF,yBAEpD,MAAO,CACHkQ,gBAAiBzQ,EAA4BoQ,EAAcE,GAC3DI,oBAAqBjR,EAA6B2Q,EAAcE,GAChEK,iBAAkB3Q,EAA4BqQ,EAAeC,GAC7DM,qBAAsBnR,EAA6B4Q,EAAeC,IAU1E,mBAAmBnd,KAAW0d,GAC1B,OAAOA,EAAUC,OAAO,CAKvBC,EAAcC,IACJD,EAAe5W,KAAK+T,IAAI8C,EAAiB,GAChD7d,GAOR,2BAOI,MAAMiL,EAA2BxN,KAAKoM,UAA0B,gBAAEmT,YAE5DjS,EAA4BtN,KAAKoM,UAA0B,gBAAEiT,aAE7D7Q,EAAiBxO,KAAKgM,eAAeQ,4BAC3C,MAAO,CACHvF,IAAKuH,EAAevH,IAAMjH,KAAKiY,gBAC/B/L,KAAMsC,EAAetC,KAAOlM,KAAKiY,gBACjC9I,MAAOX,EAAetC,KAAOsB,EAAQxN,KAAKiY,gBAC1C/I,OAAQV,EAAevH,IAAMqG,EAAStN,KAAKiY,gBAC3CzK,MAAOA,EAAS,EAAIxN,KAAKiY,gBACzB3K,OAAQA,EAAU,EAAItN,KAAKiY,iBAQnC,SACI,MAA2C,QAApCjY,KAAKiO,YAAYgI,eAO5B,oBACI,OAAQjW,KAAK+X,wBAA0B/X,KAAK4X,UAShD,WAAWhR,EAAUyZ,GACjB,MAAa,MAATA,EAG2B,MAApBzZ,EAASsK,QAAkBlR,KAAKsY,SAAW1R,EAASsK,QAEpC,MAApBtK,EAASuK,QAAkBnR,KAAKuY,SAAW3R,EAASuK,QAO/D,qBACI,IAAKnR,KAAKmY,oBAAoB5V,OAC1B,MAAM5C,MAAM,yEAIhBK,KAAKmY,oBAAoB9U,QAIzBid,IACIzO,EAA2B,UAAWyO,EAAKlP,SAC3CO,EAAyB,UAAW2O,EAAKjP,SACzCQ,EAA2B,WAAYyO,EAAKhP,UAC5CK,EAAyB,WAAY2O,EAAK/O,YASlD,iBAAiB0F,GACTjX,KAAKoT,OACL,YAAY6D,GAAY5T,QAIxB8T,IACqB,KAAbA,IAAoE,IAAjDnX,KAAKwY,qBAAqBhV,QAAQ2T,KACrDnX,KAAKwY,qBAAqB/F,KAAK0E,GAC/BnX,KAAKoT,MAAM3G,UAAUC,IAAIyK,MAUzC,qBACQnX,KAAKoT,QACLpT,KAAKwY,qBAAqBnV,QAI1B8T,IACInX,KAAKoT,MAAM3G,UAAUhJ,OAAO0T,KAEhCnX,KAAKwY,qBAAuB,IAQpC,iBAEI,MAAMxH,EAAShR,KAAK4b,QACpB,GAAI5K,aAAkB,IAClB,OAAOA,EAAOrG,cAAcgF,wBAEhC,GAAIqB,aAAkBuP,YAClB,OAAOvP,EAAOrB,wBAGlB,MAAMnC,EAAQwD,EAAOxD,OAAS,EAExBF,EAAS0D,EAAO1D,QAAU,EAEhC,MAAO,CACHrG,IAAK+J,EAAOiL,EACZ/M,OAAQ8B,EAAOiL,EAAI3O,EACnBpB,KAAM8E,EAAOgL,EACb7M,MAAO6B,EAAOgL,EAAIxO,EAClBF,SACAE,UAiTZ,SAAS0N,EAAasF,EAAMC,GACxB,IAAK,IAAI3P,KAAO2P,EACRA,EAAOC,eAAe5P,KACtB0P,EAAK1P,GAAO2P,EAAO3P,IAG3B,OAAO0P,EAgBX,MAAMG,EAUF,YAAYC,EAAWC,EAAYrJ,EAAasJ,EAAe7a,EAAU8a,EAAUC,GAI/EhhB,KAAKmY,oBAAsB,GAK3BnY,KAAKqU,kBAAoB,IAAI,EAAkCmD,EAAasJ,EAAe7a,EAAU8a,EAAUC,GAC1GC,wBAAuB,GACvBC,UAAS,GACTC,mBAAmB,GACxBnhB,KAAKohB,qBAAqBR,EAAWC,GAMzC,aACI,MAA2C,QAApC7gB,KAAKiO,YAAYgI,eAM5B,uBACI,OAAOjW,KAAKqU,kBAAkBoE,gBAMlC,gBACI,OAAOzY,KAAKmY,oBAOhB,OAAOhK,GACHnO,KAAKiO,YAAcE,EACnBnO,KAAKqU,kBAAkBnU,OAAOiO,GAC1BnO,KAAKqhB,aACLlT,EAAWmT,aAAathB,KAAKqhB,YAC7BrhB,KAAKqhB,WAAa,MAO1B,UACIrhB,KAAKqU,kBAAkB3Q,UAM3B,SACI1D,KAAKqU,kBAAkBjU,SAQ3B,QACIJ,KAAKqU,kBAAkBqB,QAQ3B,0BACI1V,KAAKqU,kBAAkB6E,sBAS3B,yBAAyBoC,GACrBtb,KAAKqU,kBAAkBkN,yBAAyBjG,GAYpD,qBAAqBsF,EAAWC,EAAY3P,EAASC,GAEjD,MAAMvK,EAAW,IAAImK,EAAuB6P,EAAWC,EAAY3P,EAASC,GAG5E,OAFA,KAA0BgH,oBAAoB1F,KAAK7L,GACnD,KAA0ByN,kBAAkBmN,cAAc,KAA0BrJ,qBAC7E,KASX,cAAcrC,GAUV,OANI,KAA0B7H,YAC1B,KAA0BA,YAAYqT,aAAaxL,GAGnD,KAA0BuL,WAAavL,EAEpC,KASX,YAAY+F,GAER,OADA,KAA0BxH,kBAAkBoN,mBAAmB5F,GACxD,KASX,YAAYA,GAER,OADA,KAA0BxH,kBAAkBqN,mBAAmB7F,GACxD,KAWX,mBAAmBF,GAEf,OADA,KAA0BtH,kBAAkBsN,mBAAmBhG,GACxD,KASX,cAAcJ,GAGV,OAFA,KAA0BpD,oBAAsBoD,EAAUqG,QAC1D,KAA0BvN,kBAAkBmN,cAAc,KAA0BrJ,qBAC7E,KASX,UAAUnH,GAEN,OADA,KAA0BqD,kBAAkBqE,UAAU1H,GAC/C,MA2Cf,MAAM6Q,EAAe,6BAOrB,MAAMC,EACF,cACI9hB,KAAK+hB,aAAe,SACpB/hB,KAAKgiB,WAAa,GAClBhiB,KAAKiiB,cAAgB,GACrBjiB,KAAKkiB,YAAc,GACnBliB,KAAKmiB,aAAe,GACpBniB,KAAKoiB,YAAc,GACnBpiB,KAAKqiB,gBAAkB,GACvBriB,KAAKsiB,OAAS,GACdtiB,KAAKuiB,QAAU,GAMnB,OAAOpU,GAEH,MAAM4B,EAAS5B,EAAW+O,YAC1Bld,KAAKiO,YAAcE,EACfnO,KAAKsiB,SAAWvS,EAAOvC,OACvBW,EAAWqU,WAAW,CAAEhV,MAAOxN,KAAKsiB,SAEpCtiB,KAAKuiB,UAAYxS,EAAOzC,QACxBa,EAAWqU,WAAW,CAAElV,OAAQtN,KAAKuiB,UAEzCpU,EAAWyK,YAAYnM,UAAUC,IAAImV,GACrC7hB,KAAKkB,aAAc,EASvB,IAAI0E,EAAQ,IAIR,OAHA,KAA0Bqc,cAAgB,GAC1C,KAA0BD,WAAapc,EACvC,KAA0Bwc,YAAc,aACjC,KASX,KAAKxc,EAAQ,IAIT,OAHA,KAA0Buc,aAAe,GACzC,KAA0BD,YAActc,EACxC,KAA0Byc,gBAAkB,aACrC,KASX,OAAOzc,EAAQ,IAIX,OAHA,KAA0Boc,WAAa,GACvC,KAA0BC,cAAgBrc,EAC1C,KAA0Bwc,YAAc,WACjC,KASX,MAAMxc,EAAQ,IAIV,OAHA,KAA0Bsc,YAAc,GACxC,KAA0BC,aAAevc,EACzC,KAA0Byc,gBAAkB,WACrC,KAWX,MAAMzc,EAAQ,IAOV,OANI,KAA0BqI,YAC1B,KAA0BA,YAAYuU,WAAW,CAAEhV,MAAO5H,IAG1D,KAA0B0c,OAAS1c,EAEhC,KAWX,OAAOA,EAAQ,IAOX,OANI,KAA0BqI,YAC1B,KAA0BA,YAAYuU,WAAW,CAAElV,OAAQ1H,IAG3D,KAA0B2c,QAAU3c,EAEjC,KAWX,mBAAmBiW,EAAS,IAGxB,OAFA,KAA0B3P,KAAK2P,GAC/B,KAA0BwG,gBAAkB,SACrC,KAWX,iBAAiBxG,EAAS,IAGtB,OAFA,KAA0B5U,IAAI4U,GAC9B,KAA0BuG,YAAc,SACjC,KAOX,QAII,IAAKpiB,KAAKiO,cAAgBjO,KAAKiO,YAAYlO,cACvC,OAGJ,MAAM6e,EAAS5e,KAAKiO,YAAYyB,eAAenJ,MAEzCkc,EAAeziB,KAAKiO,YAAY2K,YAAYrS,MAE5CwJ,EAAS/P,KAAKiO,YAAYiP,YAChC0B,EAAOhY,SAAW5G,KAAK+hB,aACvBnD,EAAO8D,WAA8B,SAAjB3S,EAAOvC,MAAmB,IAAMxN,KAAKkiB,YACzDtD,EAAO+D,UAA8B,SAAlB5S,EAAOzC,OAAoB,IAAMtN,KAAKgiB,WACzDpD,EAAOgE,aAAe5iB,KAAKiiB,cAC3BrD,EAAOiE,YAAc7iB,KAAKmiB,aACL,SAAjBpS,EAAOvC,MACPiV,EAAarH,eAAiB,aAEA,WAAzBpb,KAAKqiB,gBACVI,EAAarH,eAAiB,SAEkB,QAA3Cpb,KAAKiO,YAAYiP,YAAYnH,UAKL,eAAzB/V,KAAKqiB,gBACLI,EAAarH,eAAiB,WAEA,aAAzBpb,KAAKqiB,kBACVI,EAAarH,eAAiB,cAIlCqH,EAAarH,eAAiBpb,KAAKqiB,gBAEvCI,EAAatH,WAA+B,SAAlBpL,EAAOzC,OAAoB,aAAetN,KAAKoiB,YAO7E,UACI,GAAIpiB,KAAKkB,cAAgBlB,KAAKiO,YAC1B,OAGJ,MAAM2Q,EAAS5e,KAAKiO,YAAYyB,eAAenJ,MAEzCuc,EAAS9iB,KAAKiO,YAAY2K,YAE1B6J,EAAeK,EAAOvc,MAC5Buc,EAAOrW,UAAUhJ,OAAOoe,GACxBY,EAAarH,eAAiBqH,EAAatH,WAAayD,EAAO+D,UAC3D/D,EAAOgE,aAAehE,EAAO8D,WAAa9D,EAAOiE,YAAcjE,EAAOhY,SAAW,GACrF5G,KAAKiO,YAAc,KACnBjO,KAAKkB,aAAc,G,kBAqErB6hB,EAOF,YAAY/W,EAAgBI,EAAWqL,EAAWC,GAC9C1X,KAAKgM,eAAiBA,EACtBhM,KAAKoM,UAAYA,EACjBpM,KAAKyX,UAAYA,EACjBzX,KAAK0X,kBAAoBA,EAM7B,SACI,OAAO,IAAIoK,EAWf,YAAY/gB,EAAY6f,EAAWC,GAC/B,OAAO,IAAIF,EAA0BC,EAAWC,EAAY9f,EAAYf,KAAKgM,eAAgBhM,KAAKoM,UAAWpM,KAAKyX,UAAWzX,KAAK0X,mBAOtI,oBAAoB1G,GAChB,OAAO,IAAI,EAAkCA,EAAQhR,KAAKgM,eAAgBhM,KAAKoM,UAAWpM,KAAKyX,UAAWzX,KAAK0X,oB,OAGvHqL,EAAuBjf,KAAO,SAAwCC,GAAK,OAAO,IAAKA,GAAKgf,GAAwB,KAAgB,KAAgB,KAAgB,KAAW,KAAgB,KAAW,KAAgB,KAC1NA,EAAuB7S,MAAQ,KAA0B,CAAExK,MAAOqd,EAAwBzd,QAAS,SAAUvB,GAAK,OAAOgf,EAAuBjf,KAAKC,IAAOoM,WAAY,SAQrJ4S,EAAuB3S,gBAAkB,aAAmB,CAAE9K,QAAS,WAA4C,OAAO,IAAIyd,EAAuB,aAAS,KAAgB,aAAS,KAAW,aAAS,KAAW,aAAS,KAAuBrd,MAAOqd,EAAwB5S,WAAY,S,MAuChT6S,EAAe,E,cAWbC,EAaF,YAAYC,EAAkBxL,EAAmB1V,EAA2BmhB,EAAkB9P,EAAqB+P,EAAWxV,EAASxB,EAAWiX,EAAiB/P,GAC/JtT,KAAKkjB,iBAAmBA,EACxBljB,KAAK0X,kBAAoBA,EACzB1X,KAAKgC,0BAA4BA,EACjChC,KAAKmjB,iBAAmBA,EACxBnjB,KAAKqT,oBAAsBA,EAC3BrT,KAAKojB,UAAYA,EACjBpjB,KAAK4N,QAAUA,EACf5N,KAAKoM,UAAYA,EACjBpM,KAAKqjB,gBAAkBA,EACvBrjB,KAAKsT,UAAYA,EAOrB,OAAOvD,GAEH,MAAMlQ,EAAOG,KAAKsjB,qBAEZC,EAAOvjB,KAAKwjB,mBAAmB3jB,GAE/B4jB,EAAezjB,KAAK0jB,oBAAoBH,GAExCI,EAAgB,IAAItT,EAAcN,GAExC,OADA4T,EAAc5N,UAAY4N,EAAc5N,WAAa/V,KAAKqjB,gBAAgBzd,MACnE,IAAI,EAAW6d,EAAc5jB,EAAM0jB,EAAMI,EAAe3jB,KAAK4N,QAAS5N,KAAKqT,oBAAqBrT,KAAKoM,UAAWpM,KAAKsT,WAOhI,WACI,OAAOtT,KAAKmjB,iBAQhB,mBAAmBtjB,GAEf,MAAM0jB,EAAOvjB,KAAKoM,UAAU9F,cAAc,OAI1C,OAHAid,EAAKK,GAAK,eAAeZ,MACzBO,EAAK9W,UAAUC,IAAI,oBACnB7M,EAAKiD,YAAYygB,GACVA,EAQX,qBAEI,MAAM1jB,EAAOG,KAAKoM,UAAU9F,cAAc,OAE1C,OADAtG,KAAK0X,kBAAkB0H,sBAAsBtc,YAAYjD,GAClDA,EAQX,oBAAoB0jB,GAMhB,OAHKvjB,KAAKiC,UACNjC,KAAKiC,QAAUjC,KAAKojB,UAAUvd,IAAI,MAE/B,IAAI,IAAgB0d,EAAMvjB,KAAKgC,0BAA2BhC,KAAKiC,QAASjC,KAAKojB,Y,OAG5FH,EAAQnf,KAAO,SAAyBC,GAAK,OAAO,IAAKA,GAAKkf,GAAS,KAAgB,GAAwB,KAAgB,GAAmB,KAAgB,KAA2B,KAAgB,GAAyB,KAAgB,GAA4B,KAAgB,KAAW,KAAgB,KAAS,KAAgB,KAAW,KAAgB,KAAiB,KAAgB,IAAU,KAC5ZA,EAAQ/S,MAAQ,KAA0B,CAAExK,MAAOud,EAAS3d,QAAS,SAAUvB,GAAK,OAAOkf,EAAQnf,KAAKC,IAAOoM,WAAY,O,MAwF3H,MAuqBM0T,EAAiD,CACnD5e,QA1oB0C,IAAI,IAAe,yCA2oB7D6e,KAAM,CAAC,GACPC,WAbJ,SAAgE9S,GAC5D,MAAO,IAGDA,EAAQiS,iBAAiBjT,e,kBAgB7B+T,G,OAENA,EAAc5e,KAAO,KAAwB,CAAEnB,KAAM+f,IACrDA,EAAc3e,KAAO,KAAwB,CAAEC,QAAS,SAA+BvB,GAAK,OAAO,IAAKA,GAAKigB,IAAqBC,UAAW,CACrI,EACAJ,GACDK,QAAS,CAAC,CAAC,IAAY,IAAc,KACpC,O,8FC31JR,MAAMC,EACF,YAAYC,GACRpkB,KAAKokB,MAAQA,EAEjB,KAAKC,EAAY5D,GACb,OAAOA,EAAOrW,UAAU,IAAI,EAAeia,EAAYrkB,KAAKokB,SAGpE,MAAM,UAAuBE,EAAA,EACzB,YAAYC,EAAaH,GACrB1jB,MAAM6jB,GACNvkB,KAAKokB,MAAQA,EACbpkB,KAAKwkB,MAAQ,EAEjB,MAAMxI,KACIhc,KAAKwkB,MAAQxkB,KAAKokB,OACpBpkB,KAAKukB,YAAYjS,KAAK0J,I,yCCQlC,MAAMyI,GAAqC,IAAIC,IAK/C,IAAIC,G,eAIEC,EAIF,YAAYnN,GACRzX,KAAKyX,UAAYA,EACjBzX,KAAK6kB,YAAc7kB,KAAKyX,UAAUwB,WAAanS,OAAOge,WAGlDhe,OAAOge,WAAWC,KAAKje,QACvBke,GAUR,WAAWC,GAIP,OAHIjlB,KAAKyX,UAAUyN,QAoC3B,SAA8BD,GAC1B,IAAIR,GAAmCU,IAAIF,GAG3C,IACSN,MACDA,GAAsB1e,SAASK,cAAc,UACzBY,aAAa,OAAQ,YACtBjB,SAAc,KAAEnD,YAAY6hB,KAE/CA,GAAoBS,QACAT,GAA2B,MAC1CU,WAAW,UAAUJ,wBAA6B,GACvDR,GAAmC/X,IAAIuY,IAG/C,MAAOK,GACHC,QAAQra,MAAMoa,IApDVE,CAAqBP,GAElBjlB,KAAK6kB,YAAYI,I,OAGhCL,EAAa9gB,KAAO,SAA8BC,GAAK,OAAO,IAAKA,GAAK6gB,GAAc,KAAgB,OACtGA,EAAa1U,MAAQ,KAA0B,CAAExK,MAAOkf,EAActf,QAAS,SAAUvB,GAAK,OAAO6gB,EAAa9gB,KAAKC,IAAOoM,WAAY,SAKvHyU,EAAaxU,gBAAkB,aAAmB,CAAE9K,QAAS,WAAkC,OAAO,IAAIsf,EAAa,aAAS,OAAelf,MAAOkf,EAAczU,WAAY,S,MAiDnM,SAAS6U,GAAeC,GAGpB,MAAO,CACHQ,QAAmB,QAAVR,GAA6B,KAAVA,EAC5BS,MAAOT,EACPU,YAAa,OAIbC,eAAgB,Q,mBA2DlBC,EAKF,YAAYC,EAAeC,GACvB/lB,KAAK8lB,cAAgBA,EACrB9lB,KAAK+lB,MAAQA,EAIb/lB,KAAKgmB,SAAW,IAAIC,IAIpBjmB,KAAKkmB,gBAAkB,IAAIzS,EAAA,EAM/B,cACIzT,KAAKkmB,gBAAgB5T,OACrBtS,KAAKkmB,gBAAgBzQ,WAOzB,UAAU7P,GAGN,OADgBugB,GAAa,YAAYvgB,IAC1BoJ,KAIfoX,GAAcpmB,KAAKqmB,eAAeD,GAAYE,IAAIb,SAQtD,QAAQ7f,GAEJ,MAEM2gB,EAFUJ,GAAa,YAAYvgB,IAEb6D,IAI5Bwb,GAASjlB,KAAKqmB,eAAepB,GAAOuB,YAEpC,IAAIC,EAAkB,OAAAC,EAAA,GAAcH,GAGpC,OADAE,EAAkB,OAAAE,EAAA,GAAOF,EAAgBtc,KAAK,OAAA6K,EAAA,GAAK,IAAKyR,EAAgBtc,KDnPpEsW,GAAWA,EAAOmG,KAAK,IAAIzC,ECmPmD,IAAI,OAAA0C,EAAA,GAAa,MAC5E1c,KAAK,OAAAV,EAAA,GAI3Bqd,IAEG,MAAMC,EAAW,CACbtB,SAAS,EACTuB,YAAa,IAUjB,OARAF,EAAiBzjB,QAIhB4jB,IACGF,EAAStB,QAAUsB,EAAStB,SAAWwB,EAAMxB,QAC7CsB,EAASC,YAAYC,EAAMhC,OAASgC,EAAMxB,UAEvCsB,KASf,eAAe9B,GAEX,GAAIjlB,KAAKgmB,SAASb,IAAIF,GAClB,OAA0BjlB,KAAKgmB,SAASngB,IAAIof,GAGhD,MAAMqB,EAAMtmB,KAAK8lB,cAAchB,WAAWG,GAoCpCiC,EAAS,CAAEV,WAjCO,IAAIvS,EAAA,EAI3BC,IAOG,MAAMiT,EAIL7B,GAAMtlB,KAAK+lB,MAAM7X,IAAI,IAGhBgG,EAAS5B,KAAKgT,IAEpB,OADAgB,EAAIX,YAAYwB,GACT,KAIHb,EAAIV,eAAeuB,MAEvBhd,KAAK,OAAAid,GAAA,GAAUd,GAAM,OAAA7c,EAAA,GAIxB4d,IAAY,CAAGpC,QAAOQ,QAAS4B,EAAQ5B,WAAc,OAAArO,EAAA,GAAUpX,KAAKkmB,kBAGvBI,OAE9C,OADAtmB,KAAKgmB,SAASsB,IAAIrC,EAAOiC,GAClBA,G,OAGfrB,EAAmB/hB,KAAO,SAAoCC,GAAK,OAAO,IAAKA,GAAK8hB,GAAoB,KAAgB,IAAe,KAAgB,OACvJA,EAAmB3V,MAAQ,KAA0B,CAAExK,MAAOmgB,EAAoBvgB,QAAS,SAAUvB,GAAK,OAAO8hB,EAAmB/hB,KAAKC,IAAOoM,WAAY,SAMzI0V,EAAmBzV,gBAAkB,aAAmB,CAAE9K,QAAS,WAAwC,OAAO,IAAIugB,EAAmB,aAAS,IAAe,aAAS,OAAangB,MAAOmgB,EAAoB1V,WAAY,S,MAmCjP,SAASgW,GAAaoB,GAClB,OAAOA,EAAQ9d,IAIdwb,GAAUA,EAAM9b,MAAM,MAClB+W,OAAO,CAKXsH,EAAIC,IAAOD,EAAGb,OAAOc,IACjBhe,IAILwb,GAASA,EAAMxc,QAiBnB,MAAMif,GAAc,CAChBC,OAAQ,wBACRC,MAAO,+CACPC,OAAQ,gDACRC,MAAO,iDACPC,OAAQ,sBACRC,QAAS,wGAETC,OAAQ,uJAERC,IAAK,mGAELC,gBAAiB,oDACjBC,eAAgB,2EAChBC,YAAa,iDACbC,iBAAkB,qDAClBC,gBAAiB,6EACjBC,aAAc,oDC5ZlB,sEAyBA,MAAM9gB,GAAM,CAAC,EAAG,uBAChB,SAAS+gB,GAA8B7gB,EAAIC,GAAO,GAAS,EAALD,EAAQ,CAC1D,MAAM8gB,EAAO,OACb,KAAsB,EAAG,MAAO,GAChC,KAAsB,EAAG,SAAU,GACnC,KAAkB,SAAS,SAA+DC,GAA8E,OAApE,KAAqBD,GAAuB,OAAuCE,YACvL,KAAc,GACd,OACA,OACF,GAAS,EAALhhB,EAAQ,CACV,MAAMihB,EAAU,OAChB,KAAiB,GACjB,KAAyBA,EAAQC,KAAKF,SAE1C,MAAMG,GAAM,CAAC,EAAG,2BAChB,SAASC,GAA4CphB,EAAIC,IAazD,MAAM,GAKF,YAAYohB,EAAmBhb,GAC3BjO,KAAKiO,YAAcA,EAInBjO,KAAKkpB,gBAAkB,IAAIzV,EAAA,EAI3BzT,KAAKmpB,aAAe,IAAI1V,EAAA,EAIxBzT,KAAKopB,UAAY,IAAI3V,EAAA,EAIrBzT,KAAKqpB,oBAAqB,EAC1BrpB,KAAKipB,kBAAoBA,EAEzBjpB,KAAKspB,WAAWlf,UAAU,IAGpBpK,KAAKupB,WACXN,EAAkBO,QAAQpf,UAAU,IAG9BpK,KAAKypB,kBAMf,UACSzpB,KAAKkpB,gBAAgBQ,QACtB1pB,KAAKipB,kBAAkBU,OAE3B5S,aAAa/W,KAAK4pB,oBAMtB,oBACS5pB,KAAKopB,UAAUM,SAChB1pB,KAAKqpB,oBAAqB,EAC1BrpB,KAAKopB,UAAU9W,OACftS,KAAKopB,UAAU3T,YASvB,kBACIzV,KAAK6pB,oBAOT,cAAc5e,GACVjL,KAAK4pB,mBAAqB5S,WAAW,IAG/BhX,KAAKupB,UAAYte,GAM3B,QACSjL,KAAKmpB,aAAaO,SACnB1pB,KAAKmpB,aAAa7W,OAClBtS,KAAKmpB,aAAa1T,YAQ1B,iBACIzV,KAAKiO,YAAYvK,UACZ1D,KAAKopB,UAAUM,QAChB1pB,KAAKopB,UAAU3T,WAEnBzV,KAAKkpB,gBAAgB5W,KAAK,CAAEwX,kBAAmB9pB,KAAKqpB,qBACpDrpB,KAAKkpB,gBAAgBzT,WACrBzV,KAAKqpB,oBAAqB,EAM9B,iBACI,OAAOrpB,KAAKkpB,gBAAgBnU,eAMhC,cACI,OAAO/U,KAAKipB,kBAAkBc,SAMlC,WACI,OAAO/pB,KAAKopB,UAAUrU,gBA6D9B,MAAMiV,GAAqB,IAAI,IAAe,mBAK9C,MAAMC,GACF,cAIIjqB,KAAKkqB,WAAa,YAKlBlqB,KAAKmqB,oBAAsB,GAI3BnqB,KAAKiL,SAAW,EAIhBjL,KAAK8oB,KAAO,KAIZ9oB,KAAKoqB,mBAAqB,SAI1BpqB,KAAKqqB,iBAAmB,U,mBA4D1BC,EAKF,YAAYC,EAAazB,GACrB9oB,KAAKuqB,YAAcA,EACnBvqB,KAAK8oB,KAAOA,EAMhB,SACI9oB,KAAKuqB,YAAYV,oBAMrB,gBACI,QAAS7pB,KAAK8oB,KAAKF,Q,OAG3B0B,EAAexmB,KAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKumB,GAAgB,KAAyB,IAAiB,KAAyBN,MAC/JM,EAAehf,KAAO,KAAyB,CAAErH,KAAMqmB,EAAgBpmB,UAAW,CAAC,CAAC,qBAAsBsmB,aAAc,SAAqC5iB,EAAIC,EAAK4iB,GAAoB,EAAL7iB,GAC7K,KAA0BF,KACzBgE,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,QAAS,6BAA8B,EAAG,QAAS,CAAC,EAAG,8BAA+B,CAAC,aAAc,GAAI,EAAG,UAAWhL,SAAU,SAAiCgH,EAAIC,GAAgB,EAALD,IAC/M,KAAsB,EAAG,QACzB,KAAc,GACd,OACA,KAAkB,EAAG6gB,GAA+B,EAAG,EAAG,MAAO,IAC1D,EAAL7gB,IACF,KAAiB,GACjB,KAAyBC,EAAIihB,KAAK4B,SAClC,KAAiB,GACjB,KAAkB,OAAQ7iB,EAAI8iB,aAC7B9e,WAAY,CAAC,IAAa,KAAmB+S,OAAQ,CAAC,+WAAgX9S,cAAe,EAAG8e,gBAAiB,I,MA0Cld,MAAMC,GAAwB,CAI1BC,cAAe,YAAQ,QAAS,CAC5B,YAAM,eAAgB,YAAM,CACxBhM,UAAW,aACXiM,QAAS,KAEb,YAAM,UAAW,YAAM,CACnBjM,UAAW,WACXiM,QAAS,KAEb,YAAW,eAAgB,YAAQ,qCACnC,YAAW,yBAA0B,YAAQ,oCAAqC,YAAM,CACpFA,QAAS,S,mBAafC,UAA6B,IAO/B,YAAYpd,EAASqd,EAAaC,EAAoBC,GAClDzqB,QACAV,KAAK4N,QAAUA,EACf5N,KAAKirB,YAAcA,EACnBjrB,KAAKkrB,mBAAqBA,EAC1BlrB,KAAKmrB,eAAiBA,EAItBnrB,KAAKorB,YAAa,EAIlBprB,KAAKwpB,QAAU,IAAI/V,EAAA,EAInBzT,KAAK+pB,SAAW,IAAItW,EAAA,EAIpBzT,KAAKqrB,gBAAkB,OAOnBrrB,KAAKsrB,MAJyB,cAA9BH,EAAejB,YAA+BiB,EAAehB,oBAG1B,QAA9BgB,EAAejB,WACP,KAGA,SANA,QAerB,sBAAsB9oB,GAGlB,OAFApB,KAAKurB,qBACLvrB,KAAKwrB,wBACExrB,KAAKkT,cAAc3R,sBAAsBH,GAQpD,qBAAqBA,GAGjB,OAFApB,KAAKurB,qBACLvrB,KAAKwrB,wBACExrB,KAAKkT,cAAc1R,qBAAqBJ,GAOnD,eAAe6Q,GACX,MAAM,UAAEwZ,EAAS,QAAEC,GAAYzZ,EAI/B,IAHiB,SAAZyZ,GAAoC,SAAdD,GAAqC,WAAZC,IAChD1rB,KAAK2rB,gBAEO,YAAZD,EAAuB,CAIvB,MAAME,EAAU5rB,KAAK+pB,SACrB/pB,KAAK4N,QAAQM,IAAI,KAIb0d,EAAQtZ,OACRsZ,EAAQnW,cAQpB,QACSzV,KAAKorB,aACNprB,KAAKqrB,gBAAkB,UACvBrrB,KAAKkrB,mBAAmB/nB,iBAOhC,OAKI,OADAnD,KAAKqrB,gBAAkB,SAChBrrB,KAAKwpB,QAMhB,cACIxpB,KAAKorB,YAAa,EAClBprB,KAAK2rB,gBAQT,gBACI3rB,KAAK4N,QAAQie,iBAAiB9W,eAAe5K,KAAK,OAAA6K,EAAA,GAAK,IAAI5K,UAAU,KAIjEpK,KAAKwpB,QAAQlX,OACbtS,KAAKwpB,QAAQ/T,aAQrB,wBAEI,MAAM3G,EAAU9O,KAAKirB,YAAYtgB,cAE3BmhB,EAAe9rB,KAAKmrB,eAAe5a,WACrCub,IACIC,MAAMC,QAAQF,GAEdA,EAAazoB,QAIb8T,GAAYrI,EAAQrC,UAAUC,IAAIyK,IAGlCrI,EAAQrC,UAAUC,IAAIof,IAGiB,WAA3C9rB,KAAKmrB,eAAef,oBACpBtb,EAAQrC,UAAUC,IAAI,wBAEmB,QAAzC1M,KAAKmrB,eAAed,kBACpBvb,EAAQrC,UAAUC,IAAI,qBAQ9B,qBACI,GAAI1M,KAAKkT,cAAcnT,cACnB,MAAMJ,MAAM,6E,OAIxBqrB,EAAqBlnB,KAAO,SAAsCC,GAAK,OAAO,IAAKA,GAAKinB,GAAsB,KAAyB,KAAS,KAAyB,KAAa,KAAyB,KAAoB,KAAyBf,MAC5Pe,EAAqB1f,KAAO,KAAyB,CAAErH,KAAM+mB,EAAsB9mB,UAAW,CAAC,CAAC,wBAAyB+nB,UAAW,SAAoCrkB,EAAIC,GAGpK,IAAI0D,EAHgL,EAAL3D,GAC/K,KAAyB,KAAiB,GACnC,EAALA,GAEF,KAAsB2D,EAAK,UAA0B1D,EAAIqL,cAAgB3H,EAAGC,QAC3Egf,aAAc,SAA2C5iB,EAAIC,EAAK4iB,GAAoB,EAAL7iB,IAClF,KAAuB,GACvB,KAAwC,eAAe,SAAsE+gB,GAAU,OAAO9gB,EAAIqkB,eAAevD,MACjK,KAA0BI,KACnB,EAALnhB,IACF,KAAmB,OAAQC,EAAIyjB,OAC/B,KAAoC,SAAUzjB,EAAIwjB,mBACjDjnB,SAAU,CAAC,MAAoCsH,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,kBAAmB,KAAMhL,SAAU,SAAuCgH,EAAIC,GAAgB,EAALD,GACtK,KAAkB,EAAGohB,GAA6C,EAAG,EAAG,cAAe,IACtFnd,WAAY,CAAC,KAAyB+S,OAAQ,CAAC,6bAA8b9S,cAAe,EAAGgd,KAAM,CAAEqD,UAAW,CAACtB,GAAsBC,kB,qBA8F5iBsB,G,OAENA,EAAkBhnB,KAAO,KAAwB,CAAEnB,KAAMmoB,IACzDA,EAAkB/mB,KAAO,KAAwB,CAAEC,QAAS,SAAmCvB,GAAK,OAAO,IAAKA,GAAKqoB,IAAyBlI,QAAS,CAAC,CAC5I,EACA,IACA,IACA,IACA,KAEJ,O,MAgCR,MAAMmI,GAAgC,IAAI,IAAe,gCAAiC,CACtFlc,WAAY,OACZ7K,QAMJ,WACI,OAAO,IAAI2kB,M,mBAKTqC,EASF,YAAYC,EAAUC,EAAOpJ,EAAWqJ,EAAqBC,EAAiBC,GAC1E3sB,KAAKusB,SAAWA,EAChBvsB,KAAKwsB,MAAQA,EACbxsB,KAAKojB,UAAYA,EACjBpjB,KAAKysB,oBAAsBA,EAC3BzsB,KAAK0sB,gBAAkBA,EACvB1sB,KAAK2sB,eAAiBA,EAMtB3sB,KAAK4sB,wBAA0B,KAMnC,yBAEI,MAAM9J,EAAS9iB,KAAK0sB,gBACpB,OAAO5J,EAASA,EAAO+J,mBAAqB7sB,KAAK4sB,wBAMrD,uBAAuBhnB,GACf5F,KAAK0sB,gBACL1sB,KAAK0sB,gBAAgBG,mBAAqBjnB,EAG1C5F,KAAK4sB,wBAA0BhnB,EAYvC,kBAAkBtF,EAAWyP,GACzB,OAA0B/P,KAAK8sB,QAAQxsB,EAAWyP,GAUtD,iBAAiBnP,EAAUmP,GACvB,OAAO/P,KAAK8sB,QAAQlsB,EAAUmP,GASlC,KAAK2a,EAAS9B,EAAS,GAAI7Y,GAEvB,MAAMlC,EAAU+C,OAAOiF,OAAO,GAAI7V,KAAK2sB,eAAgB5c,GAOvD,OAJAlC,EAAQib,KAAO,CAAE4B,UAAS9B,UACrB/a,EAAQsc,sBACTtc,EAAQsc,oBAAsBO,GAE3B1qB,KAAK+sB,kBAAkB,GAAgBlf,GAMlD,UACQ7N,KAAK6sB,oBACL7sB,KAAK6sB,mBAAmBtD,UAMhC,cAEQvpB,KAAK4sB,yBACL5sB,KAAK4sB,wBAAwBrD,UAUrC,yBAAyBpb,EAAY4B,GAEjC,MAEMvP,EAAW,IAAI,IAFAuP,GAAUA,EAAOxP,kBAAoBwP,EAAOxP,iBAAiBC,UAE9BR,KAAKojB,UAAW,IAAI4J,QAAQ,CAC5E,CAAC/C,GAAmBla,MAGlBkd,EAAkB,IAAI,IAAgB,GAAsBld,EAAOxP,iBAAkBC,GAErF0sB,EAAe/e,EAAWjO,OAAO+sB,GAEvC,OADAC,EAAaC,SAAShC,eAAiBpb,EAChCmd,EAAaC,SAUxB,QAAQC,EAASC,GAEb,MAAMtd,EAASa,OAAOiF,OAAO,GAAI,IAAIoU,GAAqBjqB,KAAK2sB,eAAgBU,GAEzElf,EAAanO,KAAKstB,eAAevd,GAEjCkD,EAAYjT,KAAKutB,yBAAyBpf,EAAY4B,GAEtDwa,EAAc,IAAI,GAAetX,EAAW9E,GAClD,GAAIif,aAAmB,IAAa,CAEhC,MAAMhsB,EAAS,IAAI,IAAegsB,EAAS,KAA2B,CAClEI,UAAWzd,EAAO+Y,KAClByB,gBAEJA,EAAY4C,SAAWla,EAAUzR,qBAAqBJ,OAErD,CAED,MAAMZ,EAAWR,KAAKytB,gBAAgB1d,EAAQwa,GAExCnpB,EAAS,IAAI,IAAgBgsB,OAASpsB,EAAWR,GAEjDktB,EAAaza,EAAU1R,sBAAsBH,GAEnDmpB,EAAY4C,SAAWO,EAAWP,SAkBtC,OAbAntB,KAAKysB,oBAAoBkB,QAAQjG,GAAYS,iBAAiBhe,KAAK,OAAAiN,EAAA,GAAUjJ,EAAWyf,gBAAgBxjB,UAIxG6c,IAEI,MAAMxa,EAAY0B,EAAWuB,eAAejD,UAG5Cwa,EAAMxB,QAAUhZ,EAAUC,IADR,yBACyBD,EAAUhJ,OADnC,2BAGtBzD,KAAK6tB,iBAAiBtD,EAAaxa,GACnC/P,KAAK6sB,mBAAqBtC,EACnBvqB,KAAK6sB,mBAShB,iBAAiBtC,EAAaxa,GAE1Bwa,EAAYuD,iBAAiB1jB,UAAU,KAK/BpK,KAAK6sB,oBAAsBtC,IAC3BvqB,KAAK6sB,mBAAqB,MAE1B9c,EAAOoa,qBACPnqB,KAAKwsB,MAAM5nB,UAGf5E,KAAK6sB,oBAGL7sB,KAAK6sB,mBAAmBiB,iBAAiB1jB,UAAU,KAI/CmgB,EAAYtB,kBAAkB8E,UAElC/tB,KAAK6sB,mBAAmBtD,WAIxBgB,EAAYtB,kBAAkB8E,QAG9Bhe,EAAO9E,UAAY8E,EAAO9E,SAAW,GACrCsf,EAAYyD,cAAc5jB,UAAU,IAG9BmgB,EAAY0D,cAAiCle,EAAgB,WAEnEA,EAAOoa,qBACPnqB,KAAKwsB,MAAM0B,SAASne,EAAOoa,oBAAqBpa,EAAOma,YAS/D,eAAena,GAEX,MAAM4T,EAAgB,IAAItT,EAC1BsT,EAAc5N,UAAYhG,EAAOgG,UAEjC,IAAIzB,EAAmBtU,KAAKusB,SAAS3lB,WAAWunB,SAGhD,MAAM3P,EAA6B,QAArBzO,EAAOgG,UAEfqY,EAAwC,SAA9Bre,EAAOqa,oBACY,UAA9Bra,EAAOqa,qBAAmC5L,GACZ,QAA9BzO,EAAOqa,oBAAgC5L,EAEtC6P,GAAWD,GAAwC,WAA9Bre,EAAOqa,mBAkBlC,OAjBIgE,EACA9Z,EAAiBpI,KAAK,KAEjBmiB,EACL/Z,EAAiBnF,MAAM,KAGvBmF,EAAiBga,qBAGW,QAA5Bve,EAAOsa,iBACP/V,EAAiBrN,IAAI,KAGrBqN,EAAiBpF,OAAO,KAE5ByU,EAAcrP,iBAAmBA,EAC1BtU,KAAKusB,SAAS7pB,OAAOihB,GAUhC,gBAAgB5T,EAAQwa,GAGpB,OAAO,IAAI,IADUxa,GAAUA,EAAOxP,kBAAoBwP,EAAOxP,iBAAiBC,UACxCR,KAAKojB,UAAW,IAAI4J,QAAQ,CAClE,CAAC,GAAgBzC,GACjB,CAACP,GAAoBja,EAAO+Y,U,OAIxCwD,EAAYxoB,KAAO,SAA6BC,GAAK,OAAO,IAAKA,GAAKuoB,GAAa,KAAgB,GAAU,KAAgB,KAAgB,KAAgB,KAAW,KAAgB,IAAqB,KAAgBA,EAAa,IAAK,KAAgBD,MAC/PC,EAAYpc,MAAQ,KAA0B,CAAExK,MAAO4mB,EAAahnB,QAAS,SAAUvB,GAAK,OAAOuoB,EAAYxoB,KAAKC,IAAOoM,WAAY,KAUpHmc,EAAYlc,gBAAkB,aAAmB,CAAE9K,QAAS,WAAiC,OAAO,IAAIgnB,EAAY,aAAS,GAAU,aAAS,KAAgB,aAAS,KAAW,aAAS,IAAqB,aAASA,EAAa,IAAK,aAASD,MAAoC3mB,MAAO4mB,EAAanc,WAAY,K,yCCniC7U,8GAaO,Y,MAAMoe,EAIX,YAAoBnmB,GAAA,KAAAA,SAClBpI,KAAKwuB,eAAiB,YAAKxuB,KAAKyuB,qBAAqBtkB,KAAK,eAGpD,oBACN,MAAMukB,EAAO5nB,OAA+B,eAC5C,OAAO4nB,EAAMC,QAAQC,QAAQF,GAG3B,qCACGG,KACC,IAAO/nB,OAA+B,eACtCU,IACE,MAAMsnB,EAAM,uCAAuCtnB,EAAIkjB,UAGvD,OAFA1qB,KAAKoI,OAAO8C,MAAM,IAAIvL,MAAMmvB,IAErB,KAAQ,MAAM,IAAInvB,MAAMmvB,MAczC,WAAWvmB,EAAc0B,EAAmBkB,GAC1C,OAAOnL,KAAKwuB,eAAerkB,KACzB,YAAIukB,IACF,IACE,OAAOA,EAAInmB,EAAM0B,EAAUkB,GAC3B,MAAO3D,GACP,MAAMsnB,EAAM,sCAAsCvmB,EAAKmB,OAAO,EAAG,WAEjE,MADA6b,QAAQra,MAAM4jB,EAAKtnB,GACb,IAAI7H,MAAMmvB,MAGpB,gB,OCTNP,EAAczqB,KAAO,SAA+BC,GAAK,OAAO,IAAKA,GDpCxDwqB,GAAa,YCqC1BA,EAAcre,MAAQ,KAAsB,CAAExK,MDrCjC6oB,EAAa,2BAAbA,EAAa,2B,GAAnB","file":"default~code-code-example-module~code-code-tabs-module.js","sourcesContent":["import { Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Output, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface that can be used to generically type a class.\n * @record\n * @template T\n */\nfunction ComponentType() { }\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nclass Portal {\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    }\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    detach() {\n        /** @type {?} */\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /**\n     * Whether this portal is attached to a host.\n     * @return {?}\n     */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Portal.prototype._attachedHost;\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nclass ComponentPortal extends Portal {\n    /**\n     * @param {?} component\n     * @param {?=} viewContainerRef\n     * @param {?=} injector\n     * @param {?=} componentFactoryResolver\n     */\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\nif (false) {\n    /**\n     * The type of the component that will be instantiated for attachment.\n     * @type {?}\n     */\n    ComponentPortal.prototype.component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalOutlet.\n     * The origin is necessary when the host is outside of the Angular application context.\n     * @type {?}\n     */\n    ComponentPortal.prototype.viewContainerRef;\n    /**\n     * [Optional] Injector used for the instantiation of the component.\n     * @type {?}\n     */\n    ComponentPortal.prototype.injector;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * Defaults to using the resolver from the outlet that the portal is attached to.\n     * @type {?}\n     */\n    ComponentPortal.prototype.componentFactoryResolver;\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nclass TemplatePortal extends Portal {\n    /**\n     * @param {?} template\n     * @param {?} viewContainerRef\n     * @param {?=} context\n     */\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    /**\n     * @return {?}\n     */\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\nif (false) {\n    /**\n     * The embedded template that will be used to instantiate an embedded View in the host.\n     * @type {?}\n     */\n    TemplatePortal.prototype.templateRef;\n    /**\n     * Reference to the ViewContainer into which the template will be stamped out.\n     * @type {?}\n     */\n    TemplatePortal.prototype.viewContainerRef;\n    /**\n     * Contextual data to be passed in to the embedded view.\n     * @type {?}\n     */\n    TemplatePortal.prototype.context;\n}\n/**\n * A `PortalOutlet` is an space that can contain a single `Portal`.\n * @record\n */\nfunction PortalOutlet() { }\nif (false) {\n    /**\n     * Attaches a portal to this outlet.\n     * @param {?} portal\n     * @return {?}\n     */\n    PortalOutlet.prototype.attach = function (portal) { };\n    /**\n     * Detaches the currently attached portal from this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.detach = function () { };\n    /**\n     * Performs cleanup before the outlet is destroyed.\n     * @return {?}\n     */\n    PortalOutlet.prototype.dispose = function () { };\n    /**\n     * Whether there is currently a portal attached to this outlet.\n     * @return {?}\n     */\n    PortalOutlet.prototype.hasAttached = function () { };\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nclass BasePortalOutlet {\n    constructor() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * The portal currently attached to the host.\n     * @type {?}\n     * @protected\n     */\n    BasePortalOutlet.prototype._attachedPortal;\n    /**\n     * A function that will permanently dispose this host.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._disposeFn;\n    /**\n     * Whether this host has already been permanently disposed.\n     * @type {?}\n     * @private\n     */\n    BasePortalOutlet.prototype._isDisposed;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachComponentPortal = function (portal) { };\n    /**\n     * @abstract\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attachTemplatePortal = function (portal) { };\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * \\@breaking-change 9.0.0\n * @abstract\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} outletElement\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _defaultInjector\n     */\n    constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => componentRef.destroy()));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            () => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        /** @type {?} */\n        let viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        rootNode => this.outletElement.appendChild(rootNode)));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _getComponentRootNode(componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    }\n}\nif (false) {\n    /**\n     * Element into which the content is projected.\n     * @type {?}\n     */\n    DomPortalOutlet.prototype.outletElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DomPortalOutlet.prototype._defaultInjector;\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    /**\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     */\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(TemplateRef), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: TemplateRef }, { type: ViewContainerRef }]; }, { constructor: [] });\n/**\n * @deprecated Use `CdkPortal` instead.\n * \\@breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null);\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param {?} _componentFactoryResolver\n     * @param {?} _viewContainerRef\n     */\n    constructor(_componentFactoryResolver, _viewContainerRef) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        this.attached = new EventEmitter();\n    }\n    /**\n     * Portal associated with the Portal outlet.\n     * @return {?}\n     */\n    get portal() {\n        return this._attachedPortal;\n    }\n    /**\n     * @param {?} portal\n     * @return {?}\n     */\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /**\n     * Component or view reference that is attached to the portal.\n     * @return {?}\n     */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => ref.destroy()));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn((/**\n         * @return {?}\n         */\n        () => this._viewContainerRef.clear()));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ComponentFactoryResolver }, { type: ViewContainerRef }]; }, { constructor: [], _componentFactoryResolver: [], _viewContainerRef: [], _isInitialized: [], attached: [{\n            type: Output\n        }], portal: [], portal: [], _attachedPortal: [], attachedRef: [], ngOnInit: [], ngOnDestroy: [], _attachedRef: [], attachComponentPortal: [], attachTemplatePortal: [] });\nif (false) {\n    /**\n     * Whether the portal component is initialized.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._isInitialized;\n    /**\n     * Reference to the currently-attached component/view ref.\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._attachedRef;\n    /**\n     * Emits when a portal is attached to the outlet.\n     * @type {?}\n     */\n    CdkPortalOutlet.prototype.attached;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkPortalOutlet.prototype._viewContainerRef;\n}\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * \\@breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null);\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nclass PortalInjector {\n    /**\n     * @param {?} _parentInjector\n     * @param {?} _customTokens\n     */\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        /** @type {?} */\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._parentInjector;\n    /**\n     * @type {?}\n     * @private\n     */\n    PortalInjector.prototype._customTokens;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector };\n\n//# sourceMappingURL=portal.js.map","/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const docElem = document.documentElement!;\n      const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || docElem.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums())\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), () => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"./pretty-printer.service\";\nimport * as i3 from \"app/shared/copier.service\";\nimport * as i4 from \"app/shared/logger.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = [\"codeContainer\"];\nfunction CodeComponent_button_2_Template(rf, ctx) { if (rf & 1) {\n    const _r106 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CodeComponent_button_2_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r106); const ctx_r105 = i0.ɵɵnextContext(); return ctx_r105.doCopy(); });\n    i0.ɵɵtext(1, \"\\n        \");\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtext(3, \"content_copy\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \"\\n      \");\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r103 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"aria-label\", ctx_r103.ariaLabel);\n} }\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\nexport class CodeComponent {\n    constructor(snackbar, pretty, copier, logger) {\n        this.snackbar = snackbar;\n        this.pretty = pretty;\n        this.copier = copier;\n        this.logger = logger;\n        this.ariaLabel = '';\n        this.codeFormatted = new EventEmitter();\n    }\n    /** Code that should be formatted with current inputs and displayed in the view. */\n    set code(code) {\n        this._code = code;\n        if (!this._code || !this._code.trim()) {\n            this.showMissingCodeMessage();\n        }\n        else {\n            this.formatDisplayedCode();\n        }\n    }\n    get code() { return this._code; }\n    /** Optional header to be displayed above the code. */\n    set header(header) {\n        this._header = header;\n        this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n    }\n    get header() { return this._header; }\n    ngOnChanges() {\n        // If some inputs have changed and there is code displayed, update the view with the latest\n        // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    }\n    formatDisplayedCode() {\n        const leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n        this.pretty\n            .formatCode(leftAlignedCode, this.language, this.getLinenums())\n            .pipe(tap(() => this.codeFormatted.emit()))\n            .subscribe(c => this.setCodeHtml(c), () => { });\n    }\n    /** Sets the message showing that the code could not be found. */\n    showMissingCodeMessage() {\n        const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n        const srcMsg = src ? ` for\\n${src}` : '.';\n        this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n    }\n    /** Sets the innerHTML of the code container to the provided code string. */\n    setCodeHtml(formattedCode) {\n        // **Security:** Code example content is provided by docs authors and as such its considered to\n        // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    }\n    /** Gets the textContent of the displayed code element. */\n    getCodeText() {\n        // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n        // container as text, before prettifying it.\n        // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    }\n    /** Copies the code snippet to the user's clipboard. */\n    doCopy() {\n        const code = this.codeText;\n        const successfullyCopied = this.copier.copyText(code);\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        }\n        else {\n            this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n            this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n        }\n    }\n    /** Gets the calculated value of linenums (boolean/number). */\n    getLinenums() {\n        const linenums = typeof this.linenums === 'boolean' ? this.linenums :\n            this.linenums === 'true' ? true :\n                this.linenums === 'false' ? false :\n                    typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n                        this.linenums;\n        return (linenums != null) && !isNaN(linenums) && linenums;\n    }\n}\nCodeComponent.ɵfac = function CodeComponent_Factory(t) { return new (t || CodeComponent)(i0.ɵɵdirectiveInject(i1.MatSnackBar), i0.ɵɵdirectiveInject(i2.PrettyPrinter), i0.ɵɵdirectiveInject(i3.CopierService), i0.ɵɵdirectiveInject(i4.Logger)); };\nCodeComponent.ɵcmp = i0.ɵɵdefineComponent({ type: CodeComponent, selectors: [[\"aio-code\"]], viewQuery: function CodeComponent_Query(rf, ctx) { if (rf & 1) {\n        i0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        i0.ɵɵqueryRefresh((_t = i0.ɵɵloadQuery())) && (ctx.codeContainer = _t.first);\n    } }, inputs: { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", header: \"header\" }, outputs: { codeFormatted: \"codeFormatted\" }, features: [i0.ɵɵNgOnChangesFeature()], decls: 7, vars: 4, consts: [[\"class\", \"material-icons copy-button no-print\", \"title\", \"Copy code snippet\", 3, \"click\", 4, \"ngIf\"], [1, \"animated\", \"fadeIn\"], [\"codeContainer\", \"\"], [\"title\", \"Copy code snippet\", 1, \"material-icons\", \"copy-button\", \"no-print\", 3, \"click\"], [\"aria-hidden\", \"true\"]], template: function CodeComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"pre\");\n        i0.ɵɵtext(1, \"      \");\n        i0.ɵɵtemplate(2, CodeComponent_button_2_Template, 5, 1, \"button\", 0);\n        i0.ɵɵtext(3, \"\\n      \");\n        i0.ɵɵelement(4, \"code\", 1, 2);\n        i0.ɵɵtext(6, \"\\n    \");\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵclassMapInterpolate1(\"prettyprint lang-\", ctx.language, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideCopy);\n    } }, directives: [i5.NgIf], encapsulation: 2 });\n/*@__PURE__*/ i0.ɵsetClassMetadata(CodeComponent, [{\n        type: Component,\n        args: [{\n                selector: 'aio-code',\n                template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n            }]\n    }], function () { return [{ type: i1.MatSnackBar }, { type: i2.PrettyPrinter }, { type: i3.CopierService }, { type: i4.Logger }]; }, { hideCopy: [{\n            type: Input\n        }], language: [{\n            type: Input\n        }], linenums: [{\n            type: Input\n        }], path: [{\n            type: Input\n        }], region: [{\n            type: Input\n        }], header: [{\n            type: Input\n        }], codeFormatted: [{\n            type: Output\n        }], codeContainer: [{\n            type: ViewChild,\n            args: ['codeContainer', { static: true }]\n        }] });\nfunction leftAlign(text) {\n    let indent = Number.MAX_VALUE;\n    const lines = text.split('\\n');\n    lines.forEach(line => {\n        const lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n    return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport * as i0 from \"@angular/core\";\nexport class CodeModule {\n}\nCodeModule.ɵmod = i0.ɵɵdefineNgModule({ type: CodeModule });\nCodeModule.ɵinj = i0.ɵɵdefineInjector({ factory: function CodeModule_Factory(t) { return new (t || CodeModule)(); }, providers: [PrettyPrinter, CopierService], imports: [[CommonModule, MatSnackBarModule]] });\n/*@__PURE__*/ i0.ɵɵsetNgModuleScope(CodeModule, { declarations: [CodeComponent], imports: [CommonModule, MatSnackBarModule], exports: [CodeComponent] });\n/*@__PURE__*/ i0.ɵsetClassMetadata(CodeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatSnackBarModule],\n                declarations: [CodeComponent],\n                entryComponents: [CodeComponent],\n                exports: [CodeComponent],\n                providers: [PrettyPrinter, CopierService]\n            }]\n    }], null, null);\n","import { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} document\n     */\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    attach() { }\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    enable() {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            const root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    disable() {\n        if (this._isEnabled) {\n            /** @type {?} */\n            const html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            const body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            const htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            const bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        const html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        const body = this._document.body;\n        /** @type {?} */\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousHTMLStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._previousScrollPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._isEnabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    BlockScrollStrategy.prototype._viewportRuler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n * @record\n */\nfunction ScrollStrategy() { }\nif (false) {\n    /**\n     * Enable this scroll strategy (called when the attached overlay is attached to a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.enable;\n    /**\n     * Disable this scroll strategy (called when the attached overlay is detached from a portal).\n     * @type {?}\n     */\n    ScrollStrategy.prototype.disable;\n    /**\n     * Attaches this `ScrollStrategy` to an overlay.\n     * @type {?}\n     */\n    ScrollStrategy.prototype.attach;\n    /**\n     * Detaches the scroll strategy from the current overlay.\n     * @type {?|undefined}\n     */\n    ScrollStrategy.prototype.detach;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the CloseScrollStrategy.\n * @record\n */\nfunction CloseScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Amount of pixels the user has to scroll before the overlay is closed.\n     * @type {?|undefined}\n     */\n    CloseScrollStrategyConfig.prototype.threshold;\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = (/**\n         * @return {?}\n         */\n        () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this._overlayRef.detach()));\n            }\n        });\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (this._config)).threshold))) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            }));\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._initialScrollPosition;\n    /**\n     * Detaches the overlay ref and disables the scroll strategy.\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._detach;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    CloseScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Scroll strategy that doesn't do anything.\n */\nclass NoopScrollStrategy {\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    enable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    disable() { }\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    attach() { }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} containerBounds\n     * @return {?}\n     */\n    containerBounds => {\n        /** @type {?} */\n        const outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        const outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        const outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    }));\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} scrollContainerRect\n     * @return {?}\n     */\n    scrollContainerRect => {\n        /** @type {?} */\n        const clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        const clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config options for the RepositionScrollStrategy.\n * @record\n */\nfunction RepositionScrollStrategyConfig() { }\nif (false) {\n    /**\n     * Time in milliseconds to throttle the scroll events.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.scrollThrottle;\n    /**\n     * Whether to close the overlay once the user has scrolled away completely.\n     * @type {?|undefined}\n     */\n    RepositionScrollStrategyConfig.prototype.autoClose;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?=} _config\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    enable() {\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    /** @type {?} */\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._overlayRef.detach()));\n                    }\n                }\n            }));\n        }\n    }\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    RepositionScrollStrategy.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    /**\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewportRuler\n     * @param {?} _ngZone\n     * @param {?} document\n     */\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = (/**\n         * @return {?}\n         */\n        () => new NoopScrollStrategy());\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config));\n        /**\n         * Block scrolling.\n         */\n        this.block = (/**\n         * @return {?}\n         */\n        () => new BlockScrollStrategy(this._viewportRuler, this._document));\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config));\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ScrollDispatcher), ɵngcc0.ɵɵinject(ViewportRuler), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollStrategyOptions, factory: function (t) { return ScrollStrategyOptions.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ScrollDispatcher }, { type: ViewportRuler }, { type: NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { constructor: [], _scrollDispatcher: [], _viewportRuler: [], _ngZone: [], noop: [], close: [], block: [], reposition: [], _document: [] });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._document;\n    /**\n     * Do nothing on scroll.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.noop;\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.close;\n    /**\n     * Block scrolling.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.block;\n    /**\n     * Update the overlay's position on scroll.\n     * \\@param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     * @type {?}\n     */\n    ScrollStrategyOptions.prototype.reposition;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollStrategyOptions.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nclass OverlayConfig {\n    /**\n     * @param {?=} config\n     */\n    constructor(config) {\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            /** @type {?} */\n            const configKeys = (/** @type {?} */ (Object.keys(config)));\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = (/** @type {?} */ (config[key]));\n                }\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * Strategy with which to position the overlay.\n     * @type {?}\n     */\n    OverlayConfig.prototype.positionStrategy;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    OverlayConfig.prototype.scrollStrategy;\n    /**\n     * Custom class to add to the overlay pane.\n     * @type {?}\n     */\n    OverlayConfig.prototype.panelClass;\n    /**\n     * Whether the overlay has a backdrop.\n     * @type {?}\n     */\n    OverlayConfig.prototype.hasBackdrop;\n    /**\n     * Custom class to add to the backdrop\n     * @type {?}\n     */\n    OverlayConfig.prototype.backdropClass;\n    /**\n     * The width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.width;\n    /**\n     * The height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.height;\n    /**\n     * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minWidth;\n    /**\n     * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.minHeight;\n    /**\n     * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxWidth;\n    /**\n     * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n     * @type {?}\n     */\n    OverlayConfig.prototype.maxHeight;\n    /**\n     * Direction of the text in the overlay panel. If a `Directionality` instance\n     * is passed in, the overlay will handle changes to its value automatically.\n     * @type {?}\n     */\n    OverlayConfig.prototype.direction;\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    OverlayConfig.prototype.disposeOnNavigation;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A connection point on the origin element.\n * @record\n */\nfunction OriginConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originX;\n    /** @type {?} */\n    OriginConnectionPosition.prototype.originY;\n}\n/**\n * A connection point on the overlay element.\n * @record\n */\nfunction OverlayConnectionPosition() { }\nif (false) {\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayX;\n    /** @type {?} */\n    OverlayConnectionPosition.prototype.overlayY;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nclass ConnectionPositionPair {\n    /**\n     * @param {?} origin\n     * @param {?} overlay\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @param {?=} panelClass\n     */\n    constructor(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\nif (false) {\n    /**\n     * X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originX;\n    /**\n     * Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.originY;\n    /**\n     * X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayX;\n    /**\n     * Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.overlayY;\n    /**\n     * Offset along the X axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetX;\n    /**\n     * Offset along the Y axis.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.offsetY;\n    /**\n     * Class(es) to be applied to the panel while this position is active.\n     * @type {?}\n     */\n    ConnectionPositionPair.prototype.panelClass;\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nclass ScrollingVisibility {\n}\nif (false) {\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOriginOutsideView;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayClipped;\n    /** @type {?} */\n    ScrollingVisibility.prototype.isOverlayOutsideView;\n}\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nclass ConnectedOverlayPositionChange {\n    /**\n     * @param {?} connectionPair\n     * @param {?} scrollableViewProperties\n     */\n    constructor(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\n/** @nocollapse */\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\nif (false) {\n    /**\n     * The position used as a result of this change.\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.connectionPair;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        });\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._detach();\n    }\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    }\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    remove(overlayRef) {\n        /** @type {?} */\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    }\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayKeyboardDispatcher, factory: function (t) { return OverlayKeyboardDispatcher.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { constructor: [], _attachedOverlays: [], _keydownListener: [], _document: [], ngOnDestroy: [], add: [], _isAttached: [], remove: [], _detach: [] });\nif (false) {\n    /**\n     * Currently attached overlays in the order they were attached.\n     * @type {?}\n     */\n    OverlayKeyboardDispatcher.prototype._attachedOverlays;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._isAttached;\n    /**\n     * Keyboard event listener that will be attached to the body.\n     * @type {?}\n     * @private\n     */\n    OverlayKeyboardDispatcher.prototype._keydownListener;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nclass OverlayContainer {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        /** @type {?} */\n        const containerClass = 'cdk-overlay-container';\n        /** @type {?} */\n        const previousContainers = this._document.getElementsByClassName(containerClass);\n        // Remove any old containers. This can happen when transitioning from the server to the client.\n        for (let i = 0; i < previousContainers.length; i++) {\n            (/** @type {?} */ (previousContainers[i].parentNode)).removeChild(previousContainers[i]);\n        }\n        /** @type {?} */\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayContainer, factory: function (t) { return OverlayContainer.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ OverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { constructor: [], _document: [], ngOnDestroy: [], getContainerElement: [], _createContainer: [], _containerElement: [] });\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._containerElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    OverlayContainer.prototype._document;\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    /**\n     * @param {?} _portalOutlet\n     * @param {?} _host\n     * @param {?} _pane\n     * @param {?} _config\n     * @param {?} _ngZone\n     * @param {?} _keyboardDispatcher\n     * @param {?} _document\n     * @param {?=} _location\n     */\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => this._backdropClick.next(event));\n        this._keydownEventsObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._keydownEvents.subscribe(observer);\n            this._keydownEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._keydownEventSubscriptions--;\n            });\n        }));\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /**\n     * The overlay's HTML element\n     * @return {?}\n     */\n    get overlayElement() {\n        return this._pane;\n    }\n    /**\n     * The overlay's backdrop HTML element.\n     * @return {?}\n     */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     * @return {?}\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    attach(portal) {\n        /** @type {?} */\n        let attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        }));\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe((/**\n             * @return {?}\n             */\n            () => this.dispose()));\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        /** @type {?} */\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    dispose() {\n        /** @type {?} */\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._keydownEventsObservable;\n    }\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    getConfig() {\n        return this._config;\n    }\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    updateSize(sizeConfig) {\n        this._config = Object.assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    }\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    setDirection(dir) {\n        this._config = Object.assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    getDirection() {\n        /** @type {?} */\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        /** @type {?} */\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    _attachBackdrop() {\n        /** @type {?} */\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                }));\n            }));\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    }\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    detachBackdrop() {\n        /** @type {?} */\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        let timeoutId;\n        /** @type {?} */\n        let finishDetach = (/**\n         * @return {?}\n         */\n        () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses((/** @type {?} */ (backdropToDetach)), this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        });\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        }));\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => setTimeout(finishDetach, 500)));\n    }\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _toggleClasses(element, cssClasses, isAdd) {\n        /** @type {?} */\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach((/**\n         * @param {?} cssClass\n         * @return {?}\n         */\n        cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        }));\n    }\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            }));\n        }));\n    }\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    _disposeScrollStrategy() {\n        /** @type {?} */\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClick;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._attachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._detachments;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._positionStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._scrollStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._locationChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._backdropClickHandler;\n    /**\n     * Reference to the parent of the `_host` at the time it was detached. Used to restore\n     * the `_host` to its original position in the DOM when it gets re-attached.\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._previousHostParent;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keydownEventsObservable;\n    /**\n     * Stream of keydown events dispatched to this overlay.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEvents;\n    /**\n     * Amount of subscriptions to the keydown events.\n     * @type {?}\n     */\n    OverlayRef.prototype._keydownEventSubscriptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._portalOutlet;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._host;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._pane;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayRef.prototype._location;\n}\n/**\n * Size properties for an overlay.\n * @record\n */\nfunction OverlaySizeConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.width;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.height;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.minHeight;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxWidth;\n    /** @type {?|undefined} */\n    OverlaySizeConfig.prototype.maxHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    /**\n     * @param {?} connectedTo\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this._scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        }));\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        const originRect = this._originRect;\n        /** @type {?} */\n        const overlayRect = this._overlayRect;\n        /** @type {?} */\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            let bestFit = null;\n            /** @type {?} */\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                /** @type {?} */\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    }\n    /**\n     * @return {?}\n     */\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    withScrollableContainers(scrollables) {\n        (/** @type {?} */ (this))._scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    withViewportMargin(margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    withGrowAfterOpen(growAfterOpen = true) {\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    withPush(canPush = true) {\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked = true) {\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetX(offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withDefaultOffsetY(offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    withTransformOriginOn(selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOriginPoint(originRect, pos) {\n        /** @type {?} */\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        let leftOverflow = 0 - x;\n        /** @type {?} */\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        let topOverflow = 0 - y;\n        /** @type {?} */\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            const availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            const availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            const minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            const minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        let pushX = 0;\n        /** @type {?} */\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            /** @type {?} */\n            const scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        const elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        let xOrigin;\n        /** @type {?} */\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        /** @type {?} */\n        const viewport = this._viewportRect;\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        let height;\n        /** @type {?} */\n        let top;\n        /** @type {?} */\n        let bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        let width;\n        /** @type {?} */\n        let left;\n        /** @type {?} */\n        let right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    _setBoundingBoxStyles(origin, position) {\n        /** @type {?} */\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    }\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetBoundingBoxStyles() {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    }\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    }\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    _setOverlayElementStyles(originPoint, position) {\n        /** @type {?} */\n        const styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        let transformString = '';\n        /** @type {?} */\n        let offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ top: null, bottom: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            const documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        let styles = (/** @type {?} */ ({ left: null, right: null }));\n        /** @type {?} */\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            const documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        const originBounds = this._getOriginRect();\n        /** @type {?} */\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        const scrollContainerBounds = this._scrollables.map((/**\n         * @param {?} scrollable\n         * @return {?}\n         */\n        scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        }));\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from its length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((/**\n         * @param {?} currentValue\n         * @param {?} currentOverflow\n         * @return {?}\n         */\n        (currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }), length);\n    }\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        const width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        const height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((/**\n         * @param {?} pair\n         * @return {?}\n         */\n        pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        }));\n    }\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            }));\n        }\n    }\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            cssClass => {\n                this._pane.classList.remove(cssClass);\n            }));\n            this._appliedPanelClasses = [];\n        }\n    }\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    _getOriginRect() {\n        /** @type {?} */\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        /** @type {?} */\n        const width = origin.width || 0;\n        /** @type {?} */\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * Whether we're performing the very first positioning of the overlay.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isInitialRender;\n    /**\n     * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastBoundingBoxSize;\n    /**\n     * Whether the overlay was pushed in a previous positioning.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isPushed;\n    /**\n     * Whether the overlay can be pushed on-screen on the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._canPush;\n    /**\n     * Whether the overlay can grow via flexible width/height after the initial open.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._growAfterOpen;\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasFlexibleDimensions;\n    /**\n     * Whether the overlay position is locked.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionLocked;\n    /**\n     * Cached origin dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._originRect;\n    /**\n     * Cached overlay dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayRect;\n    /**\n     * Cached viewport dimensions\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRect;\n    /**\n     * Amount of space that must be maintained between the overlay and the edge of the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportMargin;\n    /**\n     * The Scrollable containers used to check scrollable view properties on position change.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._scrollables;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._preferredPositions;\n    /**\n     * The origin element against which the overlay will be positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._origin;\n    /**\n     * The overlay pane element.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._pane;\n    /**\n     * Whether the strategy has been disposed of already.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._isDisposed;\n    /**\n     * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n     * within the viewport.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._boundingBox;\n    /**\n     * The last position to have been calculated as the best fit position.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._lastPosition;\n    /**\n     * Subject that emits whenever the position changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._positionChanges;\n    /**\n     * Subscription to viewport size changes.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._resizeSubscription;\n    /**\n     * Default offset for the overlay along the x axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetX;\n    /**\n     * Default offset for the overlay along the y axis.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._offsetY;\n    /**\n     * Selector to be used when finding the elements on which to set the transform origin.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._transformOriginSelector;\n    /**\n     * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._appliedPanelClasses;\n    /**\n     * Amount by which the overlay was pushed in each axis during the last time it was positioned.\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._previousPushAmount;\n    /**\n     * Observable sequence of position changes.\n     * @type {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.positionChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    FlexibleConnectedPositionStrategy.prototype._overlayContainer;\n}\n/**\n * A simple (x, y) coordinate.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Record of measurements for how an overlay (at a given position) fits into the viewport.\n * @record\n */\nfunction OverlayFit() { }\nif (false) {\n    /**\n     * Whether the overlay fits completely in the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.isCompletelyWithinViewport;\n    /**\n     * Whether the overlay fits in the viewport on the y-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportVertically;\n    /**\n     * Whether the overlay fits in the viewport on the x-axis.\n     * @type {?}\n     */\n    OverlayFit.prototype.fitsInViewportHorizontally;\n    /**\n     * The total visible area (in px^2) of the overlay inside the viewport.\n     * @type {?}\n     */\n    OverlayFit.prototype.visibleArea;\n}\n/**\n * Record of the measurments determining whether an overlay will fit in a specific position.\n * @record\n */\nfunction FallbackPosition() { }\nif (false) {\n    /** @type {?} */\n    FallbackPosition.prototype.position;\n    /** @type {?} */\n    FallbackPosition.prototype.originPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayPoint;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayFit;\n    /** @type {?} */\n    FallbackPosition.prototype.overlayRect;\n}\n/**\n * Position and size of the overlay sizing wrapper for a specific position.\n * @record\n */\nfunction BoundingBoxRect() { }\nif (false) {\n    /** @type {?} */\n    BoundingBoxRect.prototype.top;\n    /** @type {?} */\n    BoundingBoxRect.prototype.left;\n    /** @type {?} */\n    BoundingBoxRect.prototype.bottom;\n    /** @type {?} */\n    BoundingBoxRect.prototype.right;\n    /** @type {?} */\n    BoundingBoxRect.prototype.height;\n    /** @type {?} */\n    BoundingBoxRect.prototype.width;\n}\n/**\n * Record of measures determining how well a given position will fit with flexible dimensions.\n * @record\n */\nfunction FlexibleFit() { }\nif (false) {\n    /** @type {?} */\n    FlexibleFit.prototype.position;\n    /** @type {?} */\n    FlexibleFit.prototype.origin;\n    /** @type {?} */\n    FlexibleFit.prototype.overlayRect;\n    /** @type {?} */\n    FlexibleFit.prototype.boundingBoxRect;\n}\n/**\n * A connected position as specified by the user.\n * @record\n */\nfunction ConnectedPosition() { }\nif (false) {\n    /** @type {?} */\n    ConnectedPosition.prototype.originX;\n    /** @type {?} */\n    ConnectedPosition.prototype.originY;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayX;\n    /** @type {?} */\n    ConnectedPosition.prototype.overlayY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.weight;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetX;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.offsetY;\n    /** @type {?|undefined} */\n    ConnectedPosition.prototype.panelClass;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    /**\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?} connectedTo\n     * @param {?} viewportRuler\n     * @param {?} document\n     * @param {?} platform\n     * @param {?} overlayContainer\n     */\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /**\n     * Emits an event when the connection point changes.\n     * @return {?}\n     */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @return {?}\n     */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    withOffsetX(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    withOffsetY(offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    withLockedPosition(isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    withPositions(positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    setOrigin(origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    }\n}\nif (false) {\n    /**\n     * Reference to the underlying position strategy to which all the API calls are proxied.\n     * \\@docs-private\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._positionStrategy;\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    ConnectedPositionStrategy.prototype._direction;\n    /**\n     * Ordered list of preferred positions, from most to least desirable.\n     * @type {?}\n     */\n    ConnectedPositionStrategy.prototype._preferredPositions;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    attach(overlayRef) {\n        /** @type {?} */\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    top(value = '') {\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    left(value = '') {\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    bottom(value = '') {\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    right(value = '') {\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    width(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    height(value = '') {\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    centerHorizontally(offset = '') {\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    centerVertically(offset = '') {\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        const config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        const styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        const parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    }\n}\nif (false) {\n    /**\n     * The overlay to which this strategy is attached.\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._cssPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._topOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._bottomOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._leftOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._rightOffset;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._alignItems;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._justifyContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._width;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._height;\n    /**\n     * @type {?}\n     * @private\n     */\n    GlobalPositionStrategy.prototype._isDisposed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nclass OverlayPositionBuilder {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _document\n     * @param {?} _platform\n     * @param {?} _overlayContainer\n     */\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OverlayPositionBuilder, factory: function (t) { return OverlayPositionBuilder.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: Platform }, { type: OverlayContainer }]; }, { constructor: [], _viewportRuler: [], _document: [], _platform: [], _overlayContainer: [], global: [], connectedTo: [], flexibleConnectedTo: [] });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    OverlayPositionBuilder.prototype._overlayContainer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    /**\n     * @param {?} scrollStrategies\n     * @param {?} _overlayContainer\n     * @param {?} _componentFactoryResolver\n     * @param {?} _positionBuilder\n     * @param {?} _keyboardDispatcher\n     * @param {?} _injector\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?} _directionality\n     * @param {?=} _location\n     */\n    constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    create(config) {\n        /** @type {?} */\n        const host = this._createHostElement();\n        /** @type {?} */\n        const pane = this._createPaneElement(host);\n        /** @type {?} */\n        const portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    _createPaneElement(host) {\n        /** @type {?} */\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    _createHostElement() {\n        /** @type {?} */\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(Injector), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(Directionality), ɵngcc0.ɵɵinject(Location, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: function (t) { return Overlay.ɵfac(t); }, providedIn: null });\n/** @nocollapse */\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location, decorators: [{ type: Optional }] }\n];\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: Injector }, { type: NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: Directionality }, { type: Location, decorators: [{\n                type: Optional\n            }] }]; }, { constructor: [], scrollStrategies: [], _overlayContainer: [], _componentFactoryResolver: [], _positionBuilder: [], _keyboardDispatcher: [], _injector: [], _ngZone: [], _document: [], _directionality: [], _location: [], create: [], position: [], _createPaneElement: [], _createHostElement: [], _createPortalOutlet: [], _appRef: [] });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._appRef;\n    /**\n     * Scrolling strategies that can be used when creating an overlay.\n     * @type {?}\n     */\n    Overlay.prototype.scrollStrategies;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._overlayContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._positionBuilder;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._keyboardDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._directionality;\n    /**\n     * @type {?}\n     * @private\n     */\n    Overlay.prototype._location;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @param {?=} config\n     * @return {?}\n     */\n    (config) => overlay.scrollStrategies.reposition(config));\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n/** @nocollapse */\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ElementRef }]; }, { constructor: [], elementRef: [] });\nif (false) {\n    /**\n     * Reference to the element on which the directive is applied.\n     * @type {?}\n     */\n    CdkOverlayOrigin.prototype.elementRef;\n}\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    /**\n     * @param {?} _overlay\n     * @param {?} templateRef\n     * @param {?} viewContainerRef\n     * @param {?} scrollStrategyFactory\n     * @param {?} _dir\n     */\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the x-axis\n     * @return {?}\n     */\n    get offsetX() { return this._offsetX; }\n    /**\n     * @param {?} offsetX\n     * @return {?}\n     */\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * The offset in pixels for the overlay connection point on the y-axis\n     * @return {?}\n     */\n    get offsetY() { return this._offsetY; }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /**\n     * Whether or not the overlay should attach a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /**\n     * Whether or not the overlay should be locked when scrolling.\n     * @return {?}\n     */\n    get lockPosition() { return this._lockPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay's width and height can be constrained to fit within the viewport.\n     * @return {?}\n     */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n     * @return {?}\n     */\n    get growAfterOpen() { return this._growAfterOpen; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /**\n     * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @return {?}\n     */\n    get push() { return this._push; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /**\n     * The associated overlay reference.\n     * @return {?}\n     */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /**\n     * The element's layout direction.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        }));\n    }\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    _buildConfig() {\n        /** @type {?} */\n        const positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    _updatePositionStrategy(positionStrategy) {\n        /** @type {?} */\n        const positions = this.positions.map((/**\n         * @param {?} currentPosition\n         * @return {?}\n         */\n        currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        })));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    }\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    _createPositionStrategy() {\n        /** @type {?} */\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe((/**\n         * @param {?} p\n         * @return {?}\n         */\n        p => this.positionChange.emit(p)));\n        return strategy;\n    }\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.backdropClick.emit(event);\n            }));\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(TemplateRef), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }]\n};\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: TemplateRef }, { type: ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { constructor: [], _overlay: [], _dir: [], _hasBackdrop: [], _lockPosition: [], _growAfterOpen: [], _flexibleDimensions: [], _push: [], _backdropSubscription: [], viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], _templatePortal: [], _scrollStrategyFactory: [], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetX: [], _offsetX: [], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], offsetY: [], _offsetY: [], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], hasBackdrop: [], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], lockPosition: [], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], flexibleDimensions: [], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], growAfterOpen: [], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], push: [], overlayRef: [], dir: [], ngOnDestroy: [], ngOnChanges: [], _createOverlay: [], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], _overlayRef: [], _buildConfig: [], _position: [], _updatePositionStrategy: [], _createPositionStrategy: [], _attachOverlay: [], _detachOverlay: [], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }] });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._templatePortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._hasBackdrop;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._lockPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._growAfterOpen;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._flexibleDimensions;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._push;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._backdropSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetX;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._offsetY;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._scrollStrategyFactory;\n    /**\n     * Origin for the connected overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.origin;\n    /**\n     * Registered connected position pairs.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positions;\n    /**\n     * The width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.width;\n    /**\n     * The height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.height;\n    /**\n     * The min width of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minWidth;\n    /**\n     * The min height of the overlay panel.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.minHeight;\n    /**\n     * The custom class to be set on the backdrop element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClass;\n    /**\n     * The custom class to add to the overlay pane element.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.panelClass;\n    /**\n     * Margin between the overlay and the viewport edges.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.viewportMargin;\n    /**\n     * Strategy to be used when handling scroll events while the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.scrollStrategy;\n    /**\n     * Whether the overlay is open.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.open;\n    /**\n     * Event emitted when the backdrop is clicked.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.backdropClick;\n    /**\n     * Event emitted when the position has changed.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.positionChange;\n    /**\n     * Event emitted when the overlay has been attached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.attach;\n    /**\n     * Event emitted when the overlay has been detached.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.detach;\n    /**\n     * Emits when there are keyboard events that are targeted at the overlay.\n     * @type {?}\n     */\n    CdkConnectedOverlay.prototype.overlayKeydown;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkConnectedOverlay.prototype._dir;\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule],\n        ScrollingModule] });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay,\n        CdkOverlayOrigin,\n        ScrollingModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null);\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        super(_document);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener((/**\n         * @return {?}\n         */\n        () => this._adjustParentForFullscreenChange()));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        const fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _addFullscreenChangeListener(fn) {\n        /** @type {?} */\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            /** @type {?} */\n            const _document = (/** @type {?} */ (this._document));\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    getFullscreenElement() {\n        /** @type {?} */\n        const _document = (/** @type {?} */ (this._document));\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nFullscreenOverlayContainer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FullscreenOverlayContainer, factory: function (t) { return FullscreenOverlayContainer.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { constructor: [], ngOnDestroy: [], _createContainer: [], _adjustParentForFullscreenChange: [], _addFullscreenChangeListener: [], _fullScreenListener: [], _getEventName: [], _fullScreenEventName: [], getFullscreenElement: [] });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenEventName;\n    /**\n     * @type {?}\n     * @private\n     */\n    FullscreenOverlayContainer.prototype._fullScreenListener;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_c, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_e, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_d, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy };\n\n//# sourceMappingURL=overlay.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { NgModule, Injectable, ɵɵdefineInjectable, ɵɵinject, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nlet mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nclass MediaMatcher {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(Platform)); };\nMediaMatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MediaMatcher, factory: function (t) { return MediaMatcher.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ MediaMatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Platform }]; }, { constructor: [], _platform: [], _matchMedia: [], matchMedia: [] });\nif (false) {\n    /**\n     * The internal matchMedia method to return back a MediaQueryList like object.\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._matchMedia;\n    /**\n     * @type {?}\n     * @private\n     */\n    MediaMatcher.prototype._platform;\n}\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        () => { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        () => { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction BreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    BreakpointState.prototype.matches;\n    /**\n     * A key boolean pair for each query provided to the observe method,\n     * with its current matched state.\n     * @type {?}\n     */\n    BreakpointState.prototype.breakpoints;\n}\n/**\n * The current state of a layout breakpoint.\n * @record\n */\nfunction InternalBreakpointState() { }\nif (false) {\n    /**\n     * Whether the breakpoint is currently matching.\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.matches;\n    /**\n     * The media query being to be matched\n     * @type {?}\n     */\n    InternalBreakpointState.prototype.query;\n}\n/**\n * @record\n */\nfunction Query() { }\nif (false) {\n    /** @type {?} */\n    Query.prototype.observable;\n    /** @type {?} */\n    Query.prototype.mql;\n}\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nclass BreakpointObserver {\n    /**\n     * @param {?} _mediaMatcher\n     * @param {?} _zone\n     */\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    isMatched(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        mediaQuery => this._registerQuery(mediaQuery).mql.matches));\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    observe(value) {\n        /** @type {?} */\n        const queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        const observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        query => this._registerQuery(query).observable));\n        /** @type {?} */\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        (breakpointStates) => {\n            /** @type {?} */\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            (state) => {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        const queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            const handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this._zone.run((/**\n             * @return {?}\n             */\n            () => observer.next(e))));\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        (nextMql) => ({ query, matches: nextMql.matches }))), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(NgZone)); };\nBreakpointObserver.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BreakpointObserver, factory: function (t) { return BreakpointObserver.ɵfac(t); }, providedIn: 'root' });\n/** @nocollapse */\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/** @nocollapse */ BreakpointObserver.ngInjectableDef = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: NgZone }]; }, { constructor: [], _mediaMatcher: [], _zone: [], _queries: [], _destroySubject: [], ngOnDestroy: [], isMatched: [], observe: [], _registerQuery: [] });\nif (false) {\n    /**\n     * A map of all media queries currently being listened for.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._queries;\n    /**\n     * A subject for all other observables to takeUntil based on.\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._destroySubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._mediaMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    BreakpointObserver.prototype._zone;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    (query) => query.split(',')))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    (a1, a2) => a1.concat(a2)))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    query => query.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, Injectable, Injector, Optional, SkipSelf, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event that is emitted when a snack bar is dismissed.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\n\nconst _c0 = [1, \"mat-simple-snackbar\"];\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r11.data.action);\n} }\nconst _c1 = [1, \"mat-snack-bar-container\"];\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nfunction MatSnackBarDismiss() { }\nif (false) {\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     */\n    MatSnackBarDismiss.prototype.dismissedByAction;\n}\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nclass MatSnackBarRef {\n    /**\n     * @param {?} containerInstance\n     * @param {?} _overlayRef\n     */\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        () => this.dismiss()));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        () => this._finishDismiss()));\n    }\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    _dismissAfter(duration) {\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => this.dismiss()), duration);\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nif (false) {\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.instance;\n    /**\n     * The instance of the component making up the content of the snack bar.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatSnackBarRef.prototype.containerInstance;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterDismissed;\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._onAction;\n    /**\n     * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n     * dismissed before the duration passes.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._durationTimeoutId;\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._dismissedByAction;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarRef.prototype._overlayRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n}\nif (false) {\n    /**\n     * The politeness level for the MatAriaLiveAnnouncer announcement.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.politeness;\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.announcementMessage;\n    /**\n     * The view container to place the overlay for the snack bar into.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.viewContainerRef;\n    /**\n     * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.duration;\n    /**\n     * Extra CSS classes to be added to the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.panelClass;\n    /**\n     * Text layout direction for the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.direction;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.data;\n    /**\n     * The horizontal position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.horizontalPosition;\n    /**\n     * The vertical position to place the snack bar.\n     * @type {?}\n     */\n    MatSnackBarConfig.prototype.verticalPosition;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    /**\n     * @param {?} snackBarRef\n     * @param {?} data\n     */\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostBindings: function SimpleSnackBar_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵelementHostAttrs(_c0);\n    } }, decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}/*# sourceMappingURL=simple-snack-bar.css.map */\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                moduleId: module.id,\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}/*# sourceMappingURL=simple-snack-bar.css.map */\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, { constructor: [], snackBarRef: [], data: [], action: [], hasAction: [] });\nif (false) {\n    /**\n     * Data that was injected into the snack bar.\n     * @type {?}\n     */\n    SimpleSnackBar.prototype.data;\n    /** @type {?} */\n    SimpleSnackBar.prototype.snackBarRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nconst matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} snackBarConfig\n     */\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            const onEnter = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                onEnter.next();\n                onEnter.complete();\n            }));\n        }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._onExit.next();\n            this._onExit.complete();\n        }));\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    _applySnackBarClasses() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                cssClass => element.classList.add(cssClass)));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(2);\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n        ɵngcc0.ɵɵelementHostAttrs(_c1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media(-ms-high-contrast: active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}/*# sourceMappingURL=snack-bar-container.css.map */\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\n/** @nocollapse */\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                moduleId: module.id,\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media(-ms-high-contrast: active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}/*# sourceMappingURL=snack-bar-container.css.map */\\n\"]\n            }]\n    }], function () { return [{ type: NgZone }, { type: ElementRef }, { type: ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { constructor: [], _ngZone: [], _elementRef: [], _changeDetectorRef: [], snackBarConfig: [], _destroyed: [], _onExit: [], _onEnter: [], _animationState: [], _role: [], attachComponentPortal: [], attachTemplatePortal: [], onAnimationEnd: [], enter: [], exit: [], ngOnDestroy: [], _completeExit: [], _applySnackBarClasses: [], _assertNotAttached: [], _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] });\nif (false) {\n    /**\n     * Whether the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._destroyed;\n    /**\n     * The portal outlet inside of this container into which the snack bar content will be loaded.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._portalOutlet;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onExit;\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._onEnter;\n    /**\n     * The state of the snack bar animations.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._animationState;\n    /**\n     * ARIA role for the snack bar container.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype._role;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBarContainer.prototype._changeDetectorRef;\n    /**\n     * The snack bar configuration.\n     * @type {?}\n     */\n    MatSnackBarContainer.prototype.snackBarConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer,\n        SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer,\n        MatCommonModule]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    /**\n     * @param {?} _overlay\n     * @param {?} _live\n     * @param {?} _injector\n     * @param {?} _breakpointObserver\n     * @param {?} _parentSnackBar\n     * @param {?} _defaultConfig\n     */\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Reference to the currently opened snackbar at *any* level.\n     * @return {?}\n     */\n    get _openedSnackBarRef() {\n        /** @type {?} */\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromComponent(component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    open(message, action = '', config) {\n        /** @type {?} */\n        const _config = Object.assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    _attach(content, userConfig) {\n        /** @type {?} */\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            const portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        state => {\n            /** @type {?} */\n            const classList = overlayRef.overlayElement.classList;\n            /** @type {?} */\n            const className = 'mat-snack-bar-handset';\n            state.matches ? classList.add(className) : classList.remove(className);\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        const isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    _createInjector(config, snackBarRef) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(Overlay), ɵngcc0.ɵɵinject(LiveAnnouncer), ɵngcc0.ɵɵinject(Injector), ɵngcc0.ɵɵinject(BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSnackBar, factory: function (t) { return MatSnackBar.ɵfac(t); }, providedIn: MatSnackBarModule });\n/** @nocollapse */\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: Overlay }, { type: LiveAnnouncer }, { type: Injector }, { type: BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, { constructor: [], _overlay: [], _live: [], _injector: [], _breakpointObserver: [], _parentSnackBar: [], _defaultConfig: [], _snackBarRefAtThisLevel: [], _openedSnackBarRef: [], _openedSnackBarRef: [], openFromComponent: [], openFromTemplate: [], open: [], dismiss: [], ngOnDestroy: [], _attachSnackBarContainer: [], _attach: [], _animateSnackBar: [], _createOverlay: [], _createInjector: [] });\nif (false) {\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._snackBarRefAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._live;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._breakpointObserver;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._parentSnackBar;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSnackBar.prototype._defaultConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import { Injectable } from '@angular/core';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { from } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/shared/logger.service\";\n/**\n * Wrapper around the prettify.js library\n */\nexport class PrettyPrinter {\n    constructor(logger) {\n        this.logger = logger;\n        this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n    }\n    getPrettyPrintOne() {\n        const ppo = window['prettyPrintOne'];\n        return ppo ? Promise.resolve(ppo) :\n            // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n            // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n            import('assets/js/prettify.js')\n                .then(() => window['prettyPrintOne'], err => {\n                const msg = `Cannot get prettify.js from server: ${err.message}`;\n                this.logger.error(new Error(msg));\n                // return a pretty print fn that always fails.\n                return () => { throw new Error(msg); };\n            });\n    }\n    /**\n     * Format code snippet as HTML\n     * @param {string} code - the code snippet to format; should already be HTML encoded\n     * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n     * @param {string|number} [linenums] - Whether to display line numbers:\n     *  - false: don't display\n     *  - true: do display\n     *  - number: do display but start at the given number\n     * @returns Observable<string> - Observable of formatted code\n     */\n    formatCode(code, language, linenums) {\n        return this.prettyPrintOne.pipe(map(ppo => {\n            try {\n                return ppo(code, language, linenums);\n            }\n            catch (err) {\n                const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n                console.error(msg, err);\n                throw new Error(msg);\n            }\n        }), first());\n    }\n}\nPrettyPrinter.ɵfac = function PrettyPrinter_Factory(t) { return new (t || PrettyPrinter)(i0.ɵɵinject(i1.Logger)); };\nPrettyPrinter.ɵprov = i0.ɵɵdefineInjectable({ token: PrettyPrinter, factory: function (t) { return PrettyPrinter.ɵfac(t); }, providedIn: null });\n/*@__PURE__*/ i0.ɵsetClassMetadata(PrettyPrinter, [{\n        type: Injectable\n    }], function () { return [{ type: i1.Logger }]; }, null);\n"],"sourceRoot":"webpack:///"}